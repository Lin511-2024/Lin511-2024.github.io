[
  {
    "objectID": "notes/meetings/02_Paths.html",
    "href": "notes/meetings/02_Paths.html",
    "title": "Paths in Python",
    "section": "",
    "text": "python\n\nfrom pathlib import Path\nPath() will return a relative path to the current directory, which is represented as ..\npython\n\nthis_directory = Path()\nprint(this_directory)\n\n.\nIf we use the .resolve() method on this_directory, we’ll get back the absolute path.\npython\n\nabsolute_path = this_directory.resolve()\nprint(absolute_path)\n\n/workspaces/Lin511-2024.github.io/notes/meetings\nWe can get the path to the directory above from the .parent attribute.\npython\n\nprint(\n    absolute_path.parent\n)\n\n/workspaces/Lin511-2024.github.io/notes\nWe can get a list of all of the files and directories in a directory with the .glob() method. For technical reasons, we need to wrap list() around this.\npython\n\nlist(\n    absolute_path.glob(\"*\")\n)\n\n[PosixPath('/workspaces/Lin511-2024.github.io/notes/meetings/assets'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/meetings/01_Paths.ipynb'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/meetings/00_setup.qmd')]\nYou can get a list of all of the files and folders in the parent directory like so.\npython\n\nlist(\n    absolute_path\\\n        .parent\\\n        .glob(\"*\")\n)\n\n[PosixPath('/workspaces/Lin511-2024.github.io/notes/.gitignore'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/concepts'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/meetings'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/index.qmd')]\nWe can get a list of all of the files and directories in the concepts directory like so.\npython\n\nlist(\n    absolute_path\\\n        .parent\\\n        .joinpath(\"concepts\")\\\n        .glob(\"*\")\n)\n\n[PosixPath('/workspaces/Lin511-2024.github.io/notes/concepts/02_undersdanding-paths.qmd'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/concepts/assets'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/concepts/01_what-is-python.qmd'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/concepts/03_navigating-directories.qmd'),\n PosixPath('/workspaces/Lin511-2024.github.io/notes/concepts/00_glossary.qmd')]"
  },
  {
    "objectID": "notes/meetings/02_Paths.html#opening-a-file",
    "href": "notes/meetings/02_Paths.html#opening-a-file",
    "title": "Paths in Python",
    "section": "Opening a file",
    "text": "Opening a file\nWe’re going to read in the text file here\n\n\npython\n\ntext_file_path = Path(\"assets\", \"sample.txt\")\n\nwith text_file_path.open() as file:\n    lines = file.readlines()\n\nprint(lines)\n\n['This is a sample file.\\n', 'It just has text.\\n', 'We can read and print its contents.']"
  },
  {
    "objectID": "notes/meetings/01_Python_basics.html",
    "href": "notes/meetings/01_Python_basics.html",
    "title": "Python basics",
    "section": "",
    "text": "print(1)\n\n1\n\n\n\nprint(\"hello\")\n\nhello\n\n\n\nprint(2 + 2)\n\n4\n\n\n\nx = 1\ny = 10\n\nprint(x + y)\n\n11\n\n\n\nword1 = \"Hello\"\nword2 = \" World!\"\n\nprint(word1 + word2)\n\nHello World!\n\n\n\nprint(True)\n\nTrue\n\n\n\nprint(False)\n\nFalse\n\n\n\nprint(True and False)\n\nFalse\n\n\n\n\n\nReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Python Basics},\n  url = {https://lin511-2024.github.io/notes/meetings/01_Python_basics.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. “Python Basics.” https://lin511-2024.github.io/notes/meetings/01_Python_basics.html."
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html",
    "href": "notes/concepts/02_undersdanding-paths.html",
    "title": "Understanding Directories",
    "section": "",
    "text": "There has recently been an uptick in discussion among college professors that students are less familiar with the notions of files, folders, directories, and paths than they used to be in the past. This is in part a natural consequence of shifting paradigms in computer use. Many people are exclusively using online services like Google Docs, and don’t save files to their computers ever. And even when we do save files on out computer, many operating systems have search based approaches to finding files.\nThe problem for scientific computing purposes, or even just making some simple HTML pages on your local computer, is that you need to be able to navigate the hierarchical file system of your computer, in order to tell your programs how to navigate it."
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#directory-structure",
    "href": "notes/concepts/02_undersdanding-paths.html#directory-structure",
    "title": "Understanding Directories",
    "section": "",
    "text": "There has recently been an uptick in discussion among college professors that students are less familiar with the notions of files, folders, directories, and paths than they used to be in the past. This is in part a natural consequence of shifting paradigms in computer use. Many people are exclusively using online services like Google Docs, and don’t save files to their computers ever. And even when we do save files on out computer, many operating systems have search based approaches to finding files.\nThe problem for scientific computing purposes, or even just making some simple HTML pages on your local computer, is that you need to be able to navigate the hierarchical file system of your computer, in order to tell your programs how to navigate it."
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#files-in-folders",
    "href": "notes/concepts/02_undersdanding-paths.html#files-in-folders",
    "title": "Understanding Directories",
    "section": "Files in Folders",
    "text": "Files in Folders\nThe first thing to be clear about is that all files you’ve saved on your computer are in a folder (a.k.a. a directory). “Documents” or “My Documents” is a folder. Even your Desktop is a folder. This is true for both macOS and Windows. For example, I have an account on my laptop called “Display” for when I want to show how my computer works without showing everyone all of my personal files. In the Display account, I saved a little text file called Sampletext.txt to the desktop. In this screenshot, you can see Sampletext.txt shown both on my desktop, and as a file in a folder.\n\n\n\nDesktop is a folder\n\n\nWhat’s nice about this image is that you can see where Sampletext.txt exists in the context of my whole hard drive. My “Desktop” is just a folder that my computer shows the content of on my main screen. The Desktop folder is inside of a folder called “Display”. There are other folders in there, including my main user account, joseffruehwald. All of these folders are grouped together in the “Users” folder, and the “Users” folder is one of the first folders immediately underneath my hard drive.\nThe important thing to keep in mind here is that all files, programs, photos, etc are stored somewhere in a folder, inside of another folder, probably inside of another folder. You might not always interact with the files this way, and they might not always look like they’re in a folder, but they are.\n\nViewing the folder hierarchy on a Mac\nTo be able to better view the full hierarchy of folders on a Mac, I would recommend the following:\n\nOpen Finder, and in the View menu, select “as Columns”\nUnder the View menu again, select “Show Path Bar”\n\n\n\nViewing the folder hierarchy in Windows\nAt the top of the file browser on Windows, you’ll see the sequence of files in which the current folder is embedded.\n\n\n\nWindows directory structure"
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#giving-directions-to-programs",
    "href": "notes/concepts/02_undersdanding-paths.html#giving-directions-to-programs",
    "title": "Understanding Directories",
    "section": "Giving Directions to Programs",
    "text": "Giving Directions to Programs\nPrograms are going to need directions for where to find things, and we can do this with “paths”. The concept of a path is so important, I’m going to really emphasize it\n“paths” \nThe “path” to a file is a written instruction for where to find a file on your specific computer."
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#relative-paths",
    "href": "notes/concepts/02_undersdanding-paths.html#relative-paths",
    "title": "Understanding Directories",
    "section": "Relative Paths",
    "text": "Relative Paths\nSometimes, we only need to tell a file where another file is relative to itself. For example, here is an HTML document and a CSS stylesheet for that document.\n\n\n\nhtml and css in a dicectory\n\n\nFrom site.html to style.css: style.css\nBecause style.css is in the same folder as site.html, we only need to tell site.html to look for style.css, like so\n\nhtml\n\n&lt;link \n  rel=\"stylesheet\" \n  type=\"text/css\" \n  href=\"style.css\"&gt;\nJust telling the html file to look for style.css, it’s going to look inside of, and only inside of the same folder as itself.\nHowever, sometimes people like to put all of the stylesheets and images for a website inside of a folder called “assets,” like so:\n\n\n\nstylesheet in assets\n\n\nFrom site.html to style.css: assets/style.css\nNow, if we tell site.html just to look for style.css, it’s not going to find it anymore! That’s because style.css is no longer in the same folder as site.html. We’ll need to update the link to the stylesheet to reflect the fact that it’s now in a different folder, like so:\n\nhtml\n\n&lt;link \n  rel=\"stylesheet\" \n  type=\"text/css\" \n  href=\"assets/style.css\"&gt;\nHere’s how site.html interprets the string assets/style.css:\n\nLook inside the folder you’re currently in for a folder called assets\nThen, look inside of that folder for a file called style.css\n\nWe could take it a step further, and create a new folder called “css” inside of “assets”, and put our stylesheet there instead.\n\n\n\n`assets/css/style.css`\n\n\nFrom site.html to style.css: assets/css/style.css\nNow, we’d need to update the link to the stylesheet to look like this\n\nhtml\n\n&lt;link \n  rel=\"stylesheet\" \n  type=\"text/css\" \n  href=\"assets/css/style.css\"&gt;\nAgain, breaking this down into how site.html interprets the string assets/css/style.css goes like this:\n\nLook inside of the same folder as yourself for a folder called assets\nLook inside of that folder for a folder called css\nLook inside of that folder for a file called style.css"
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#absolute-paths",
    "href": "notes/concepts/02_undersdanding-paths.html#absolute-paths",
    "title": "Understanding Directories",
    "section": "Absolute Paths",
    "text": "Absolute Paths\nRelative paths define the location of a file relative to another file, usually the one you’re writing. However, we can also define the location of a file on our computer that will work no matter where we’re looking from. These are called “absolute paths.” Put simply, absolute paths just list all of the nested folders a file is in, all the way up to the hard drive. You can see the absolute path for style.css at the bottom of the very last screen shot.\nDifferent operating systems have different short hands for describing the top level, or hard drive level, of the path. On macOS, it’s simply a / at the beginning of the path. On Windows, it usually begins with C:\\. For the final location of style.css in the screenshot above, the absolute path would be.\n/Users/Display/Documents/html_practice/assets/css/style.css\nIf for some reason I didn’t want to move or copy this stylesheet from this location, and I wanted to link to it from an HTML file saved in some completely different location on my laptop, I could give it this absolute path, and it would find it."
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#important-note-on-naming",
    "href": "notes/concepts/02_undersdanding-paths.html#important-note-on-naming",
    "title": "Understanding Directories",
    "section": "Important Note on Naming",
    "text": "Important Note on Naming\nFrom here on out in the course, you should avoid using spaces in any of the files or folders you name. While you can take spaces into account when giving a path, it’s annoying. Instead, I’d recommend using an underscore _, a dash -, or naming files with “camel case”.\n\nmy_file.txt\nmy-file.txt\nmyFile.txt"
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#important-note-on-using-paths",
    "href": "notes/concepts/02_undersdanding-paths.html#important-note-on-using-paths",
    "title": "Understanding Directories",
    "section": "Important Note on Using Paths",
    "text": "Important Note on Using Paths\nThere are two crucial things to remember about using paths that can be conceptually difficult when first getting started.\n\nRelative paths always depend on where you’re coming from and where you’re going to. If either my HTML file was in a location I was confused about, or my CSS file was in a location I was confused about, my relative path might not work.\nBoth relative paths and absolute paths depend on how files are organized inside of your own computer. A path copied from an example online, or a professor’s template might not work  if your file structure is different."
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#single-quotes-vs-backticks",
    "href": "notes/concepts/01_keyboarding.html#single-quotes-vs-backticks",
    "title": "“Where is the … key?”",
    "section": "Single Quotes vs Backticks",
    "text": "Single Quotes vs Backticks\nIt’s important to distinguish between single quotes: ' and backticks `. They look similar, but aren’t interchangeable.\nThe backtick key is highlighted in the images of the keyboards below, in the top left side.\n\nPCMac"
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#slash-vs-backslash-.",
    "href": "notes/concepts/01_keyboarding.html#slash-vs-backslash-.",
    "title": "“Where is the … key?”",
    "section": "Slash (/) vs backslash (\\).",
    "text": "Slash (/) vs backslash (\\).\nThese different symbols will do different things, and aren’t interchangeable!\n\nSlash (/) location\n\nPCMac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBackslash (\\) location\n\nPCMac"
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#the-tilde-key.",
    "href": "notes/concepts/01_keyboarding.html#the-tilde-key.",
    "title": "“Where is the … key?”",
    "section": "The tilde ~ key.",
    "text": "The tilde ~ key.\nTo type the tilde1 key you have to hold Shift+`.\n\nPCMac"
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#the-caret",
    "href": "notes/concepts/01_keyboarding.html#the-caret",
    "title": "“Where is the … key?”",
    "section": "The caret ^",
    "text": "The caret ^\nYou can get the caret symbol with Shift+6\n\nPCMac"
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#the-pipe",
    "href": "notes/concepts/01_keyboarding.html#the-pipe",
    "title": "“Where is the … key?”",
    "section": "The Pipe |",
    "text": "The Pipe |\nYou can get the pipe, or vertical bar, with Shift+\\.\n\nPCMac"
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#side-note-smart-quotes",
    "href": "notes/concepts/01_keyboarding.html#side-note-smart-quotes",
    "title": "“Where is the … key?”",
    "section": "Side Note: “Smart Quotes”",
    "text": "Side Note: “Smart Quotes”\nIf, at some point, you copy-paste text from the internet into your code or a text file, you might wind up with “smart quotes” that make things work weird!\n\n\n\nRegular Quotes\nSmart Quotes\n\n\n\n\n\"regular\"\n“smart”\n\n\n'regular'\n‘smart’\n\n\n\nBe careful not to have smart quotes cropping up in your code or data!"
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#footnotes",
    "href": "notes/concepts/01_keyboarding.html#footnotes",
    "title": "“Where is the … key?”",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPronunciations include [tɪl.də] and [tɪl.di]↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Linguistics (Spring 2024)",
    "section": "",
    "text": "Welcome to the Lin511 Computational Linguistics website. This course is being taught in the University of Kentucky’s Linguistics Department in Spring 2024\nIf you are visiting on a mobile device, site navigation can be found under the “hamburger” at the top.\n\n\n\nReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Computational {Linguistics} {(Spring} 2024)},\n  url = {https://lin511-2024.github.io/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. “Computational Linguistics (Spring\n2024).” https://lin511-2024.github.io/."
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "",
    "text": "Where:\nWhitehall, Rm 205\n\n\nWhen:\nTues & Thurs, 09:30 - 10:45\n\n\nPrereq:\nLin221\n\n\nCredits:\n3\n\n\n\n\n\n\n\n\n\n\nDr. Josef Fruehwald\n\n\nemail:\njosef.fruehwald@uky.edu\n\n\noffice hours:\nMons, 12:00pm - 02:00pm\n\n\noffice hours location:\nBreckinridge, Rm 10"
  },
  {
    "objectID": "syllabus/syllabus.html#key-info",
    "href": "syllabus/syllabus.html#key-info",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "",
    "text": "Where:\nWhitehall, Rm 205\n\n\nWhen:\nTues & Thurs, 09:30 - 10:45\n\n\nPrereq:\nLin221\n\n\nCredits:\n3\n\n\n\n\n\n\n\n\n\n\nDr. Josef Fruehwald\n\n\nemail:\njosef.fruehwald@uky.edu\n\n\noffice hours:\nMons, 12:00pm - 02:00pm\n\n\noffice hours location:\nBreckinridge, Rm 10"
  },
  {
    "objectID": "syllabus/syllabus.html#course-at-a-glance",
    "href": "syllabus/syllabus.html#course-at-a-glance",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "2 Course at a Glance",
    "text": "2 Course at a Glance\n\nWhat you’ll learn:\n\nComputational approaches to linguistic analysis; Computational tools (python, regular expressions, Git, GitHub).\n\nWhat you’ll do:\n\nIn class exercises; Programming assignments.\n\nWhat you’ll need:\n\nA computer with a physical keyboard; A GitHub account.\n\nThe final-est deadline\n\nApril 30, 2024\n\nAttendance Policy\n\nAttendance is crucial for successful completion of the course, but there are no grade penalties.\n\nLate Work Policy\n\n2 day penalty free grace period on all assignments, 5% flat penalty afterwards. See Late Submissions and Re-submissions"
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "3 Course Description",
    "text": "3 Course Description\nThere are two important components to this course\n\nThis is an introduction to computational linguistics, with an emphasis on linguistics. We’ll be learning about approaches to computation as it relates to linguistic theory (e.g. phonological rules, syntactic parsing, etc) as well as computation involved in processing linguistic data (e.g. Large Language Models, Speech-to-Text etc.).\nThis will be an introduction to some practical aspects of general purpose computation, including basics of file system organization, version control, Integrated Developent Environments, command-line interfaces, and program writing (specifically in Python).\n\n\nHave you ever said one these things?\n\n“My computer hates me.”\n“I’m not a tech person.”\n\nAs part of our course meetings, I’ll be labelling these and other similar statements as “negative self-talk”. Instead, I’ll encourage you to try different statements, like\n\n“I’m not familiar with these concepts yet.”\n“Up to now, I’ve found these methods opaque.”\n\nWe can acknowledge your current struggle or confusion with computation or technology, while also acknowledging that their use is a skill, not a talent, and that skill can be built upon and improved with experience and practice."
  },
  {
    "objectID": "syllabus/syllabus.html#learning-outcomes",
    "href": "syllabus/syllabus.html#learning-outcomes",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "4 Learning Outcomes",
    "text": "4 Learning Outcomes\nAfter attending class meetings and completion of the coursework, students should be able to\n\nDescribe the computational methods used to model and process linguistic structures.\nUse Regular Expressions to search and match strings.\nWrite a python program to linguistically parse language data.\nCritically evaluate claims made about modern natural language processing applications."
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials",
    "href": "syllabus/syllabus.html#course-materials",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "5 Course Materials",
    "text": "5 Course Materials\nWe will be using a mixture of textbooks and online resources for the course. These are currently available for free online. The labels SLP, NLTK and TP will be used to refer to each book in the reading schedule.\n\nSLP:\n\nDaniel Jurafsky and James H Martin. 202\\d. Speech and Language Processing: An Introduction to Natural Language Processing Computational Linguistics, and Speech Recognition Third Edition.\n\nNLTK:\n\nSteven Bird, Ewan Klein, and Edward Loper. 2009. Natural Language Processing with Python: Analyzing Text with the Natural Language Toolkit\n\nTP:\n\nAllen B. Downey. 2015. Think Python, 2nd edition"
  },
  {
    "objectID": "syllabus/syllabus.html#course-technology",
    "href": "syllabus/syllabus.html#course-technology",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "6 Course Technology",
    "text": "6 Course Technology\nAs course with a practical programming component, we’re going to be using a number of technical programs. There will be specific class time set aside for setting these up.\n\nCommand-Line Interfaces\nCommand-line Interfaces (CLI) are text-only ways to interact with your computer, including accessing its files and running programs. We will all be accessing the CLI through Visual Studio Code. For Windows users, this will also involve installing Windows Subsystem for Linux.\n\n\nPython Scripts & Jupyter Notebooks\nPython is the programming language that we’ll be using to do most of our work and analysis in this course. We’ll also be using extensions to the Python programming language in the form of freely available Python libraries, such as nltk and numpy.\nWe’ll be writing both python scripts as well as using Jupyter notebooks to interact with python.\n\n\nVisual Studio Code\nThe fact we will be “writing” python scripts implies we will be writing them in something. The program we will be using for composing our programs will be Visual Studio Code. VS Code is a general purpose Integrated Development Environment (IDE).\nAs “formal languages”, programming languages are very sensitive to any kind of typo or formatting error. The purpose IDEs is to provide you support to avoid these typos & errors in the first place, and to warn you when they exist.\n\n\nGit/Github\nGit is a “Version Control System” that lets you keep track of changes on software projects. Github is a service that allows online hosting of Git projects. You will need to create a free a Github account for the course.\nThere will be a number of course assignments that you will submit via commits to GitHub.\n\n\nCanvas\nCanvas will be used to make course announcements, and to distribute assignment links."
  },
  {
    "objectID": "syllabus/syllabus.html#communications",
    "href": "syllabus/syllabus.html#communications",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "7 Communications",
    "text": "7 Communications\nI will respond to emails in a timely manner during normal working hours, but it may take longer if you email me after 5pm on weekdays, or any time during the weekend."
  },
  {
    "objectID": "syllabus/syllabus.html#course-schedule",
    "href": "syllabus/syllabus.html#course-schedule",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "8 Course Schedule",
    "text": "8 Course Schedule\nThe topics and readings listed here are the tentative schedule for the course. We may find, in the room, that some topics will take longer than initially scheduled.\n\nWeek 1\n\n\n\nDates:\n\nJan 8-12\n\n\n\n\nTopics:\n\nSetup, What is Computational Linguistics?\n\n\n\n\n\nReadings\nFollow posted tutorials for setting up our course technology.\n\n\n\n\nWeek 2-3\n\n\n\nDates:\n\nJan 15-26\n\n\n\n\nTopics:\n\nFiles, Text, Strings, Regular Expressions, Finite State Automata\n\n\n\n\nNo Office Hours for MLK Jr Day.\n\nReadings:\n\nCourse Notes: What is Python\nSLP Chapter 2, section 2.1 (pdf)\nTP Chapter 1\n\n\n\n\n\nWeek 4-5\n\n\n\nDates:\n\nJan 29-Feb 09\n\n\n\n\nTopics:\n\nText Normalization, Tokenization, Python Variables, Python Functions\n\n\n\n\n\nReadings\n\nSLP Chapter 2, sections 2.2, 2.3, 2.4\nTP, Chapter 2\nTP Chapter 3\nNLTK Book, Chapter 3\n\n\n\n\n\nWeek 6-7\n\n\n\nDates:\n\nFeb 12 - 23\n\n\n\n\nTopics:\n\nn-grams, Corpora, Document Classification, Python Loops and Conditionals\n\n\n\n\n\nReadings\n\nSLP Chapters 3, 4, 5\n[TP, Chapter 10, Lists]\n[TP, Chapter 7, Iteration]\n[TP, Chapter 5, Conditionals]\n\n\n\n\n\nWeek 8-9\n\n\n\nDates:\n\nFeb 26 - Mar 08\n\n\n\n\nTopics:\n\nHidden Markov Models\n\n\n\n\n\nReadings\n\nSLP Appendix A: Hidden Markov Models\n\n\n\nSpring Break\n\n\n\n\n\nWeek 10\n\n\n\nDates:\n\nMar 18-22\n\n\n\n\nTopics:\n\nMore"
  },
  {
    "objectID": "syllabus/syllabus.html#course-evaluation",
    "href": "syllabus/syllabus.html#course-evaluation",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "9 Course Evaluation",
    "text": "9 Course Evaluation\n\n\n\nGrade Components\n\n\n\nWeekly Exercises\n45%\n\n\nIn-Class Exercises\n25%\n\n\nFinal Project\n20%\n\n\nEngagement\n10%\n\n\n\n\n\nGrading Scale\n\n\n\nA\n&gt;= 90\n\n\nB\n80 to 89\n\n\nC\n70 to 79\n\n\nD\n60 to 69\n\n\nE\n&lt;= 59\n\n\n\n\n\n\n\nAssignment Submission\nSome assignments will be created in GitHub Classroom, and their invite code will be posted to canvas. Some of these assignments will have “autograding” tests enabled. These “autogrades” are intended to be feedback to help you fine tune your code, and are not meant to be the final grade you will get for the assignment. Only grades as they are appear on Canvas are your official grade.\n\n\nFinal Project\nA final capstone project for the course. This could be a report, an extension of an earlier exercise, or some other agreed upon format.\n\n\nEngagement\nInspired by Kirby Conrod’s approach to Participation Grades\n\nThis portion of the grade is a way for me to give you credit for informal/unstructured collaborative work that you do. Participation and collaboration are strong predictors of success and learning retention, so please make an effort to find a way that works well for you to participate and engage with your colleagues.\n\nA well known process for solving programming problems is “Rubber Duck Debugging.” It works by describing how each step of a program is supposed to work to another person or, as the name suggests, a rubber duck. Often the solution to the problem or the typo causing the bug jumps out at you during the process. Having a study buddy or study group could be really helpful if only for this purpose."
  },
  {
    "objectID": "syllabus/syllabus.html#late-submissions-and-re-submissions",
    "href": "syllabus/syllabus.html#late-submissions-and-re-submissions",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "10 Late Submissions and Re-submissions",
    "text": "10 Late Submissions and Re-submissions\nEvery graded piece of work will have a due date. After a 2 day grace period, there will be a single, flat 5% deduction from late work, whenever it is submitted between the due date and the The Final-est Deadline\n\nMidterm Grades\nI will submit midterm grades on March 08, 2024, at the end of the midterm grading window. Any unsubmitted assignments that were due before March 08 will be given a grade of 0, BUT you can still submit those assignments after March 08 for their inclusion in the final grade.\n\n\nThe Final-est Deadline\nThe final-est deadline by which to submit any material to be graded is April 30, 2024. I have to set this hard deadline in order to have enough time to conclude final grading in time for the university’s final grade submission deadline."
  },
  {
    "objectID": "syllabus/syllabus.html#group-work-and-code-sources",
    "href": "syllabus/syllabus.html#group-work-and-code-sources",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "11 Group Work and Code Sources",
    "text": "11 Group Work and Code Sources\nIt is acceptable to collaborate and confer with other students in the course. Any collaboration should be indicated in the assignment submission. You may also refer to code sources from elsewhere on the internet, as long as you also document the source, and explain what the code does. You might not receive credit for code which has been copied wholesale from another online source or from another student without credit or documentation.\n\nLarge Language Model (a.k.a. AI) Generated Code\nThere are a number of services that will generate code based on natural language queries. Some words of warning:\n\nFluent BS\nLarge Language Models have been found to generate code that looks superficially correct, but often does not actually run properly, or do what the human asker wanted. Being able to successfully identify where or why code does not work correctly is not always straight forward. This issue led the Q&A site StackOverflow to ban submissions generated by LLMs, stating\n\n[…] because GPT is good enough to convince users of the site that the answer holds merit, signals the community typically use to determine the legitimacy of their peers’ contributions frequently fail to detect severe issues with GPT-generated answers.\n\n\n\nExplain what the code does\nAs stated above, you should provide credit to any external sources you turned to for code help, and explain what the resulting code does."
  },
  {
    "objectID": "syllabus/syllabus.html#attendance-and-engagement",
    "href": "syllabus/syllabus.html#attendance-and-engagement",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "12 Attendance and Engagement",
    "text": "12 Attendance and Engagement\nYou are expected to attend all scheduled course meetings. It would be helpful, but not necessary, if you let me know in advance if you are going to miss any lectures.\nIf you feel sick in any way, including but not limited to the well-known symptoms of COVID-19 (loss of taste or smell, a new and persistent cough, high fever, etc), do not come to class. There are other mechanisms for demonstrating engagement than attending lectures.\nI will also expect all of us in the course to treat each other with respect and civility in all aspects of the course, including\n\nIn the audio of a Zoom meeting\nIn the text chat of a Zoom meeting\nOn any course discussion boards or other forums."
  },
  {
    "objectID": "syllabus/syllabus.html#academic-conduct",
    "href": "syllabus/syllabus.html#academic-conduct",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "13 Academic Conduct",
    "text": "13 Academic Conduct\nUK Senate rules on academic offences\nAppropriating someone else’s work and portraying it as your own is cheating. Collaborating with someone and portraying that work as solely your own is cheating. Obtaining answers to homework assignments or exams from previous semesters is cheating. Using an internet search engine to look up a question and reporting that answer as your own is cheating. Falsifying data or experimental results is cheating. If you are unsure about whether a specific action is cheating, you may check with me.\nThe minimum penalty for a first offense is a zero on the assignment on which the offense occurred. If the offense is considered severe or if the student has other academic offenses on their record, more serious penalties, up to suspension from the University may be imposed.\nWhen students submit work purporting to be their own, but which in any way borrows ideas, organization, wording or anything else from another source without appropriate acknowledgement of the fact, the students are guilty of plagiarism. Plagiarism includes reproducing someone else’s work, whether it be a published article, chapter of a book, a paper from a friend or some file, or something similar to this. Plagiarism also includes the practice of employing or allowing another person to alter or revise the work which a student submits as their own, whoever that other person may be.\nStudents may discuss assignments among themselves or with an instructor or tutor, but when the actual work is done, it must be done by the student, and the student alone. When a student’s assignment involves research in outside sources of information, the student must carefully acknowledge exactly what, where and how they employed them. If the words of someone else are used, the student must put quotation marks around the passage in question and add an appropriate indication of its origin. Making simple changes while leaving the organization, content and phraseology intact is plagiaristic. However, nothing in these Rules shall apply to those ideas which are so generally and freely circulated as to be a part of the public domain (University Senate Rules Section 6.3.1)."
  },
  {
    "objectID": "syllabus/syllabus.html#university-academic-policy-statements",
    "href": "syllabus/syllabus.html#university-academic-policy-statements",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "14 University Academic Policy Statements",
    "text": "14 University Academic Policy Statements\nLink to University Senate Academic Policy Statements\n\nExcused Absences and Acceptable Excuses\n\nExcused Absences: Senate Rules 5.2.5.2.1 defines the following as acceptable reasons for excused absences: (a) significant illness, (b) death of a family member, (c) trips for members of student organizations sponsored by an educational unit, trips for University classes, and trips for participation in intercollegiate athletic events, (d) major religious holidays, (e) interviews for graduate/professional school or full-time employment post-graduation, and (f) other circumstances found to fit “reasonable cause for nonattendance” by the instructor of record. Students should notify the professor of absences prior to class when possible.\nIf a course syllabus requires specific interactions (e.g., with the instructor or other students), in situations where a student’s total EXCUSED absences exceed 1/5 (or 20%) of the required interactions for the course, the student shall have the right to request and receive a “W,” or the Instructor of Record may award an “I” for the course if the student declines a “W.” (Senate Rules 5.2.5.2.3.1)\n\n\n\nReligious Observances\n\nReligious Observances: Students anticipating an absence for a major religious holiday are responsible for notifying the instructor in writing of anticipated absences due to their observance of such holidays. Senate Rules 5.2.5.2.1(4) requires faculty to include any notification requirements within the syllabus. If no requirement is specified, two weeks prior to the absence is reasonable and should not be given any later. Information regarding major religious holidays may be obtained through the Ombud’s websiteor calling 859-257-3737.\n\n\n\nVerification of Absences\n\nVerification of Absences:Students may be asked to verify their absences in order for them to be considered excused. Senate Rule 5.2.5.2.1 states that faculty have the right to request appropriate verification when students claim an excused absence due to: significant illness; death in the household, trips for classes, trips sponsored by an educational unit and trips for participation related to intercollegiate athletic events; and interviews for full-time job opportunities after graduation and interviews for graduate and professional school. (Appropriate notification of absences due to University-related trips is required prior to the absence when feasible and in no case more than one week after the absence.)\n\n\n\nMake-Up Work\n\nMake-Up Work: Students missing any graded work due to an excused absence are responsible: for informing the Instructor of Record about their excused absence within one week following the period of the excused absence (except where prior notification is required); and for making up the missed work. The instructor must give the student an opportunity to make up the work and/or the exams missed due to the excused absence, and shall do so, if feasible, during the semester in which the absence occurred. The instructor shall provide the student with an opportunity to make up the graded work and may not simply calculate the student’s grade on the basis of the other course requirements, unless the student agrees in writing. According to SR 5.2.5.2.2, if a student adds a class after the first day of classes and misses graded work, the instructor must provide the student with an opportunity to make up any graded work.\n\n\n\nExcused Absences for Military Duties\n\nExcused Absences for Military Duties: If a student is required to be absent for one-fifth or less of the required course interactions (e.g., class meetings) due to military duties, the following procedure (per SR 5.2.5.2.3.2) shall apply:\n\nOnce a student is aware of a call to duty, the student shall provide a copy of the military orders to the Director of the Veterans Resource Center. The student shall also provide the Director with a list of his/her courses and instructors.\nThe Director will verify the orders with the appropriate military authority, and on behalf of the military student, notify each Instructor of Record via Department Letterhead as to the known extent of the absence.\nThe Instructor of Record shall not penalize the student’s absence in any way and shall provide accommodations and timeframes so that the student can make up missed assignments, quizzes, and tests in a mutually agreed upon manner.\n\n\n\n\nUnexcused Absences\n\nUnexcused Absences: If an attendance/interaction policy is not stated in the course syllabus or the policy does not include a penalty to the student, the instructor cannot penalize a student for any unexcused absences. (SR 5.2.5.2.3.3)\n\n\n\nPrep Week and Reading Days\n\nPrep Week and Reading Days: Per Senate Rules 5.2.5.6, the last week of instruction of a regular semester is termed “Prep Week.” This phrase also refers to the last three days of instruction of the summer session and winter intersession. The Prep Week rule applies to ALL courses taught in the fall semester, spring semester, and summer session, including those taught by distance learning or in a format that has been compressed into less than one semester or session. This rule does not apply to courses in professional programs in colleges that have University Senate approval to have their own calendar.\nMake-up exams and quizzes are allowed during Prep Week. In cases of “Take Home” final examinations, students shall not be required to return the completed examination before the regularly scheduled examination period for that course. No written examinations, including final examinations, may be scheduled during the Prep Week. No quizzes may be given during Prep Week. No project/lab practicals/paper/presentation deadlines or oral/listening examinations may fall during the Prep Week unless it was scheduled in the syllabus AND the course has no final examination (or assignment that acts as a final examination) scheduled during finals week. (A course with a lab component may schedule the lab practical of the course during Prep Week if the lab portion does not also require a Final Examination during finals week.) Class participation and attendance grades are permitted during Prep Week. The Senate Rules permit continuing into Prep Week regularly assigned graded homework that was announced in the class syllabus.\nFor fall and spring semester, the Thursday and Friday of Prep Week are study days (i.e. “Reading Days”). There cannot be any required “interactions” on a Reading Day. “Interactions” include participation in an in-class or online discussion, attendance at a guest lecture, or uploading an assignment. See Senate Rules 9.1 for a more complete description of required interactions.\n\n\n\nAccommodations Due to Disability\n\nAccommodations Due to Disability: In accordance with federal law, if you have a documented disability that requires academic accommodations, please inform your instructor as soon as possible during scheduled office hours. In order to receive accommodations in a course, you must provide your instructor with a Letter of Accommodation from the Disability Resource Center (DRC). The DRC coordinates campus disability services available to students with disabilities. It is located on the corner of Rose Street and Huguelet Drive in the Multidisciplinary Science Building, Suite 407. You can reach them via phone at (859) 257-2754, via email (drc@uky.edu) or visit their website (uky.edu/DisabilityResourceCenter). DRC accommodations are not retroactive and should therefore be established with the DRC as early in the semester as is feasible.\n\n\n\nNon-Discrimination Statement and Title IX Information\n\nNon-discrimination and Title IX policy: In accordance with federal law, UK is committed to providing a safe learning, living, and working environment for all members of the University community. The University maintains a comprehensive program which protects all members from discrimination, harassment, and sexual misconduct. For complete information about UK’s prohibition on discrimination and harassment on aspects such as race, color, ethnic origin, national origin, creed, religion, political belief, sex, and sexual orientation, please see the electronic version of UK’s Administrative Regulation 6:1 (“Policy on Discrimination and Harassment”) (https://www.uky.edu/regs/ar6-1). In accordance with Title IX of the Education Amendments of 1972, the University prohibits discrimination and harassment on the basis of sex in academics, employment, and all of its programs and activities. Sexual misconduct is a form of sexual harassment in which one act is severe enough to create a hostile environment based on sex and is prohibited between members of the University community and shall not be tolerated. For more details, please see the electronic version of Administrative Regulations 6:2 (“Policy and Procedures for Addressing and Resolving Allegations of Sexual Harassment Under Title IX and Other Forms of Sexual Misconduct”) (https://www.uky.edu/regs/sites/www.uky.edu.regs/files/files/ar/ar_6.2-in...). Complaints regarding violations of University policies on discrimination, harassment, and sexual misconduct are handled by the Office of Institutional Equity and Equal Opportunity (Institutional Equity), which is located in 13 Main Building and can be reached by phone at (859) 257-8927. You can also visit Institutional Equity’s website (https://www.uky.edu/eeo).\nFaculty members are obligated to forward any report made by a student related to discrimination, harassment, and sexual misconduct to the Office of Institutional Equity. Students can confidentially report alleged incidences through the Violence Intervention and Prevention Center (https://www.uky.edu/vipcenter), Counseling Center (https://www.uky.edu/counselingcenter), or University Health Service (https://ukhealthcare.uky.edu/university-health-service/student-health).\nReports of discrimination, harassment, or sexual misconduct may be made via the Institutional Equity’s website (https://www.uky.edu/eeo); at that site, click on “Make a Report” on the left-hand side of the page.\n\n\n\nRegular and Substantive Interaction\n\nRegular and Substantive Interaction: All credit-bearing courses must support regular and substantive interaction (RSI) between the students and the instructor, regardless of the course’s delivery mode (e.g., in-person, hybrid, or online). Courses satisfy this requirement when course participants meet regularly as prescribed in SR 10.6, and the Instructor of Record substantively interacts with students in at least two of the following ways: provides direct instruction; assesses students’ learning; provides information or responds to students’ questions; and facilitates student discussions. Some exceptions allowed as per SACSCOC. For further information about the RSI requirement, see the Compliance Resources link on the Teaching, Learning and Academic Innovation Compliance page."
  },
  {
    "objectID": "syllabus/syllabus.html#diversity-equity-and-inclusion",
    "href": "syllabus/syllabus.html#diversity-equity-and-inclusion",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "15 Diversity, Equity and Inclusion",
    "text": "15 Diversity, Equity and Inclusion\nUK Senate DEI Statement\nThe University of Kentucky is committed to our core values of diversity and inclusion, mutual respect and human dignity, and a sense of community (Governing Regulations XIV). We acknowledge and respect the seen and unseen diverse identities and experiences of all members of the university community (https://www.uky.edu/regs/gr14). These identities include but are not limited to those based on race, ethnicity, gender identity and expressions, ideas and perspectives, religious and cultural beliefs, sexual orientation, national origin, age, ability, and socioeconomic status. We are committed to equity and justice and providing a learning and engaging community in which every member is engaged, heard, and valued.\nWe strive to rectify and change behavior that is inconsistent with our principles and commitment to diversity, equity, and inclusion. If students encounter such behavior in a course, they are encouraged to speak with the instructor of record and/or the Office of Institutional Equity and Equal Opportunity. Students may also contact a faculty member within the department, program director, the director of undergraduate or graduate studies, the department chair, any college administrator, or the dean. All of these individuals are mandatory reporters under University policies."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the website for Lin511, Computational Linguistics, taught at the University of Kentucky Spring 2024\n\nAttribution\n\nThe robot emoji in the course logo is modified from Open Emoji (link), licenced CC-BY-SA 4.0. Edited version here(svg).\n\n\n\n\n\nReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {About},\n  url = {https://lin511-2024.github.io/about.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. “About.” https://lin511-2024.github.io/about.html."
  },
  {
    "objectID": "syllabus/schedule.html",
    "href": "syllabus/schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Week 1\n\n\n\nDates:\n\nJan 8-12\n\n\n\n\nTopics:\n\nSetup, What is Computational Linguistics?\n\n\n\n\n\nReadings\nFollow posted tutorials for setting up our course technology.\n\n\n\n\nWeek 2-3\n\n\n\nDates:\n\nJan 15-26\n\n\n\n\nTopics:\n\nFiles, Text, Strings, Regular Expressions, Finite State Automata\n\n\n\n\nNo Office Hours for MLK Jr Day.\n\nReadings:\n\nCourse Notes: What is Python\nSLP Chapter 2, section 2.1 (pdf)\nTP Chapter 1\n\n\n\n\n\nWeek 4-5\n\n\n\nDates:\n\nJan 29-Feb 09\n\n\n\n\nTopics:\n\nText Normalization, Tokenization, Python Variables, Python Functions\n\n\n\n\n\nReadings\n\nSLP Chapter 2, sections 2.2, 2.3, 2.4\nTP, Chapter 2\nTP Chapter 3\nNLTK Book, Chapter 3\n\n\n\n\n\nWeek 6-7\n\n\n\nDates:\n\nFeb 12 - 23\n\n\n\n\nTopics:\n\nn-grams, Corpora, Document Classification, Python Loops and Conditionals\n\n\n\n\n\nReadings\n\nSLP Chapters 3, 4, 5\n[TP, Chapter 10, Lists]\n[TP, Chapter 7, Iteration]\n[TP, Chapter 5, Conditionals]\n\n\n\n\n\nWeek 8-9\n\n\n\nDates:\n\nFeb 26 - Mar 08\n\n\n\n\nTopics:\n\nHidden Markov Models\n\n\n\n\n\nReadings\n\nSLP Appendix A: Hidden Markov Models\n\n\n\nSpring Break\n\n\n\n\n\nWeek 10\n\n\n\nDates:\n\nMar 18-22\n\n\n\n\nTopics:\n\nMore\n\n\n\n\n\n\nWeek 11\n\n\n\nDates:\n\nMar 25-29\n\n\n\n\nTopics:\n\nMore\n\n\n\n\n\n\nWeek 12\n\n\n\nDates:\n\nApr 01-05\n\n\n\n\nTopics:\n\nMore\n\n\n\n\n\n\nWeek 13\n\n\n\nDates:\n\nApr 08-12\n\n\n\n\nTopics:\n\nMore\n\n\n\n\n\n\nWeek 14\n\n\n\nDates:\n\nApr 15-19\n\n\n\n\nTopics:\n\nMore\n\n\n\n\n\n\nWeek 15\n\n\n\nDates:\n\nApr 22-26\n\n\n\n\nTopics:\n\nMore\n\n\n\n\n\n\n\n\nReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Course {Schedule}},\n  url = {https://lin511-2024.github.io/syllabus/schedule.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. “Course Schedule.” https://lin511-2024.github.io/syllabus/schedule.html."
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html",
    "href": "notes/concepts/03_navigating-directories.html",
    "title": "Navigating Directories",
    "section": "",
    "text": "Some of what we’ll be doing in class will involve interacting with your computer through a “Command Line Interface.” Command line interacts are purely text based way to interact with your computer. It’s your same exact computer, just a different way of using it without using icons, or clicking. \n\n\nIn macOS, we can access a command line interface using the program Terminal. You can find Terminal in your Applications inside the folder called Utilities, or just by typing in “Terminal” into Spotlight search.\n\n\n\nFor now, on Windows, I’d recommend using PowerShell. You can launch PowerShell by searching for it in the Start menu."
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#command-line-interface",
    "href": "notes/concepts/03_navigating-directories.html#command-line-interface",
    "title": "Navigating Directories",
    "section": "",
    "text": "Some of what we’ll be doing in class will involve interacting with your computer through a “Command Line Interface.” Command line interacts are purely text based way to interact with your computer. It’s your same exact computer, just a different way of using it without using icons, or clicking. \n\n\nIn macOS, we can access a command line interface using the program Terminal. You can find Terminal in your Applications inside the folder called Utilities, or just by typing in “Terminal” into Spotlight search.\n\n\n\nFor now, on Windows, I’d recommend using PowerShell. You can launch PowerShell by searching for it in the Start menu."
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#getting-your-bearings",
    "href": "notes/concepts/03_navigating-directories.html#getting-your-bearings",
    "title": "Navigating Directories",
    "section": "Getting your Bearings",
    "text": "Getting your Bearings\nWhen you first launch your command line interface, it will look something like this:\n\n\n\nCommand Line Interface\n\n\nThis is obviously scary looking, and it doesn’t give you much hint as to what to do next. The important to thing to keep in mind is that while you are using the command line interface you are inside of a folder. There are two commands I recommend using over and over again to figure out where you are, and where you can go.\n\n“The Prompt”\nWe call the the space waiting for us to type in something the “prompt”. It usually has a symbol before it. Depending on your system, it might be any of the following: $, %, or &gt;. If you type something in here, your computer will interpret it as a command, and try to run it. \n\n\npwd\nIf you type in pwd into the terminal and hit enter, it will print out the absolute path to where you currently are. When you first launch a terminal, it usually starts you off in your home directory, which is usually going to be named after your username.\n\nbash\n\npwd\n/Users/Display\nUse pwd early, and use it often. It stands for present working directory. \n\n\nls\nIf you type in ls into the terminal and hit enter, it will print out a list of all of the directories and files inside the folder you are currently in. Here’s how it prints out on my own computer when I first launch Terminal:\n\nbash\n\nls\nDesktop      Library    Pictures\nDocuments    Movies     Public\nDownloads    Music      Sites  \nEach of the items listed here is another directory inside of my current directory. I can look inside and get a list of all the files inside of these directories by typing in ls and the name of the directory I want to see inside of. For example, if I wanted to get a list of all of the files on my desktop, this is what I would type:\n\nbash\n\nls Desktop\nSampletext.txt\nI only have one file on my desktop right now, and it’s a document called Sampletext.txt. \n\n\nKnow your surroundings\nReally skilled and accomplished programmers use the commands pwd and ls constantly, and so should you! It’s the only way to keep track of your surroundings on the command line. \nIf you ever are looking at a terminal, and don’t know what to do next, just type in pwd and ls. \nEvery time you do a new thing in the terminal, type in type in pwd and ls afterwards.\nJust type in pwd and ls all the time. :::"
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#getting-around",
    "href": "notes/concepts/03_navigating-directories.html#getting-around",
    "title": "Navigating Directories",
    "section": "Getting around",
    "text": "Getting around\nYou’re not always going to want to hang around in your home directory the whole time. You may want to get to a specific directory where some code or a script is to run it. To do this, we use the cd command, which stands for change directory.\n\ncd : Moving down 1 level\nTo change the folder you’re in, you just need to type in cd and then the name of the folder. For example to move from my home directory into my Documents folder, it would look like this:\n\nbash\n\nls\nDesktop     Library   Pictures\nDocuments   Movies    Public\nDownloads   Music     Sites\n\nbash\n\ncd Documents\nls\nFranklinInstituteSamples.pptx   Zoom\nFranklinInstituteSounds         html_practice\n\nbash\n\npwd\n/Users/Display/Documents\n\nFirst, I double checked which directories were in the folder I was currently in with ls.\nSecond, I moved into the Documents directory with cd Documents.\nThird, I checked what files and directories were in my new location with ls.\nFourth, I double checked my current location with pwd, which gave my the absolute path to where I was.\n\n\n\ncd : Moving up 1 level\nIf after moving into my documents folder, I wanted to move back to my home directory, that would involve moving up one level, because my Documents folder is inside of my home directory. We can do this using cd again, but instead of the name of a directory, we follow it with ... The two dots, .., is a short hand for “one level up from where I am.” Here’s how that works out on my system.\n\nbash\n\npwd\n/Users/Display/Documents\n\nbash\n\ncd ..\npwd\n/Users/Display\n\nFirst, I double checked where I was with pwd.\nSecond, I moved up one level with cd ..\nThird, I double checked where I would up with pwd again, confirming that I was now in my home directory again.\n\n\n\ncd : Moving down multiple levels\nYou don’t have to move down just one level at a time. For example, right now we’re in my home directory, but inside of my documents there’s a directory called html_practice. That’s two levels down. To get into html_practice, I just need to enter cd followed by the relative path to it. Remember, the relative path is the sequence of directory names that lie between where we are and where we want to go. Here’s how that looks on my system.\n\nbash\n\npwd\n/Users/Display\n\nbash\n\ncd Documents/html_practice\npwd\n/Users/Display/Documents/html_practice\n\nbash\n\nls\nsite.html  style.css\n\nFirst, I double checked my location with pwd\nSecond, I moved down two levels through Documents into html_practice with cd.\nThird, I double checked where I had moved to with pwd.\nLastly, I checked what files were in my new directory with ls.\n\n\n\nMoving up and over\nNow, we’re inside html_practice which is inside Documents. But what if we wanted to move into another directory that is also inside of Documents. For example, the directory Zoom is also inside of Documents, which is where Zoom saves all of the chat logs from our class meetings.\n\n\n\nWhere we want to move\n\n\nWe could do this in a two step process, using cd .. to move up one level, then cd Zoom to move into the zoom directory. But we can also combine the two into one step.\n\nbash\n\npwd\n/Users/Display/Documents/html_practice\n\nbash\n\ncd ../Zoom\npwd\n/Users/Display/Documents/Zoom\n\nFirst, I double checked where I was with pwd.\nThen, I moved up into Documents and down into Zoom in one go with cd ../Zoom\nFinally, I double checked where I wound up with pwd."
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#very-useful-tips",
    "href": "notes/concepts/03_navigating-directories.html#very-useful-tips",
    "title": "Navigating Directories",
    "section": "Very useful tips!",
    "text": "Very useful tips!\nThere are a few tips, tricks, and shortcuts that can make using the command line a little bit easier.\n\nTab autocomplete\nWhen using a command line interface, “tab autocomplete” is a crucial tool to help you get around. For example, if you are in your home directory and you want to move into your documents directory, all you really need to type is cd Doc and the terminal should autocomplete the rest of the file name! \nIf you have multiple directories that start with Doc, it will list all of them, and then you’ll only need to type in a few more characters before it will be able to autocomplete. \nTab autocomplete works for ls as well, which can let you explore through directories without needing to move around.\n\n\nGet back home!\nTechnically, your home directory is a directory with a long absolute path. But because it’s a directory you’ll probably want to keep getting back to often, there’s a shortcut built in. If you run cd ~, it will zip you back to your home directory from wherever you are.\n\n\nAbsolute paths\nIf, for some reason, you don’t know what the relative path is to a directory you want to get to from where you are (or maybe it’s very complicated), you can always run cd followed by the absolute path to where you want to go."
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#this-is-all-going-to-matter-a-lot",
    "href": "notes/concepts/03_navigating-directories.html#this-is-all-going-to-matter-a-lot",
    "title": "Navigating Directories",
    "section": "This is all going to matter a lot",
    "text": "This is all going to matter a lot\nUsing the command line and navigating your computer is going to come up a lot more in this course. You should try as much as you can to get a handle on how this all works now."
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html",
    "href": "notes/concepts/01_what-is-python.html",
    "title": "What is Python?",
    "section": "",
    "text": "When talking about “Python” or other programming langauges, we often engage in a form of polysemy1 that can be confusing at first. I’ll try to unpack the different meanings here."
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-set-of-rules-for-a-formal-language",
    "href": "notes/concepts/01_what-is-python.html#python-is-set-of-rules-for-a-formal-language",
    "title": "What is Python?",
    "section": "📕 Python is set of rules for a formal language",
    "text": "📕 Python is set of rules for a formal language\nWhen we talk about “Python”, one thing we sometimes refer to is an abstract set of rules for a formal language.\n\n\n\n\n\n\n📕 The abstract language\n\n\n\nWhen you say:\n\nI’m learning Python this semester.\n\nYou’re talking about the abstract set of rules.\n\n\nWe can describe some of these rules in natural language (this isn’t how they’re actually written).\n\nIf a list of values has been assigned to a variable, when the variable’s name is followed [0], return the first value in the list.\nIf print( is followed by a value or variable, which is then followed by ), print the value, or the value assigned to the variable.\nIf a # symbol is encountered on a line, ignore everything following it.\n\nThese rules define very precisely how code should be written, and also define what should be done when certain patterns of code are encountered, but these rules are abstract, and don’t actually do anything."
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-a-program-that-interprets-formal-language-input",
    "href": "notes/concepts/01_what-is-python.html#python-is-a-program-that-interprets-formal-language-input",
    "title": "What is Python?",
    "section": "🤖 Python is a program that interprets formal language input",
    "text": "🤖 Python is a program that interprets formal language input\nSimply having a set of abstract rules can be fun, but it’s not so useful if you have no way to actually do things. To make code we write actually do anything, we need to use a program called an Interpreter.\n\n\n\n\n\n\n🤖 The Python Interpreter\n\n\n\nWhen you say\n\nI’m having a hard time installing Python.\n\nyou’re talking about a Python Interpreter.\n\n\nThe Python interpreter processes code, determines whether or not it is valid, then does the things the code told it to do.\nCode can get passed to the interpreter many different ways, including\n\nIn a single text file, called a python “script”, (usually named to end in .py)\nIn an interactive python “shell”.\nInside a Jupyter notebook.\n\nFor example, the text in the shaded block below was passed to a Python interpreter, and the interpreter decided that it was invalid (because there is an opening quote \", but not a closing quote).\n\n\npython\n\n\"x\n\nSyntaxError: unterminated string literal (detected at line 1) (20073044.py, line 1)\n\n\nThe text in this next shaded block was passed to a Python interpreter. This time, it was deemed valid, and the interpreter did what the code instructed.\n\n\npython\n\nprint(\"hello! \" * 3)\n\nhello! hello! hello!"
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-an-ecosystem",
    "href": "notes/concepts/01_what-is-python.html#python-is-an-ecosystem",
    "title": "What is Python?",
    "section": "⛰️ Python is an Ecosystem",
    "text": "⛰️ Python is an Ecosystem\nPeople often say that Python comes “with batteries included”, meaning it can do a lot of different things out without needing to install any extensions. But you can install extensions in the form of additional libraries that extend Python’s capabilities.\n\n\n\n\n\n\n⛰️ The Ecosystem\n\n\n\nWhen someone says\n\nPython is the most widely used language in natural language processing.\n\nThey are talking about the ecosystem of libraries for Python hat have been built to do natural language processing.\n\n\nSome examples of additional libraries for Python are\n\nnumpy: Allows for effective computation with numbers\nmatplotlib: Makes graphs\n\n\n\npython\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 200)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nplt.show()"
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-a-social-project",
    "href": "notes/concepts/01_what-is-python.html#python-is-a-social-project",
    "title": "What is Python?",
    "section": "🧑‍💻 Python is a social project",
    "text": "🧑‍💻 Python is a social project\nThe meanings of “Python” we’ve already talked about are\n\n📕 The abstract language\n🤖 The Python Interpreter\n⛰️ The Python Ecosystem\n\nUnderstanding how to put all of these pieces together effectively is a social project.\n\n\n\n\n\n\n🧑‍💻 The social project\n\n\n\nWhen you say\n\nSo-n-so is really good at Python.\n\nYou are talking about their involvement in the Python social project.\n\n\n\n❌ There is no part of the 📕 abstract language that will inform you that there is a very good Python library for doing a certain task.\n❌ The 🤖 Python Interpreter won’t tell you that there’s a better way to do what you’re trying to do.\n❌ There are nearly half a million libraries on ⛰️ the Python Package Index, so you can’t just peruse it to find what’s relevant.\n\nIn order to know newest or most effective way to do things, you need to be involved in 🧑‍💻 the social project. That begins within a classroom, then extends to keeping up with blogs and other discourses about changes and developments.\nOne way people demonstrate that they are involved in the Python social project is by writing their code idiomatically. For example, in the code block above, I included the line import numpy as np. But there’s no rule that we import numpy as np, it’s simply convention.\nThis code below will run just as well, but would cause problems for people trying to read your code, because it’s not idiomatic.\n\n\npython\n\nimport matplotlib.pyplot as jokes\nimport numpy as farts\n\nx = farts.linspace(0, 2 * farts.pi, 200)\ny = farts.sin(x)\n\nfig, ax = jokes.subplots()\nax.plot(x, y)\njokes.show()"
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#the-polysemy-is-ok",
    "href": "notes/concepts/01_what-is-python.html#the-polysemy-is-ok",
    "title": "What is Python?",
    "section": "📕, 🤖, ⛰️, 🧑‍💻 The Polysemy is Ok",
    "text": "📕, 🤖, ⛰️, 🧑‍💻 The Polysemy is Ok\nIt’s ok just say “Python” when you’re talking about one specific meaning."
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#footnotes",
    "href": "notes/concepts/01_what-is-python.html#footnotes",
    "title": "What is Python?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA word is polysemous when it has more than one meaning.↩︎"
  },
  {
    "objectID": "notes/concepts/00_glossary.html",
    "href": "notes/concepts/00_glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Copy-Paste\n\nCopying text to your computer’s ‘clipboard’ and pasting it into another location.\nCopying can be done many ways, including selecting text with your mouse, right-clicking then selecting ‘copy’, by selecting text and using your computer’s ‘hotkey’ for copying (), or, in the course documents, by clicking on the ‘copy’ icon in most code chunks.\nTo paste, you can either right-click and select ‘Paste’, or use your system’s ‘hotkey’ ().\n\nFind, or \n\nYou can find text in most pages or documents by either typing , then typing in the text you want to find in the dialogue box that pops up.\n\nTab Autocomplete\n\nMany programming applications have “Tab Autocomplete” suggestions that allow you to type in just a few letters of the command, function, or variable you want to use, and then hit Tab.\n\n\n\nReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Glossary},\n  url = {https://lin511-2024.github.io/notes/concepts/00_glossary.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. “Glossary.” https://lin511-2024.github.io/notes/concepts/00_glossary.html."
  },
  {
    "objectID": "notes/meetings/00_setup.html",
    "href": "notes/meetings/00_setup.html",
    "title": "Setup Notes",
    "section": "",
    "text": "We’ll need to get our systems setup to work properly with the tools we’ll be using this semester.\n\n\n\n\n\n\nIf you ware using a windows computer, I’ll ask you to install Windows Subsystem for Linux like so:\n\nFollow the tutorial here for enabling and installing WSL\nInstall VS Code\nWork through the first section of this tutorial, stopping after you connect to WSL\n\n\n\n\n\n\n\n\nInstall VS Code\n\n\n\n\n\n\n\n\n\nWe’ll be using a program called pyenv to manage the versions of python we use. To install pyenv, open the VSCode Command Palette (with ) which will open the command line interface. Then,\n\ncopy this line of code code from this page ()\n\n\nbash\n\ncurl https://pyenv.run | bash\n\nPaste it into the terminal (()\nHit enter.\n\nOnce that has successfully finished:\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.zshrc\n\n\nIf you get an error.\n\n\nRun this\n\n\nbash\n\ntouch ~/.zshrc\nopen ~/.zshrc\n\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.bashrc\n\n\nIf you get an error\n\n\nRun ths\n\n\nbash\n\ntouch ~/.bashrc\nopen ~/.bashrc\n\n\n\n\n\n\nPaste the following into the window that opens.\n\n\nsh\n\nexport PYENV_ROOT=\"$HOME/.pyenv\"\n[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n\nSave it\n\n\n\n\nClose and reopen the terminal window\nCopy-Paste the following lines of code\n\n\nbash\n\npyenv install 3.11\npyenv global 3.11\npyenv virtualenv 3.11 Lin511\npyenv activate Lin511\nThis will have installed a recent version of python onto your computer, and created a “virtual environment” for the class.\n\n\n\n\n\n\n\nMake sure you change the email and name to the email and username you use for Github!\n\nIn the terminal, set your git email address:\n\n\nbash\n\ngit config --global user.email \"you@example.com\"\n\nSet your username.\n\n\nbash\n\ngit config --global user.name \"Your Name\"\nThen, follow these tutorials from github:\n\nGenerating a new SSH Key\nAdding your ssh key to github"
  },
  {
    "objectID": "notes/meetings/00_setup.html#setup",
    "href": "notes/meetings/00_setup.html#setup",
    "title": "Setup Notes",
    "section": "",
    "text": "We’ll need to get our systems setup to work properly with the tools we’ll be using this semester.\n\n\n\n\n\n\nIf you ware using a windows computer, I’ll ask you to install Windows Subsystem for Linux like so:\n\nFollow the tutorial here for enabling and installing WSL\nInstall VS Code\nWork through the first section of this tutorial, stopping after you connect to WSL\n\n\n\n\n\n\n\n\nInstall VS Code\n\n\n\n\n\n\n\n\n\nWe’ll be using a program called pyenv to manage the versions of python we use. To install pyenv, open the VSCode Command Palette (with ) which will open the command line interface. Then,\n\ncopy this line of code code from this page ()\n\n\nbash\n\ncurl https://pyenv.run | bash\n\nPaste it into the terminal (()\nHit enter.\n\nOnce that has successfully finished:\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.zshrc\n\n\nIf you get an error.\n\n\nRun this\n\n\nbash\n\ntouch ~/.zshrc\nopen ~/.zshrc\n\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.bashrc\n\n\nIf you get an error\n\n\nRun ths\n\n\nbash\n\ntouch ~/.bashrc\nopen ~/.bashrc\n\n\n\n\n\n\nPaste the following into the window that opens.\n\n\nsh\n\nexport PYENV_ROOT=\"$HOME/.pyenv\"\n[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n\nSave it\n\n\n\n\nClose and reopen the terminal window\nCopy-Paste the following lines of code\n\n\nbash\n\npyenv install 3.11\npyenv global 3.11\npyenv virtualenv 3.11 Lin511\npyenv activate Lin511\nThis will have installed a recent version of python onto your computer, and created a “virtual environment” for the class.\n\n\n\n\n\n\n\nMake sure you change the email and name to the email and username you use for Github!\n\nIn the terminal, set your git email address:\n\n\nbash\n\ngit config --global user.email \"you@example.com\"\n\nSet your username.\n\n\nbash\n\ngit config --global user.name \"Your Name\"\nThen, follow these tutorials from github:\n\nGenerating a new SSH Key\nAdding your ssh key to github"
  },
  {
    "objectID": "notes/index.html",
    "href": "notes/index.html",
    "title": "Meeting Notes",
    "section": "",
    "text": "These are the notes for our regular meetings.\n\n\n\n\n\n\n\n\n  \n\n\n\n\nPaths in Python\n\n\n\n\n\n\n\n\n\n\n\n\nJosef Fruehwald\n\n\n\n\n\n\n  \n\n\n\n\nPython basics\n\n\n\n\n\n\n\n\n\n\n\n\nJosef Fruehwald\n\n\n\n\n\n\n  \n\n\n\n\nSetup Notes\n\n\n\n\n\n\n\n\n\n\n\n\nJan 8, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\nNo matching items\n\nReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Meeting {Notes}},\n  url = {https://lin511-2024.github.io/notes},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. “Meeting Notes.” https://lin511-2024.github.io/notes."
  }
]