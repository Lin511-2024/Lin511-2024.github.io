[
  {
    "objectID": "notes/meetings/01-1_fsm_addenda.html",
    "href": "notes/meetings/01-1_fsm_addenda.html",
    "title": "FSA in-class notes",
    "section": "",
    "text": "ok(a+y)?\n\n\n\n\n\nstateDiagram\n    direction LR\n    [*] --&gt; 1\n    1 --&gt; 2: o\n    2 --&gt; 3: k\n\n    3 --&gt; group1\n\n    state group1{\n        [*] --&gt; 4\n        4 --&gt; 4: a\n        4 --&gt; [*]: y\n    }\n    group1 --&gt; [*]: Œµ\n\n    3 --&gt; [*]: Œµ",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "FSA in-class notes"
    ]
  },
  {
    "objectID": "notes/meetings/01-1_fsm_addenda.html#finite-state-automata-and-regex",
    "href": "notes/meetings/01-1_fsm_addenda.html#finite-state-automata-and-regex",
    "title": "FSA in-class notes",
    "section": "",
    "text": "ok(a+y)?\n\n\n\n\n\nstateDiagram\n    direction LR\n    [*] --&gt; 1\n    1 --&gt; 2: o\n    2 --&gt; 3: k\n\n    3 --&gt; group1\n\n    state group1{\n        [*] --&gt; 4\n        4 --&gt; 4: a\n        4 --&gt; [*]: y\n    }\n    group1 --&gt; [*]: Œµ\n\n    3 --&gt; [*]: Œµ",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "FSA in-class notes"
    ]
  },
  {
    "objectID": "notes/meetings/01-1_fsm_addenda.html#the-regex-for-batman",
    "href": "notes/meetings/01-1_fsm_addenda.html#the-regex-for-batman",
    "title": "FSA in-class notes",
    "section": "The RegEx for Batman",
    "text": "The RegEx for Batman\n\nregex\n\nNa (na){15} Batman!( Batman! Batman!)?",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "FSA in-class notes"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html",
    "href": "notes/meetings/01_fsm.html",
    "title": "Regular Languages and Finite State Machines",
    "section": "",
    "text": "In another class, we might just jump straight into learning about ‚ÄúRegular Expressions‚Äù, which are very useful tools for searching for patterns in text.\nBut since this is Computational Linguistics, we should probably learn about what is ‚Äúregular‚Äù about ‚Äúregular‚Äù expressions, because it‚Äôs related to formal language theory!",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#where-were-going",
    "href": "notes/meetings/01_fsm.html#where-were-going",
    "title": "Regular Languages and Finite State Machines",
    "section": "",
    "text": "In another class, we might just jump straight into learning about ‚ÄúRegular Expressions‚Äù, which are very useful tools for searching for patterns in text.\nBut since this is Computational Linguistics, we should probably learn about what is ‚Äúregular‚Äù about ‚Äúregular‚Äù expressions, because it‚Äôs related to formal language theory!",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#formal-language-theory-and-abstract-machines",
    "href": "notes/meetings/01_fsm.html#formal-language-theory-and-abstract-machines",
    "title": "Regular Languages and Finite State Machines",
    "section": "‚ÄúFormal Language Theory‚Äù and ‚ÄúAbstract Machines‚Äù",
    "text": "‚ÄúFormal Language Theory‚Äù and ‚ÄúAbstract Machines‚Äù\n\nFormal Languages are systems of rules (i.e.¬†a formal ‚Äúgrammar‚Äù) for combining a set of strictly defined symbols.\n\n\n\n\n\n\n\nA small formal language\n\n\n\n\n\\(\\mathcal{L}\\) is the language, which is a set that contains all, and only, the possible strings of \\(\\mathcal{L}\\).\n\\(\\Sigma\\) is the vocabulary of \\(\\mathcal{L}\\).\n\n\\(\\Sigma = \\{a,b\\}\\)\n\n\\(\\mathcal{N}\\) Are the ‚Äúnon-terminal nodes‚Äù of \\(\\mathcal{L}\\), of which we have 3.\n\n\\(\\mathcal{N} = \\{S, A, B\\}\\)\n\n\\(\\mathcal{G}\\) is the grammar of \\(\\mathcal{L}\\). It contains 4 rules\n\n\\(S \\rightarrow aA\\)\n\\(A \\rightarrow aB\\)\n\\(A \\rightarrow aA\\)\n\\(B \\rightarrow b\\)\n\n\nWith the sets \\(\\mathcal{N}\\), \\(\\mathcal{\\Sigma}\\), and \\(\\mathcal{G}\\), can we figure out which strings are, or are not in \\(\\mathcal{L}\\)?\n\n\\(ab\\)?\n\\(aab\\)?\n\\(b\\)?\n\\(aabb\\)?\n\\(abba\\)?\n\\(cab\\)?\n\n\n\n\n‚ÄúAutomata‚Äù and other abstract machines are ways of conceptualizing the possible or necessary computational operations and resources needed for different tasks, like identifying whether or not a string is in a language!\n\nWe‚Äôll start with the least complex1 machines, ‚ÄúFinite State Automata‚Äù",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#finite-state-automata",
    "href": "notes/meetings/01_fsm.html#finite-state-automata",
    "title": "Regular Languages and Finite State Machines",
    "section": "Finite State Automata",
    "text": "Finite State Automata\n\nFinite\n\nHaving a fixed, or non infinite amount of things\n\nState\n\nThe current state, or status, of a system.\n\nAutomaton\n\nA machine\n\n\nFSAs have\n\na fixed number of states\na fixed number of inputs they can accept\nrules about how to change their state given an input.\n\n\nExamples\n\nA light switch.\n\n\n\n\n\nstateDiagram\n  direction LR\n  state \"Off\" as off\n  state \"On üí°\" as on\n  \n  [*] --&gt; off\n  on --&gt; off: switch flip\n  off --&gt; on: switch flip\n\n\n\n\n\n\n\nStates\n\nOn, Off\n\nInputs\n\nswitch flip\n\n\n\n\nA metro turnstile\n\n\n\n\n\nstateDiagram\n  direction LR\n  state \"Locked\" as l\n  state \"Unlocked\" as u\n  \n  [*] --&gt; l\n  l --&gt; l: push\n  l --&gt; u: coin\n  u --&gt; u: coin\n  u --&gt; l: push\n\n\n\n\n\n\n\nstates\n\nLocked, Unlocked\n\ninputs\n\ncoin, push\n\n\n\n\nA Github Repo!\n\n\n\n\n\nstateDiagram\n  state \"Local Synced with Remote\" as s\n  state \"Unstaged Changes\" as us\n  state \"All changes staged\" as st\n  state \"No uncommitted changes\" as com\n  [*] --&gt; s\n  s --&gt; us: Editing & Saving\n  us --&gt; us: Editing & Saving\n  us --&gt; st: Staging all changes\n  st --&gt; us: Editing & Saving\n  st --&gt; com: Committing\n  com --&gt; us: Editing & Saving\n  com --&gt; s: Push\n\n\n\n\n\n\n\nstates\n\nLocal Synced with Remote, Unstaged Changes, All Changes Staged, No Uncommitted Changes\n\ninputs\n\nEditing & Saving, Staging all Changes, Committing, Push\n\n\n\n\nThe Batman Theme Song\n\n\n\n\n\n\nBatman!\n\n\n\n\n\nNa na na na na na na na na na na na\nBatman!\nNa na na na na na na na na na na na\nBatman!\nNa na na na na na na na na na na na\nBatman!\nNa na na na na na na na na na na na\nBatman!\nNa na na na na na na na na na na na\nBatman! Batman! Batman!\nNa na na na na na na na na na na na\nBatman!\n\n\n\n\n\n\n\n\nstateDiagram\n  direction LR\n  [*] --&gt; a: Na\n  a --&gt; b: na\n  b --&gt; c: na\n  c --&gt; d: na\n  d --&gt; e: na\n  e --&gt; f: na\n  f --&gt; g: na\n  g --&gt; h: na\n  h --&gt; i: na\n  i --&gt; j: na\n  j --&gt; k: na\n  k --&gt; l: na\n  l --&gt; batman1: Batman!\n  batman1 --&gt; a: Na\n  batman1 --&gt; batman2: Batman!\n  batman2 --&gt; batman3: Batman!\n  batman3 --&gt; a: Na\n  batman1 --&gt; [*]: Œµ\n\n\n\n\n\n\n\nStates\n\na-l, batman1, batman2, batman3\n\nInputs\n\nNa, na, Batman!",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#automata-and-formal-grammars",
    "href": "notes/meetings/01_fsm.html#automata-and-formal-grammars",
    "title": "Regular Languages and Finite State Machines",
    "section": "Automata and Formal Grammars",
    "text": "Automata and Formal Grammars\nIf you have\n\nsome formal Grammar \\(\\mathcal{G}\\)\n\nthat you use to generate\n\nthe strings of language \\(\\mathcal{L}\\)\n\nThere is some Automaton (maybe not a finite state automaton!) that can decide whether nor not a string is in \\(\\mathcal{L}\\) or not.\nThis relationship between automata of various complexity and formal grammars/languages is called the ‚ÄúChomsky Hierarchy.‚Äù",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#returning-to-our-small-formal-language",
    "href": "notes/meetings/01_fsm.html#returning-to-our-small-formal-language",
    "title": "Regular Languages and Finite State Machines",
    "section": "Returning to our small formal language",
    "text": "Returning to our small formal language\nHere‚Äôs the grammar rules we had for our grammar\n\n\\(\\mathcal{G}\\) is the grammar of \\(\\mathcal{L}\\). It contains 4 rules\n\n\\(S \\rightarrow aA\\)\n\\(A \\rightarrow aB\\)\n\\(A \\rightarrow aA\\)\n\\(B \\rightarrow b\\)\n\n\n\nUsing the grammar to generate a string\nWe can build up a string by choosing rules and applying them\n\n\nStart\n\n\n\n\n\n\nflowchart TD\n  S\n\n\n\n\n\n\n\n\n\n\n\n\n\\(S\\rightarrow aA\\)\n\n\n\n\n\n\n\nflowchart TD\n  S --&gt; a1[\"a\"]\n  S --&gt; A1[\"A\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\\(A \\rightarrow aA\\)\n\n\n\n\n\n\n\nflowchart TD\n  S --&gt; a1[\"a\"]\n  S --&gt; A1[\"A\"]\n  A1 --&gt; a2[\"a\"]\n  A1 --&gt; A3[\"A\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\\(A \\rightarrow aB\\)\n\n\n\n\n\n\n\nflowchart TD\n  S --&gt; a1[\"a\"]\n  S --&gt; A1[\"A\"]\n  A1 --&gt; a2[\"a\"]\n  A1 --&gt; A2[\"A\"]\n  A2 --&gt; a3[\"a\"]\n  A2 --&gt; B\n\n\n\n\n\n\n\n\n\n\n\n\n\\(B \\rightarrow b\\)\n\n\n\n\n\n\n\nflowchart TD\n  S --&gt; a1[\"a\"]\n  S --&gt; A1[\"A\"]\n  A1 --&gt; a2[\"a\"]\n  A1 --&gt; A2[\"A\"]\n  A2 --&gt; a3[\"a\"]\n  A2 --&gt; B\n  B --&gt; b\n\n\n\n\n\n\n\n\n\nResult: \\(aaab\\)\n\n\nDefining a FSA to recognize the language\n\n\n\n\n\nstateDiagram\n  direction LR\n  \n  [*]--&gt;p\n  p --&gt; q: a\n  q --&gt; q: a\n  q --&gt; [*]: b\n  \n\n\n\n\n\n\n\nIf we take strings, generated by \\(\\mathcal{G}\\) and feed them to this FSA one-by-one, we should arrive at the ‚Äúaccepting‚Äù state without any symbols left over.\nIf we take a string, generated by some unknown grammar, pass it through this FSA, and arrive at the ‚Äúaccepting‚Äù state without any symbols left over, then it could have been generated by \\(\\mathcal{G}\\).\nIf we take a string, and pass it through this FSA, and either never get to the accepting state, or have symbols left over, then it couldn‚Äôt have been generated by \\(\\mathcal{G}\\), and isn‚Äôt in \\(\\mathcal{L}\\).",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#what-does-this-have-to-do-with-regular-expressions",
    "href": "notes/meetings/01_fsm.html#what-does-this-have-to-do-with-regular-expressions",
    "title": "Regular Languages and Finite State Machines",
    "section": "What does this have to do with ‚ÄúRegular Expressions?‚Äù",
    "text": "What does this have to do with ‚ÄúRegular Expressions?‚Äù\n‚ÄúRegular Expressions‚Äù are a concise, computery way to define finite state automata that take text as input strings and return matches. That is, regular expressions can identify strings that belong to ‚Äúregular‚Äù languages.\nWe‚Äôll talk about details later, but if I wasn‚Äôt sure of someone was using British spelling or American spelling, I could write a RegEx to match either color or colour.\n\n\ncolou?r\n\n\n\n\n\n\nstateDiagram\n  direction LR\n  [*] --&gt; 1\n  1 --&gt; 2: c\n  2 --&gt; 3: o\n  3 --&gt; 4: l\n  4 --&gt; 5: o\n  5 --&gt; 6: u\n  5 --&gt; [*]: r\n  6 --&gt; [*]: r\n\n\n\n\n\n\n\n\n\nLimitations of RegEx\nBecause Regular Expressions define a finite state automaton, and FSAs can only successfully recognize regular languages, that means you can‚Äôt use Regular Expressions (reliably) to recognize any more complex language.\nFor example, HTML pages use ‚Äútags‚Äù to define where text elements begin and end. In this code snippet, the opening &lt;p&gt; tag says a paragraph is beginning, and the closing &lt;/p&gt; says the paragraph is ending. The opening &lt;strong&gt; tag says the text is turning bold, and the closing &lt;/strong&gt; tag says the text is turning regular again.\n\nhtml\n\n&lt;p&gt;\n  This is a paragraph with \n  &lt;strong&gt;\n    bold text\n  &lt;/strong&gt;\n  .\n&lt;/p&gt;\n\nFor an html page to be valid, every opening tag, &lt;tag&gt; needs to have a matching closing tag &lt;/tag&gt;.\nYou can‚Äôt have a closing tag &lt;/tag&gt; without a preceding opening &lt;tag&gt;.\nYou you can embed another opening and closing tag set within another opening and closing tag set.\nThis kind of long distance ‚Äúbracket matching‚Äù, where you can have intervening brackets, requires at least a push-down automaton to recognize.\nThat means html is a context-sensitive language.\nYou cannot use RegEx to successfully validate html.",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#some-further-reading",
    "href": "notes/meetings/01_fsm.html#some-further-reading",
    "title": "Regular Languages and Finite State Machines",
    "section": "Some further reading",
    "text": "Some further reading\nJ√§ger and Rogers (2012)",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/01_fsm.html#footnotes",
    "href": "notes/meetings/01_fsm.html#footnotes",
    "title": "Regular Languages and Finite State Machines",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nComplex in the sense of what they can do, not necessarily how easy it is to understand them.‚Ü©Ô∏é",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Regular Languages and Finite State Machines"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html",
    "href": "notes/meetings/04_ngrams.html",
    "title": "ngrams",
    "section": "",
    "text": "So, in our notes on finite state automata and push-down automata we concluded that since natural language has bracket matching patterns, and maybe even crossing dependencies, that it‚Äôs more complex than a ‚Äúregular‚Äù language, and can‚Äôt really be parsed with a finite state automaton.\nngram language modelling asks the question: But what if we tried really hard?",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html#states-and-words",
    "href": "notes/meetings/04_ngrams.html#states-and-words",
    "title": "ngrams",
    "section": "States and Words",
    "text": "States and Words\n\n\n\n\n\n\n\n\n\n\n\n\nThe first sentence of Moby Dick is, famously,\n\nCall me Ishmael.\n\nWe could try representing this as a finite state automaton like so:\n\n\n\n\n\nstateDiagram\n    direction LR\n\n    [*] --&gt; call: call\n    call --&gt; me: me\n    me --&gt; ishmael: ishmael\n    ishmael --&gt; [*]\n\n\n\n\n\n\nBut, this is far from a complete model of the whole book Moby Dick. It would only work if the entire book was just ‚ÄúCall me Ishmael‚Äù over and over again.\nTo enrich the FSA, we could add all of the other words that could follow ‚Äúcall‚Äù.\n\n\n\n\n\nstateDiagram\n    direction LR\n\n    [*] --&gt; call: call\n    call --&gt; call: call\n    call --&gt; it: it\n    call --&gt; a: a\n    call --&gt; me: me\n    call --&gt; him: him\n    call --&gt; ...\n    call --&gt; [*]\n\n    me --&gt; ishmael: ishmael\n    me --&gt; call: call\n\n    ishmael --&gt; [*]\n\n\n\n\n\n\nBut, lots of other words could also follow ‚Äúme‚Äù. And more words could also follow ‚ÄúIshmael‚Äù\n\n\n\n\n\nstateDiagram\n    direction LR\n\n    [*] --&gt; call: call\n    call --&gt; call: call\n    call --&gt; it: it\n    call --&gt; a: a\n    call --&gt; me: me\n    call --&gt; him: him\n    call --&gt; ...\n    call --&gt; [*]\n\n    me --&gt; me: me\n    me --&gt; call: call\n    me --&gt; that: that\n    me --&gt; and: and\n    me --&gt; ishmael: ishmael\n    me --&gt; to: to\n    me --&gt; ...\n    me --&gt; [*]\n\n    ishmael --&gt; ishmael: ishmael\n    ishmael --&gt; me: me\n    ishmael --&gt; can: can\n    ishmael --&gt; said: said\n    ishmael --&gt; ...\n    ishmael --&gt; [*]\n\n\n\n\n\n\nIf we fully fleshed out this diagram with all1 of words in Moby Dick, it would look like this\n\n\n\n\n\n\n\n\nFigure¬†1: Bigram network for Moby Dick, where \\(C(w_1, w_2)\\ge 5\\)\n\n\n\n\n\n\n*grams\nThe ‚Äúmodel‚Äù of word sequences is called an ‚Äúngram‚Äù model or more specifically a ‚Äúbigram‚Äù model.\n\nHow we name *gram models\n\n\nWords in the current state\nWords in input\nTotal Words\nName\n\n\n\n\n1\n1\n2\nbigram\n\n\n2\n1\n3\ntrigram\n\n\n3\n1\n4\n4-gram\n\n\n4\n1\n5\n5-gram\n\n\n\n\n\netc\n\n\n\nWe can expand the context of the bigram model to a trigram model, which would look something like this\n\n\n\n\n\nstateDiagram\n  direction LR\n  \n  state \"_ call\" as _c\n  state \"call me\" as cm\n  state \"me Ishmael\" as mi\n  \n  [*] --&gt; _\n  _ --&gt; _c: call\n  _c --&gt; cm: me\n  cm --&gt; mi: Ishmael\n  mi --&gt; [*]\n  \n\n\n\n\n\n\nBut, again, even for this small vocabulary, this total number of states is incomplete. If we wired up all of the logical transitions they‚Äôd look like this ilithid monstrosity.\n\n\n\n\n\nstateDiagram\n    direction LR\n\n    state \"_ call\" as _c\n    state \"_ me\" as _m\n    state \"_ Ishmael\" as _i\n    \n    state \"call me\" as cm\n    state \"call call\" as cc\n    state \"call Ishmael\" as ci\n\n    state \"me Ishmael\" as mi\n    state \"me call\" as mc\n    state \"me me\" as mm\n\n    state \"Ishmael call\" as ic\n    state \"Ishmael Ishmael\" as ii\n    state \"Ishmael me\" as im\n\n    [*] --&gt; _: _\n    _ --&gt; _m: me\n    _ --&gt; _c: call\n    _ --&gt; _i: Ishmael\n    \n\n    _c --&gt; cm: me\n    _c --&gt; cc: call\n    _c --&gt; ci: Ishmael\n\n    cc --&gt; cc: call\n    cc --&gt; ci: Ishmael\n    cc --&gt; cm: me\n\n    ci --&gt; ii: Ishmael\n    ci --&gt; im: me\n    ci --&gt; ic: call\n\n    cm --&gt; mi: Ishmael\n    cm --&gt; mm: me\n    cm --&gt; mc: call\n\n    _m --&gt; mc: call\n    _m --&gt; mm: me\n    _m --&gt; mi: Ishmael\n    \n    mm --&gt; mm: me\n    mm --&gt; mc: call\n    mm --&gt; mi: Ishmael\n\n    mi --&gt; ii: Ishmael\n    mi --&gt; ic: call\n    mi --&gt; im: me\n\n    mc --&gt; cm: me\n    mc --&gt; ci: Ishmael\n    mc --&gt; cc: call\n\n\n\n    _i --&gt; ic: call\n    _i --&gt; im: me\n    _i --&gt; ii: Ishmael\n\n    ic --&gt; cc: call\n    ic --&gt; cm: me\n    ic --&gt; ci: Ishmael\n\n    im --&gt; mi: Ishmael\n    im --&gt; mc: call\n    im --&gt; mm: me\n\n    ii --&gt; im: me\n    ii --&gt; ic: call\n    ii --&gt; ii: Ishmael\n    \n\n\n\n\n\n\n\n\nProbabilistic ngrams\nBut, if we look at the actual entire book Moby Dick, not all of these connections are equally likely.\n\n\n\n\n\n\n\n\nnext word\nword\n\n\ncall\nme\nishmael\n\n\n\n\ncall\n0\n1\n0\n\n\nishmael\n0\n1\n0\n\n\nme\n3\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n%% fig-align: center\nflowchart LR\n    c[\"call\"] ==&gt; m[\"me\"]\n    m --&gt; c\n    m --&gt; i[\"Ishmael\"]",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html#terminology-and-notation-moment",
    "href": "notes/meetings/04_ngrams.html#terminology-and-notation-moment",
    "title": "ngrams",
    "section": "Terminology and Notation Moment",
    "text": "Terminology and Notation Moment\n\nTypes vs Tokens\n\n\nA function to get all of the words in Moby Dick\n\n\n\npython\n\nimport re\nimport gutenbergpy.textget\nfrom nltk.tokenize import word_tokenize\n\ndef get_moby_dick_words():\n  raw_book = gutenbergpy.textget.get_text_by_id(2701) # with headers\n  moby_dick_byte = gutenbergpy.textget.strip_headers(raw_book) # without headers\n  moby_dick = moby_dick_byte.decode(\"utf-8\")\n  moby_dick_tokens = word_tokenize(moby_dick)\n  moby_dick_words = [tok for tok in moby_dick_tokens]\n  \n  return moby_dick_words\n\n\n\n\n\npython\n\nmoby_dick_words = get_moby_dick_words()\nfor idx, word in enumerate(moby_dick_words[0:20]):\n  print(word, end = \", \")\n  if (idx+1) % 5 == 0:\n     print(\"\")\n\nMOBY-DICK, ;, or, ,, THE, \nWHALE, ., By, Herman, Melville, \nCONTENTS, ETYMOLOGY, ., EXTRACTS, (, \nSupplied, by, a, Sub-Sub-Librarian, ), \n\n\n\nWe can get counts of how often each word appeared in the book with collections.Counter() .\n\n\n\npython\n\nfrom collections import Counter\n\nword_count = Counter(moby_dick_words)\n\n\nLet‚Äôs compare the length of the full list of words to the length of the word count dictionary.\n\n\n\npython\n\nprint(f\"There are {len(moby_dick_words):,} total  words.\")\n\nThere are 255,958 total  words.\n\n\npython\n\nprint(f\"There are  {len(word_count):,} unique words.\")\n\nThere are  21,897 unique words.\n\n\n\n\n\n\n\n\n\nTerminology\n\n\n\nIn more common corpus/compling terminology, we would say\n\nThere are 215,300 tokens in Moby Dick.\nThere are 19,989 types in Moby Dick.\n\n\n\nWe can get the frequency of the words ‚Äúwhale‚Äù and ‚Äúogre‚Äù in Moby Dick like so:\n\n\n\n\n\n\nIndexing with a string?\n\n\n\n\n\nWe can index word_count with the string \"whale\" because it is a ‚Äúdictionary‚Äù We could create our own dictionary like this:\n\n\npython\n\nfood_type = {\n  \"banana\": \"fruit\",\n  \"strawberry\": \"fruit\",\n  \"carrot\": \"vegetable\",\n  \"onion\": \"vegetable\"\n}\n\nfood_type[\"banana\"]\n\n'fruit'\n\n\n\n\n\n\n\n\npython\n\nprint(f\"The word 'whale' appeared {word_count['whale']:,} times.\")\n\nThe word 'whale' appeared 771 times.\n\n\npython\n\nprint(f\"The word  'ogre' appeared    {word_count['ogre']} times.\")\n\nThe word  'ogre' appeared    0 times.\n\n\n\n\n\n\n\n\n\nTerminology\n\n\n\nThe way we‚Äôd describe this in a more corpus/comp-ling way is\n\nThe word type ‚Äúwhale‚Äù appears in Moby Dick. There are 1,070 tokens of ‚Äúwhale‚Äù in the book.\nThe word type ‚Äúogre‚Äù does not appear in Moby Dick.\n\n\n\n\n\nNotation\n\nWords and variables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntext\nCall\nme\nIshmael\n.\nSome\nyears\n‚Ä¶\n\n\n\nmath standin\n\\(w_1\\)\n\\(w_2\\)\n\\(w_3\\)\n\\(w_4\\)\n\\(w_5\\)\n\\(w_5\\)\n\n\\(w_i\\)\n\n\n\n\n\\(w_2\\)\n\nLiterally the second word in a sequence.\n\n\\(w_i\\)\n\nThe \\(i\\)th word in the sequence (that is, any arbitrary word).\n\n\n\n\nCounting Words\n\n\n\n\n\n\nCounts of each type in Moby Dick\n\n\n\n\n\n\n\ntoken\nn\nmath\n\n\n\n\nCall\n3\n\\(C(w_1) = 3\\)\n\n\nme\n607\n\\(C(w_2) = 607\\)\n\n\nIshmael\n18\n\\(C(w_3) = 18\\)\n\n\n.\n7164\n\\(C(w_4) = 7164\\)\n\n\nSome\n38\n\\(C(w_5) = 38\\)\n\n\nyears\n91\n\\(C(w_6) = 91\\)\n\n\n\n\n\n\n\n\n\\(C()\\)\n\nA function for the ‚ÄúC‚Äùount of a value.\n\n\\(C(w_1)\\)\n\nThe frequency of the type of the first token\n\n\\(C(w_i)\\)\n\nThe frequency of an arbitrary type.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntoken\nnext token\nn\nmath\n\n\n\n\nCall\nme\n1\n\\(C(w_1w_2) = 1\\)\n\n\nme\nIshmael\n1\n\\(C(w_2w_3) = 1\\)\n\n\nIshmael\n.\n3\n\\(C(w_3w_4) = 3\\)\n\n\n.\nSome\n27\n\\(C(w_4w_5) = 27\\)\n\n\nSome\nyears\n1\n\\(C(w_5w_6) = 1\\)\n\n\n\n\n\n\n\n\n\\(C(w_1w_2)\\)\n\nThe count of times the sequence \\(w_1w_2\\) occured.\n\n\\(C(w_iw_{i+1})\\)\n\nThe count of times an arbitrary 2 word sequence appeared\n\n\\(C(w_{i-1}w_i)\\)\n\nSame as before, but with emphasis on the second word.\n\n\n\n\nProbabilities\n\n\\(P(w_1)\\)\n\nThe probability of the first word\n\n\\(P(w_i)\\)\n\nThe probability of an arbitrary word\n\n\\(P(w_2|w_1)\\)\n\nThe probability that we‚Äôll get word 2 coming after word 1\n\n\\(P(w_i|w_{i-1})\\)\n\nThe probability we‚Äôll get any arbitrary word coming after the word before.",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html#language-prediction",
    "href": "notes/meetings/04_ngrams.html#language-prediction",
    "title": "ngrams",
    "section": "Language Prediction",
    "text": "Language Prediction\nWhen we are perceiving language, we are constantly and in real-time making predictions about what we are about to hear next. While we‚Äôre going to be talking about this in terms of predicting the next word, It‚Äôs been shown that we do this even partway through a word (Allopenna, Magnuson, and Tanenhaus 1998).\nSo, let‚Äôs say I spoke this much of a sentence to you:\n\nI could tell he was angry from the tone of his___\n\nAnd then a sudden noise obscured the final word, and you only caught part of it. Which of the following three words was I probably trying to say?\n\nboys\nchoice\nvoice\n\nYour ability to guess which word it was is based on your i) experience with English turns of phrase and ii) the information in the context.\nOne goal of Language Models is to assign probabilities across the vocabulary for what the next word will be, and hopefully assign higher probabilities to the ‚Äúcorrect‚Äù answer than the ‚Äúincorrect‚Äù answer. Applications for this kind of prediction range from speech-to-text (which could suffer from a very similar circumstance as the fictional one above) to autocomplete or spellcheck.",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html#using-context-ngrams",
    "href": "notes/meetings/04_ngrams.html#using-context-ngrams",
    "title": "ngrams",
    "section": "Using context (ngrams)",
    "text": "Using context (ngrams)\nIn the example sentence above, one way we could go about trying to predict which word is most likely is to count up how many times the phrase ‚ÄúI could tell he was angry from the tone of his___‚Äù is finished by the candidate words. Here‚Äôs a table of google hits for the three possible phrases, as well as all hits for just the context phrase.\n\n\n\n‚ÄúI could tell he was angry from the tone of his‚Äù\ncount\n\n\n\n\nboys\n0\n\n\nchoice\n0\n\n\nvoice\n3\n\n\n‚ÄúI could tell he was angry from the tone of his‚Äù\n3\n\n\n\nWe‚Äôre going to start diving into mathematical formulas now (fortunately the numbers are easy right now).\nTo represent the count of a word or string of words in a corpus. We‚Äôll use \\(C(\\text{word})\\). So given the table above we have\n\n\n\n\n\n\n\n\n\\(C(\\text{I could tell he was angry from the tone of his})\\)\n=\n3\n\n\n\\(C(\\text{I could tell he was angry from the tone of his boys})\\)\n=\n0\n\n\n\\(C(\\text{I could tell he was angry from the tone of his choice})\\)\n=\n0\n\n\n\\(C(\\text{I could tell he was angry from the tone of his voice})\\)\n=\n3\n\n\n\nTo describe the probability that the next word is ‚Äúchoice‚Äù given that we‚Äôve already heard ‚ÄúI could tell he was angry from the tone of his‚Äù, we‚Äôll use the notation \\(P(\\text{choice} | \\text{I could tell he was angry from the tone of his})\\). To calculate that probability, we‚Äôll divide the total count of the whole phrase by the count of the preceding context.\n\\[\nP(\\text{choice} | \\text{I could tell he was angry from the tone of his}) = \\frac{C(\\text{I could tell he was angry by the tone of his choice})}{C(\\text{I could tell he was angry by the tone of his})} = \\frac{0}{3} = 0\n\\]\nOr, more generally:\n\\[\nP(w_i|w_{i-n}\\dots w_{i-1}) = \\frac{w_{i-n}\\dots w_i}{w_{i-n}\\dots w_{i-1}}\n\\]\nIn fact, we can estimate the probability of an entire sentence with the Probability Chain Rule. The probability of a sequence of events like \\(P(X_1X_2X_3)\\) can be estimated by multiplying out their conditional probabilities like so:\n\\[\nP(X_1X_2X_3) = P(X_1)P(X_2|X_1)P(X_3|X_1X_2)\n\\]\nOr, to use a phrase as an example:2\n\\[\nP(\\text{du hast mich gefragt})=P(\\text{du})P(\\text{hast}|\\text{du})P(\\text{mich}|\\text{du hast})P(\\text{gefragt}|\\text{du hast mich})\n\\]",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html#data-sparsity",
    "href": "notes/meetings/04_ngrams.html#data-sparsity",
    "title": "ngrams",
    "section": "Data Sparsity",
    "text": "Data Sparsity\nThe problem we face is that, even with the whole internet to search, very long phrases like ‚ÄúI could tell he was angry by the tone of his‚Äù are relatively rare!\nIf we look at Moby Dick, using a standard tokenizer (more on that later) we wind up with 255,958 words in total. But not every word is equally likely.\n\n\n\n\n\n\n\n\nRank and Frequency of single words in Moby Dick\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRank and Frequency of 2-grams through 5-grams in Moby Dick\n\n\n\n\n\n\n\n\n\nThe proportion of all tokens which are hapax legomena\n\n\n\n\n\nThe problem with data sparsity\nLet‚Äôs say we got the following sequence of 4 words, and I wanted to predict the 5th\n\n\n\na\nman\nis\nelevated\n?\n\n\n\\(w_1\\)\n\\(w_2\\)\n\\(w_3\\)\n\\(w_4\\)\n\\(w_5\\)\n\n\n\nSo, for each word type, I want to know\n\\[\nP(w_i | \\text{a man is elevated})\n\\]\nWe know this is going to be calculated with this formula:\n\\[\n\\frac{C(\\text{a man is elevated }w_i)}{C(\\text{a man is elevated)}}\n\\]\nFrom the 4gram counts, I‚Äôll grab a table of the frequency of ‚Äúa man is elevated‚Äù.\n\n\n\n\n\n\n\n\n4gram\nfreq\n\n\n\n\na man is elevated\n1",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/meetings/04_ngrams.html#footnotes",
    "href": "notes/meetings/04_ngrams.html#footnotes",
    "title": "ngrams",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nwell, almost all.‚Ü©Ô∏é\nCredit here to Kyle Gorman for introducing me to this example.‚Ü©Ô∏é",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "ngrams"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html",
    "href": "notes/concepts/01_what-is-python.html",
    "title": "What is Python?",
    "section": "",
    "text": "When talking about ‚ÄúPython‚Äù or other programming langauges, we often engage in a form of polysemy1 that can be confusing at first. I‚Äôll try to unpack the different meanings here.",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-set-of-rules-for-a-formal-language",
    "href": "notes/concepts/01_what-is-python.html#python-is-set-of-rules-for-a-formal-language",
    "title": "What is Python?",
    "section": "üìï Python is set of rules for a formal language",
    "text": "üìï Python is set of rules for a formal language\nWhen we talk about ‚ÄúPython‚Äù, one thing we sometimes refer to is an abstract set of rules for a formal language.\n\n\n\n\n\n\nüìï The abstract language\n\n\n\nWhen you say:\n\nI‚Äôm learning Python this semester.\n\nYou‚Äôre talking about the abstract set of rules.\n\n\nWe can describe some of these rules in natural language (this isn‚Äôt how they‚Äôre actually written).\n\nIf a list of values has been assigned to a variable, when the variable‚Äôs name is followed [0], return the first value in the list.\nIf print( is followed by a value or variable, which is then followed by ), print the value, or the value assigned to the variable.\nIf a # symbol is encountered on a line, ignore everything following it.\n\nThese rules define very precisely how code should be written, and also define what should be done when certain patterns of code are encountered, but these rules are abstract, and don‚Äôt actually do anything.",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-a-program-that-interprets-formal-language-input",
    "href": "notes/concepts/01_what-is-python.html#python-is-a-program-that-interprets-formal-language-input",
    "title": "What is Python?",
    "section": "ü§ñ Python is a program that interprets formal language input",
    "text": "ü§ñ Python is a program that interprets formal language input\nSimply having a set of abstract rules can be fun, but it‚Äôs not so useful if you have no way to actually do things. To make code we write actually do anything, we need to use a program called an Interpreter.\n\n\n\n\n\n\nü§ñ The Python Interpreter\n\n\n\nWhen you say\n\nI‚Äôm having a hard time installing Python.\n\nyou‚Äôre talking about a Python Interpreter.\n\n\nThe Python interpreter processes code, determines whether or not it is valid, then does the things the code told it to do.\nCode can get passed to the interpreter many different ways, including\n\nIn a single text file, called a python ‚Äúscript‚Äù, (usually named to end in .py)\nIn an interactive python ‚Äúshell‚Äù.\nInside a Jupyter notebook.\n\nFor example, the text in the shaded block below was passed to a Python interpreter, and the interpreter decided that it was invalid (because there is an opening quote \", but not a closing quote).\n\n\n\npython\n\n\nPython Code\n\n\"x\n\n\nSyntaxError: unterminated string literal (detected at line 1) (20073044.py, line 1)\n\n\nThe text in this next shaded block was passed to a Python interpreter. This time, it was deemed valid, and the interpreter did what the code instructed.\n\n\npython\n\nprint(\"hello! \" * 3)\n\nhello! hello! hello!",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-an-ecosystem",
    "href": "notes/concepts/01_what-is-python.html#python-is-an-ecosystem",
    "title": "What is Python?",
    "section": "‚õ∞Ô∏è Python is an Ecosystem",
    "text": "‚õ∞Ô∏è Python is an Ecosystem\nPeople often say that Python comes ‚Äúwith batteries included‚Äù, meaning it can do a lot of different things out without needing to install any extensions. But you can install extensions in the form of additional libraries that extend Python‚Äôs capabilities.\n\n\n\n\n\n\n‚õ∞Ô∏è The Ecosystem\n\n\n\nWhen someone says\n\nPython is the most widely used language in natural language processing.\n\nThey are talking about the ecosystem of libraries for Python hat have been built to do natural language processing.\n\n\nSome examples of additional libraries for Python are\n\nnumpy: Allows for effective computation with numbers\nmatplotlib: Makes graphs\n\n\n\npython\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 200)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nplt.show()",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#python-is-a-social-project",
    "href": "notes/concepts/01_what-is-python.html#python-is-a-social-project",
    "title": "What is Python?",
    "section": "üßë‚Äçüíª Python is a social project",
    "text": "üßë‚Äçüíª Python is a social project\nThe meanings of ‚ÄúPython‚Äù we‚Äôve already talked about are\n\nüìï The abstract language\nü§ñ The Python Interpreter\n‚õ∞Ô∏è The Python Ecosystem\n\nUnderstanding how to put all of these pieces together effectively is a social project.\n\n\n\n\n\n\nüßë‚Äçüíª The social project\n\n\n\nWhen you say\n\nSo-n-so is really good at Python.\n\nYou are talking about their involvement in the Python social project.\n\n\n\n‚ùå There is no part of the üìï abstract language that will inform you that there is a very good Python library for doing a certain task.\n‚ùå The ü§ñ Python Interpreter won‚Äôt tell you that there‚Äôs a better way to do what you‚Äôre trying to do.\n‚ùå There are nearly half a million libraries on ‚õ∞Ô∏è the Python Package Index, so you can‚Äôt just peruse it to find what‚Äôs relevant.\n\nIn order to know newest or most effective way to do things, you need to be involved in üßë‚Äçüíª the social project. That begins within a classroom, then extends to keeping up with blogs and other discourses about changes and developments.\nOne way people demonstrate that they are involved in the Python social project is by writing their code idiomatically. For example, in the code block above, I included the line import numpy as np. But there‚Äôs no rule that we import numpy as np, it‚Äôs simply convention.\nThis code below will run just as well, but would cause problems for people trying to read your code, because it‚Äôs not idiomatic.\n\n\npython\n\nimport matplotlib.pyplot as jokes\nimport numpy as farts\n\nx = farts.linspace(0, 2 * farts.pi, 200)\ny = farts.sin(x)\n\nfig, ax = jokes.subplots()\nax.plot(x, y)\njokes.show()",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#the-polysemy-is-ok",
    "href": "notes/concepts/01_what-is-python.html#the-polysemy-is-ok",
    "title": "What is Python?",
    "section": "üìï, ü§ñ, ‚õ∞Ô∏è, üßë‚Äçüíª The Polysemy is Ok",
    "text": "üìï, ü§ñ, ‚õ∞Ô∏è, üßë‚Äçüíª The Polysemy is Ok\nIt‚Äôs ok just say ‚ÄúPython‚Äù when you‚Äôre talking about one specific meaning.",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/01_what-is-python.html#footnotes",
    "href": "notes/concepts/01_what-is-python.html#footnotes",
    "title": "What is Python?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA word is polysemous when it has more than one meaning.‚Ü©Ô∏é",
    "crumbs": [
      "Notes",
      "Concepts",
      "What *is* Python?"
    ]
  },
  {
    "objectID": "notes/concepts/00_glossary.html",
    "href": "notes/concepts/00_glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Case Folding\n\nTo convert text data either to all uppercase or lowercase characters.\n\nClone\n\nMaking a copy of a git repository on another computer, whether locally or remotely.\n\nCopy-Paste\n\nCopying text to your computer‚Äôs ‚Äòclipboard‚Äô and pasting it into another location.\nCopying can be done many ways, including selecting text with your mouse, right-clicking then selecting ‚Äòcopy‚Äô, by selecting text and using your computer‚Äôs ‚Äòhotkey‚Äô for copying (), or, in the course documents, by clicking on the ‚Äòcopy‚Äô icon in most code chunks.\nTo paste, you can either right-click and select ‚ÄòPaste‚Äô, or use your system‚Äôs ‚Äòhotkey‚Äô ().\n\nFind, or \n\nYou can find text in most pages or documents by either typing , then typing in the text you want to find in the dialogue box that pops up.\n\nFormal\n\nIn computational linguistics, ‚Äòformal‚Äô isn‚Äôt the opposite of ‚Äòcasual‚Äô. It‚Äôs about any system or language which has a strict set of acceptable symbols, and how they can be combined.\n\nGitHub Codespaces\n\nGitHub Codespaces are a ‚Äòdevelopment environment‚Äô, running on a Virtual Machine. They‚Äôre like mini computers you can access through your web browser that get created just for the repository you launch one in. The actual memory and computation are being run on GitHub‚Äôs physical computers.\n\nIndex (noun)\n\nA value (usually an integer) that denotes the location of a valuable in an indexable object.\n\nIndex (verb)\n\nTo use a numeric index on an object to return the value at that index.\n\nLocal (adj)\n\nDescribes anything that exists or happens on the actual device you‚Äôre interacting with. For example, if you have a Microsoft Word document on your computer that ends in .docx, it is probably ‚Äòlocal‚Äô (even if theres a ‚Äòremote‚Äô copy somewhere). These days, it‚Äôs not always obvious if things happen locally or remotely. If you have a phone that does facial recognition on pictures you take, if the facial recognition program runs on your phone, it‚Äôs ‚Äòlocal‚Äô. But if the picture needs to get uploaded to Apple or Google first, then the facial recognition is ‚Äòremote‚Äô.\n\nRemote (adj)\n\nDescribes anything that exists or happens on a different device than the one you‚Äôre interacting with. For example, if you edit a Google Doc, the actual document is stored on a Google computer, not on the device you‚Äôre editing.\n\nSlice (verb)\n\nTo pull out a range of values from an object, defined by a starting and stopping position.\n\nTab Autocomplete\n\nMany programming applications have ‚ÄúTab Autocomplete‚Äù suggestions that allow you to type in just a few letters of the command, function, or variable you want to use, and then hit TabTab.\n\nTerminal\n\nA text based interface to your computer. Instead of clicking on visual icons to, say, open a folder and look at its contents, you type in text based commands like cd and ls.\n\nVirtual Machine/VM\n\nVirtual Machines are simulations of computers. It‚Äôs like having an encapsulated computer, running its own operating system and programs, that borrows memory and computing resources from computers it‚Äôs running on.\n\ndictionary\n\nIn programming languages, a dictionary is a data structure that stores key, value pairs, and lets you retrieve a value with a given key.\n\n\n\n Back to topReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Glossary},\n  url = {https://lin511-2024.github.io/notes/concepts/00_glossary.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. ‚ÄúGlossary.‚Äù https://lin511-2024.github.io/notes/concepts/00_glossary.html.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Glossary"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html",
    "href": "notes/concepts/02_undersdanding-paths.html",
    "title": "Understanding Directories",
    "section": "",
    "text": "There has recently been an uptick in discussion among college professors that students are less familiar with the notions of files, folders, directories, and paths than they used to be in the past. This is in part a natural consequence of shifting paradigms in computer use. Many people are exclusively using online services like Google Docs, and don‚Äôt save files to their computers ever. And even when we do save files on out computer, many operating systems have search based approaches to finding files.\nThe problem for scientific computing purposes, or even just making some simple HTML pages on your local computer, is that you need to be able to navigate the hierarchical file system of your computer, in order to tell your programs how to navigate it.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#directory-structure",
    "href": "notes/concepts/02_undersdanding-paths.html#directory-structure",
    "title": "Understanding Directories",
    "section": "",
    "text": "There has recently been an uptick in discussion among college professors that students are less familiar with the notions of files, folders, directories, and paths than they used to be in the past. This is in part a natural consequence of shifting paradigms in computer use. Many people are exclusively using online services like Google Docs, and don‚Äôt save files to their computers ever. And even when we do save files on out computer, many operating systems have search based approaches to finding files.\nThe problem for scientific computing purposes, or even just making some simple HTML pages on your local computer, is that you need to be able to navigate the hierarchical file system of your computer, in order to tell your programs how to navigate it.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#files-in-folders",
    "href": "notes/concepts/02_undersdanding-paths.html#files-in-folders",
    "title": "Understanding Directories",
    "section": "Files in Folders",
    "text": "Files in Folders\nThe first thing to be clear about is that all files you‚Äôve saved on your computer are in a folder (a.k.a. a directory). ‚ÄúDocuments‚Äù or ‚ÄúMy Documents‚Äù is a folder. Even your Desktop is a folder. This is true for both macOS and Windows. For example, I have an account on my laptop called ‚ÄúDisplay‚Äù for when I want to show how my computer works without showing everyone all of my personal files. In the Display account, I saved a little text file called Sampletext.txt to the desktop. In this screenshot, you can see Sampletext.txt shown both on my desktop, and as a file in a folder.\n\n\n\nDesktop is a folder\n\n\nWhat‚Äôs nice about this image is that you can see where Sampletext.txt exists in the context of my whole hard drive. My ‚ÄúDesktop‚Äù is just a folder that my computer shows the content of on my main screen. The Desktop folder is inside of a folder called ‚ÄúDisplay‚Äù. There are other folders in there, including my main user account, joseffruehwald. All of these folders are grouped together in the ‚ÄúUsers‚Äù folder, and the ‚ÄúUsers‚Äù folder is one of the first folders immediately underneath my hard drive.\nThe important thing to keep in mind here is that all files, programs, photos, etc are stored somewhere in a folder, inside of another folder, probably inside of another folder. You might not always¬†interact with the files this way, and they might not always¬†look like they‚Äôre in a folder, but they are.\n\nViewing the folder hierarchy on a Mac\nTo be able to better view the full hierarchy of folders on a Mac, I would recommend the following:\n\nOpen Finder, and in the View menu, select ‚Äúas Columns‚Äù\nUnder the View menu again, select ‚ÄúShow Path Bar‚Äù\n\n\n\nViewing the folder hierarchy in Windows\nAt the top of the file browser on Windows, you‚Äôll see the sequence of files in which the current folder is embedded.\n\n\n\nWindows directory structure",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#giving-directions-to-programs",
    "href": "notes/concepts/02_undersdanding-paths.html#giving-directions-to-programs",
    "title": "Understanding Directories",
    "section": "Giving Directions to Programs",
    "text": "Giving Directions to Programs\nPrograms are going to need directions for where to find things, and we can do this with ‚Äúpaths‚Äù. The concept of a path is so important, I‚Äôm going to really emphasize it\n‚Äúpaths‚Äù¬†\nThe ‚Äúpath‚Äù to a file is a written instruction for where to find a file on your specific computer.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#relative-paths",
    "href": "notes/concepts/02_undersdanding-paths.html#relative-paths",
    "title": "Understanding Directories",
    "section": "Relative Paths",
    "text": "Relative Paths\nSometimes, we only need to tell a file where another file is¬†relative to itself. For example, here is an HTML document and a CSS stylesheet for that document.\n\n\n\nhtml and css in a dicectory\n\n\nFrom site.html to style.css: style.css\nBecause style.css is in the same folder as site.html, we only need to tell site.html to look for style.css, like so\n\nhtml\n\n&lt;link \n  rel=\"stylesheet\" \n  type=\"text/css\" \n  href=\"style.css\"&gt;\nJust telling the html file to look for style.css, it‚Äôs going to look inside of, and only inside of the same folder as itself.\nHowever, sometimes people like to put all of the stylesheets and images for a website inside of a folder called ‚Äúassets,‚Äù like so:\n\n\n\nstylesheet in assets\n\n\nFrom site.html to style.css: assets/style.css\nNow, if we tell site.html just to look for style.css, it‚Äôs not going to find it anymore! That‚Äôs because style.css is no longer in the same folder as site.html. We‚Äôll need to update the link to the stylesheet to reflect the fact that it‚Äôs now in a different folder, like so:\n\nhtml\n\n&lt;link \n  rel=\"stylesheet\" \n  type=\"text/css\" \n  href=\"assets/style.css\"&gt;\nHere‚Äôs how site.html interprets the string assets/style.css:\n\nLook inside the folder you‚Äôre currently in for a folder called assets\nThen, look inside of that folder for a file called style.css\n\nWe could take it a step further, and create a new folder called ‚Äúcss‚Äù inside of ‚Äúassets‚Äù, and put our stylesheet there instead.\n\n\n\n`assets/css/style.css`\n\n\nFrom site.html to style.css: assets/css/style.css\nNow, we‚Äôd need to update the link to the stylesheet to look like this\n\nhtml\n\n&lt;link \n  rel=\"stylesheet\" \n  type=\"text/css\" \n  href=\"assets/css/style.css\"&gt;\nAgain, breaking this down into how site.html interprets the string assets/css/style.css¬†goes like this:\n\nLook inside of the same folder as yourself for a folder called assets\nLook inside of that folder for a folder called css\nLook inside of that folder for a file called style.css",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#absolute-paths",
    "href": "notes/concepts/02_undersdanding-paths.html#absolute-paths",
    "title": "Understanding Directories",
    "section": "Absolute Paths",
    "text": "Absolute Paths\nRelative paths define the location of a file relative to another file, usually the one you‚Äôre writing. However, we can also define the location of a file on our computer that will work no matter where we‚Äôre looking from. These are called ‚Äúabsolute paths.‚Äù Put simply, absolute paths just list all of the nested folders a file is in, all the way up to the hard drive. You can see the absolute path for style.css¬†at the bottom of the very last screen shot.\nDifferent operating systems have different short hands for describing the top level, or hard drive level, of the path. On macOS, it‚Äôs simply a / at the beginning of the path. On Windows, it usually begins with C:\\. For the final location of style.css¬†in the screenshot above, the absolute path would be.\n/Users/Display/Documents/html_practice/assets/css/style.css\nIf for some reason I didn‚Äôt want to move or copy this stylesheet from this location, and I wanted to link to it from an HTML file saved in some completely different location on my laptop, I could give it this absolute path, and it would find it.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#important-note-on-naming",
    "href": "notes/concepts/02_undersdanding-paths.html#important-note-on-naming",
    "title": "Understanding Directories",
    "section": "Important Note on Naming",
    "text": "Important Note on Naming\nFrom here on out in the course, you should avoid using spaces in any of the files or folders you name. While you¬†can take spaces into account when giving a path, it‚Äôs annoying. Instead, I‚Äôd recommend using an underscore _, a dash -, or naming files with ‚Äúcamel case‚Äù.\n\nmy_file.txt\nmy-file.txt\nmyFile.txt",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/concepts/02_undersdanding-paths.html#important-note-on-using-paths",
    "href": "notes/concepts/02_undersdanding-paths.html#important-note-on-using-paths",
    "title": "Understanding Directories",
    "section": "Important Note on Using Paths",
    "text": "Important Note on Using Paths\nThere are two crucial things to remember about using paths that can be conceptually difficult when first getting started.\n\nRelative paths always depend on where you‚Äôre coming¬†from and where you‚Äôre going¬†to. If either my HTML file was in a location I was confused about, or my CSS file was in a location I was confused about, my relative path might not work.\nBoth relative paths and absolute paths depend on how files are organized inside of your own computer. A path copied from an example online, or a professor‚Äôs template¬†might not work ¬†if your file structure is different.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Understanding Directories"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html",
    "href": "notes/programming/03_python_plus.html",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "",
    "text": "This lesson has two goals:",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#finding-and-reading-in-files",
    "href": "notes/programming/03_python_plus.html#finding-and-reading-in-files",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "Finding and reading in files",
    "text": "Finding and reading in files\nIn order to read in a file, first we need to tell python where a file is. We‚Äôll do this with pathlib.Path(). For a recap of what paths are, see Understanding Directories.\n\n\npython\n\nfrom pathlib import Path\n\nLet‚Äôs just call Path() and see what it gives us.\n\n\npython\n\nhere = Path()\nhere\n\nPosixPath('.')\n\n\nSome detail of what gets printed out for here will depend on your operating system, but one thing that should be the same across the board is that '.' is a placeholder meaning ‚Äúthe dirtory you‚Äôre currently in.\nTo see the full path to your current directory, we‚Äôll use the .resolve() method.\n\n\npython\n\nhere.resolve()\n\nPosixPath('/workspaces/Lin511-2024.github.io/notes/programming')\n\n\nWhat this full path looks like really depends on where you are running your code.\n\nGetting directory contents\nTo get the full contents of a directory, we‚Äôll use the the .glob() method. To get readable output, we need to wrap list() around everything.\n\n\npython\n\nlist(\n    here.glob(pattern = \"*\")\n)\n\n[PosixPath('03_python_plus.ipynb'),\n PosixPath('assets'),\n PosixPath('_02_Paths.ipynb'),\n PosixPath('01_Python_basics.ipynb'),\n PosixPath('00_setup.qmd'),\n PosixPath('poems'),\n PosixPath('02_regex.ipynb')]",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#lists-a-new-data-structure",
    "href": "notes/programming/03_python_plus.html#lists-a-new-data-structure",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "*Lists (a new data structure)",
    "text": "*Lists (a new data structure)\nThe code above created a ‚Äúlist‚Äù, which is, like the name suggests, a list of values.\n\n\npython\n\nhere_list = list(\n    here.glob(pattern = \"*\")\n)\n\nWe can create our own lists by hand, like so:\n\n\npython\n\nmy_list = [\"a\", \"b\", \"c\", \"d\", \"e\"] \n\n\nDoing things with lists\n\nGetting their length\nTo get the length of anything, including lists, len().\n\n\npython\n\nlen(here_list)\n\n7\n\n\n\n\npython\n\nlen(my_list)\n\n5\n\n\n\n\nGetting a value from a list\nTo get a value out of a list in python, we need to ‚Äúindex‚Äù it. To get just the first value from a list, we‚Äôll use the index 0.\n\n\npython\n\nhere_list[0]\n\nPosixPath('03_python_plus.ipynb')\n\n\n\n\npython\n\nmy_list[0]\n\n'a'\n\n\nTo get a range of values, we‚Äôll use a ‚Äúslice‚Äù operator :.\n\n\npython\n\nmy_list[0:3]\n\n['a', 'b', 'c']\n\n\n\n\npython\n\nmy_list[1:4]\n\n['b', 'c', 'd']\n\n\n\n\nHow to think about indices\nThe index for 'a' is 0, and the index for 'c' is 2.\n\n\npython\n\nmy_list.index(\"a\")\n\n0\n\n\n\n\npython\n\nmy_list.index(\"c\")\n\n2\n\n\nBut to get out every value between 'a' and 'c', we need to use 0:3.\n\n\npython\n\nmy_list[0:3]\n\n['a', 'b', 'c']\n\n\nThe way to conceptualize these numeric indices is that they come between the values in a list.\n\n\n\nIndex locations\n\n\nWhen we give just a single number as an index, we get back the value immediately to the right of the index.\n\n\n\nSingle value index\n\n\nWhen we give an index slice, we get back every value between the start of the slice and the end.\n\n\n\nSlice indexing\n\n\n\nNegative indexing\nSometimes, you know you‚Äôll want the last, or second to last value from a list, so there are also negative indicies defined.\n\n\n\nNegative indexing\n\n\nThese work in the same way. A single index returns the value immediately to the left, a slice returns the values between the first and the second.\n\n\npython\n\nmy_list[-1]\n\n'e'\n\n\n\n\npython\n\nmy_list[-3:-1]\n\n['c', 'd']\n\n\n\n\npython\n\nmy_list[-2:]\n\n['d', 'e']",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#reading-in-a-text-file",
    "href": "notes/programming/03_python_plus.html#reading-in-a-text-file",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "Reading in a text file",
    "text": "Reading in a text file\nI‚Äôve put two poems in the poems directory right next to the current notebook. We can get a list of them by\n\nadding poems/ to the here path\nGlobbing the new path.\n\n\n\npython\n\npoems_dir = here.joinpath(\"poems\")\npoems_files = list(poems_dir.glob(\"*\"))\npoems_files\n\n[PosixPath('poems/the_tiger.txt'), PosixPath('poems/this_is_just_to_say.txt')]\n\n\nLet‚Äôs read in poems/this_is_just_to_say.txt.\n\n\npython\n\nplums_path = poems_files[1]\nplums_path\n\nPosixPath('poems/this_is_just_to_say.txt')\n\n\nRight now plums_path just contains information about where the file is. In order to read its contents into python, we need to\n\nOpen it.\nRead it.\nClose it.\n\nWe‚Äôll manage all three steps with the following code.\n\n\npython\n\nplums_poem = plums_path.read_text()\nprint(plums_poem)\n\nThis Is Just To Say\nBy William Carlos Williams\n\nI have eaten\nthe plums\nthat were in\nthe icebox\n\nand which\nyou were probably\nsaving\nfor breakfast\n\nForgive me\nthey were delicious\nso sweet\nand so cold",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#doing-things-to-strings",
    "href": "notes/programming/03_python_plus.html#doing-things-to-strings",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "Doing things to strings",
    "text": "Doing things to strings\nRight now, plums_poem is just one long string. When we print it out, we get some nice formatting, but if we look at the unformatted output, you‚Äôll see it‚Äôs one long string with newline characters: \\n.\n\n\npython\n\nplums_poem\n\n'This Is Just To Say\\nBy William Carlos Williams\\n\\nI have eaten\\nthe plums\\nthat were in\\nthe icebox\\n\\nand which\\nyou were probably\\nsaving\\nfor breakfast\\n\\nForgive me\\nthey were delicious\\nso sweet\\nand so cold'\n\n\nTo start doing computational linguistics things to the poem, we‚Äôll need to start splitting it up into pieces, like separate lines, or separate words.\n\nUpper and Lower case\nOne thing that can make life a little easier is to ‚Äúcase fold‚Äù text data, which we can do with the .lower() and .upper() methods.\n\n\npython\n\nplums_lower = plums_poem.lower()\nprint(plums_lower[0:46])\n\nthis is just to say\nby william carlos williams\n\n\n\n\nSplitting into lines\nWe can also split the poem into separate lines with the .split() method, which will return a list with the poem split by whatever value we give it.\n\n\npython\n\n# split according to newlines\nplums_lines = plums_poem.split(\"\\n\")\nplums_lines\n\n['This Is Just To Say',\n 'By William Carlos Williams',\n '',\n 'I have eaten',\n 'the plums',\n 'that were in',\n 'the icebox',\n '',\n 'and which',\n 'you were probably',\n 'saving',\n 'for breakfast',\n '',\n 'Forgive me',\n 'they were delicious',\n 'so sweet',\n 'and so cold']\n\n\nNow, we can get each individual line by indexing.\n\n\npython\n\nplums_lines[0]\n\n'This Is Just To Say'",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#looping-through-the-poem",
    "href": "notes/programming/03_python_plus.html#looping-through-the-poem",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "Looping through the poem",
    "text": "Looping through the poem\nAbove, I ran .split() on the non-case folded poem. What if I wanted to lowercase each line of the poem now, after the fact. We can use a for loop to do this. Let‚Äôs build up to it.\n\nfor-loop skeleton\n\n\npython\n\nfor line in plums_lines:\n    myspace_line = \"xXx \" + line + \" xXx\"\n    print(myspace_line)\n\nxXx This Is Just To Say xXx\nxXx By William Carlos Williams xXx\nxXx  xXx\nxXx I have eaten xXx\nxXx the plums xXx\nxXx that were in xXx\nxXx the icebox xXx\nxXx  xXx\nxXx and which xXx\nxXx you were probably xXx\nxXx saving xXx\nxXx for breakfast xXx\nxXx  xXx\nxXx Forgive me xXx\nxXx they were delicious xXx\nxXx so sweet xXx\nxXx and so cold xXx\n\n\nLet‚Äôs unpack the first line of the for loop:\nfor line in plums_line:\nThis tells python to take each value in plums_line, assign it to a new variable called line, then do something. After it has done something, it goes and grabs the next value from plums_line, assigns it to a variable called line, and starts over.\n\n\n\n\n\n\nSome common misconceptions\n\n\n\n\nWhat we tell python to name the variable it creates does not affect the way the for loop works. We called it line to make the code readable. If we really wanted to pull out every noun from the poem, and said for noun in plums_lines:, it is not going to pull out every noun.\n\n\n\npython\n\nfor noun in plums_lines[0:2]:\n    print(noun)\n\nThis Is Just To Say\nBy William Carlos Williams\n\n\n\nWhat we do inside of the loop doen‚Äôt have to involve the line variable at all.\n\n\n\npython\n\nfor line in plums_lines:\n    print(\"plum\")\n\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\nplum\n\n\n\nWhat the for-loop did does not get saved anywhere. The only ‚Äústate‚Äù that gets preserved at all is the final one.\n\n\n\npython\n\nmyspace_line\n\n'xXx and so cold xXx'\n\n\n\n\nThis last point is super important. To save, or remember, what happened inside of a for-loop, you need to do two things.\n\nCreate a variable outside of the loop.\nUpdate the variable inside of the loop.\n\nFor example, if we wanted to get the total number of characters in the peom, we‚Äôd need to\n\nCreate a collector variable outside of the loop.\nAdd update its total value inside of the loop.\n\n\n\npython\n\ntotal_chars = 0\n\nprint(f\"The total number of chars is now {total_chars}\")\n\nfor line in plums_lines:\n    line_len = len(line)\n    total_chars = total_chars + line_len\n    print(f\"The total number of chars is now {total_chars}\")\n\nprint(f\"The final number of chars is {total_chars}\")\n\nThe total number of chars is now 0\nThe total number of chars is now 19\nThe total number of chars is now 45\nThe total number of chars is now 45\nThe total number of chars is now 57\nThe total number of chars is now 66\nThe total number of chars is now 78\nThe total number of chars is now 88\nThe total number of chars is now 88\nThe total number of chars is now 97\nThe total number of chars is now 114\nThe total number of chars is now 120\nThe total number of chars is now 133\nThe total number of chars is now 133\nThe total number of chars is now 143\nThe total number of chars is now 162\nThe total number of chars is now 170\nThe total number of chars is now 181\nThe final number of chars is 181\n\n\nThis use of a for-loop makes the ‚Äúloop‚Äù part clearer.\n\n\n\n\n\nstateDiagram\n    state \"for line in lines:\" as for\n    state if_line &lt;&lt;choice&gt;&gt;\n    state fork &lt;&lt;fork&gt;&gt;\n    state fork1 &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork1\n    fork1 --&gt; total_chars: set to 0\n    fork1 --&gt; for\n    for --&gt; if_line\n    if_line --&gt; fork: If another line\n    if_line --&gt; [*]: If no more lines\n    fork --&gt; total_chars: +len(line)\n    fork --&gt; for\n\n\n\n\n\n\nTo actually lowercase the poem now, we need to\n\nCreate an empty list outside of the loop.\nAdd the lowercased line to this list inside of the loop.\n\n\n\npython\n\nlower_lines = []\n\nfor line in plums_lines:\n    lower_lines.append(\n        line.lower()\n    )\n\nlower_lines\n\n['this is just to say',\n 'by william carlos williams',\n '',\n 'i have eaten',\n 'the plums',\n 'that were in',\n 'the icebox',\n '',\n 'and which',\n 'you were probably',\n 'saving',\n 'for breakfast',\n '',\n 'forgive me',\n 'they were delicious',\n 'so sweet',\n 'and so cold']\n\n\n\n\nFiltering the poem\nThere are a few lines of the poem that are blank and have a length of 0.\n\n\npython\n\nprint(lower_lines[2])\n\n\n\n\n\n\npython\n\nlen(lower_lines[2])\n\n0\n\n\nWe can create a new list without these lines by\n\nCreating an empty list outside of the loop.\nAdding lines to that list inside the loop, only if they have a length greater than 0.\n\nThis introduces an if control block.\n\n\npython\n\nfull_lines = []\n\nfor line in lower_lines:\n    if len(line) &gt; 0:\n        full_lines.append(line)\n    else:\n        print(\"dumped an empty line\")\n\ndumped an empty line\ndumped an empty line\ndumped an empty line\n\n\n\n\npython\n\nfull_lines\n\n['this is just to say',\n 'by william carlos williams',\n 'i have eaten',\n 'the plums',\n 'that were in',\n 'the icebox',\n 'and which',\n 'you were probably',\n 'saving',\n 'for breakfast',\n 'forgive me',\n 'they were delicious',\n 'so sweet',\n 'and so cold']\n\n\nThe if block:\n\nChecks to see if the logical statement is True or False.\nIf True, it executes the code inside.\n\nIn this case, I‚Äôve also included an else block. This executes its code if the if block above was False.",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#nesting-loops",
    "href": "notes/programming/03_python_plus.html#nesting-loops",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "Nesting loops",
    "text": "Nesting loops\nWe can nest for loops and if statements to an arbitrary level, but good programming practice tries to keep it to a minumum. For example, to get every word in the poem, based on where the spaces are, we can\n\nCreate an empty words list outside of a loop.\nSplit each line using spaces.\nStart a loop over that list.\nUpdate the words list inside this loop.\n\n\n\npython\n\nall_words = []\n\nfor line in full_lines:\n    words = line.split(\" \")\n    for word in words:\n        all_words.append(word)\n\nprint(all_words[0:19])\n\n['this', 'is', 'just', 'to', 'say', 'by', 'william', 'carlos', 'williams', 'i', 'have', 'eaten', 'the', 'plums', 'that', 'were', 'in', 'the', 'icebox']",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/03_python_plus.html#a-slightly-nicer-way",
    "href": "notes/programming/03_python_plus.html#a-slightly-nicer-way",
    "title": "More Python: Poetry, Lists, Loops",
    "section": "A slightly nicer way",
    "text": "A slightly nicer way\nA slightly nicer way to do some of the operations we worked on here is with ‚Äúlist comprehensions‚Äù. These are special instructions to build a list that wind up saving us a bit of typing.\nHere‚Äôs the code we used to make all of the lines lowercase again.\n\n\npython\n\nlower_lines = []\n\nfor line in plums_lines:\n    lower_lines.append(line.lower())\n\nWith a list comprehension, we could rewrite this for-loop like so:\n\n\npython\n\nlower_lines2 = [\n    line.lower() \n    for line in plums_lines\n]\nlower_lines2\n\n['this is just to say',\n 'by william carlos williams',\n '',\n 'i have eaten',\n 'the plums',\n 'that were in',\n 'the icebox',\n '',\n 'and which',\n 'you were probably',\n 'saving',\n 'for breakfast',\n '',\n 'forgive me',\n 'they were delicious',\n 'so sweet',\n 'and so cold']\n\n\nWe can even include the empty line filtering into the list comprehension.\n\n\npython\n\nfull_lines2 = [\n    line.lower() \n    for line in plums_lines \n    if len(line)&gt;0\n]\n\nfull_lines2\n\n['this is just to say',\n 'by william carlos williams',\n 'i have eaten',\n 'the plums',\n 'that were in',\n 'the icebox',\n 'and which',\n 'you were probably',\n 'saving',\n 'for breakfast',\n 'forgive me',\n 'they were delicious',\n 'so sweet',\n 'and so cold']\n\n\nNested for statements also work inside of list comprehensions.\n\n\npython\n\nall_words2 = [\n    word\n    for line in full_lines2\n    for word in line.split(\" \")\n]\n\nall_words[0:19]\n\n['this',\n 'is',\n 'just',\n 'to',\n 'say',\n 'by',\n 'william',\n 'carlos',\n 'williams',\n 'i',\n 'have',\n 'eaten',\n 'the',\n 'plums',\n 'that',\n 'were',\n 'in',\n 'the',\n 'icebox']",
    "crumbs": [
      "Notes",
      "Programming",
      "More Python: Poetry, Lists, Loops"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html",
    "href": "notes/programming/02_regex.html",
    "title": "Regular Expressions, Quickly",
    "section": "",
    "text": "Look at Github\n\n\n\nThe real content is in your regex-in-class-&lt;username&gt; repository on github. This is meant to be more of a reference sheet.",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#setting-up-for-using-regular-expressions-in-python",
    "href": "notes/programming/02_regex.html#setting-up-for-using-regular-expressions-in-python",
    "title": "Regular Expressions, Quickly",
    "section": "Setting up for using regular expressions in python",
    "text": "Setting up for using regular expressions in python\n\nWe‚Äôll need to import the re module\nUnlike simple strings, we‚Äôll need to write our regular expressions with a preceding r\n\n\nimport re\n\nr\"regex\"\n\n'regex'",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#important-re-functions",
    "href": "notes/programming/02_regex.html#important-re-functions",
    "title": "Regular Expressions, Quickly",
    "section": "Important re functions",
    "text": "Important re functions\nTwo ways to use re to search strings are\n\nre.search()\n\nReturn structured information about where the regex matches.\n\nre.findall()\n\nReturn all actual matching substrings\n\n\n\nsentence1 = \"The speaker is speaking.\"\n\n\nre.search()\n\nre.search(r\"speak\", sentence1)\n\n&lt;re.Match object; span=(4, 9), match='speak'&gt;\n\n\n\nsentence1[4:9]\n\n'speak'\n\n\n\n\nre.findall()\n\nre.findall(r\"speak\", sentence1)\n\n['speak', 'speak']",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#simple-character-searches",
    "href": "notes/programming/02_regex.html#simple-character-searches",
    "title": "Regular Expressions, Quickly",
    "section": "Simple character searches",
    "text": "Simple character searches\nLike the examples above, literally the characters you want to use will match.\n\nspeak_regex = r\"speak\"\nget_regex_url(speak_regex)\n\nspeak",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#options",
    "href": "notes/programming/02_regex.html#options",
    "title": "Regular Expressions, Quickly",
    "section": "Options",
    "text": "Options\nIf you want some characters to be chosen from a set of options, place them in [].\n\nvowels_regex = r\"[aeiou]\"\nget_regex_url(vowels_regex)\n\n[aeiou]\n\n\n\nre.findall(r\"[aeiou]\", sentence1)\n\n['e', 'e', 'a', 'e', 'i', 'e', 'a', 'i']\n\n\n\nthe_regex = r\"[Tt]he\"\nget_regex_url(the_regex)\n\n[Tt]he\n\n\n\nre.findall(the_regex, sentence1)\n\n['The']\n\n\n\nRanges\nRanges of characters or numbers can be given inside [] like so\n\nget_regex_url(r\"[a-z]\")\nget_regex_url(r\"[A-Z]\")\nget_regex_url(r\"[0-9]\")\nget_regex_url(r\"[A-Za-z]\")\n\n[a-z]\n\n\n[A-Z]\n\n\n[0-9]\n\n\n[A-Za-z]\n\n\n\n\n‚ÄúMetacharacters‚Äù\n\n\\w == [A-Za-z0-9_]\n\nword characters\n\n\\W == [^A-Za-z0-9_]\n\nnon-word characters\n\n\\d == [0-9]\n\ndigits\n\n\\D == [^0-9]\n\nnon-digits\n\n\\s == [ \\t\\n]\n\nAny whitespace character\n\n\\S == [^ \\t\\n]\n\nnon-whitespace\n\n\n\n\nAny Character\nTo match any character (letter, number, punctuation, space, etc.) use . or ‚Äúdot‚Äù\n\nre.findall(\n    # return every word character and \n    # the following character\n    r\"\\w.\",\n    sentence1\n)\n\n['Th', 'e ', 'sp', 'ea', 'ke', 'r ', 'is', 'sp', 'ea', 'ki', 'ng']\n\n\n\n\nEscaping special symbols\nIf you wanted to find the actual period in sentence1, you‚Äôd have to ‚Äúescape‚Äù the . with a preceding `.\n\n# compare\nget_regex_url(r\".\")\nget_regex_url(r\"\\.\")\n\n.\n\n\n.\n\n\n\nre.findall(\n    \"\\.\",\n    sentence1\n)\n\n['.']",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#modifiers",
    "href": "notes/programming/02_regex.html#modifiers",
    "title": "Regular Expressions, Quickly",
    "section": "Modifiers",
    "text": "Modifiers\nModifiers come after the definition of a single character, and define how many times that character can appear.\n\na? = zero or one a\na+ = one or more a\na* = zero or more a\n\n\nget_regex_url(r\"bana?na\")\nget_regex_url(r\"bana+na\")\nget_regex_url(r\"bana*na\")\n\nbana?na\n\n\nbana+na\n\n\nbana*na",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#grouping",
    "href": "notes/programming/02_regex.html#grouping",
    "title": "Regular Expressions, Quickly",
    "section": "Grouping",
    "text": "Grouping\nYou can define groupings within regular expressions. The effect of these groupings depends what kind of regex function you‚Äôre using. For re.findall(), it‚Äôll find the whole string, but return just the text from the grouping.\n\nsentence2 = \"The big bear and the small bear ran away.\"\n\n\nget_regex_url(r\"[Tt]he (\\w+) bear\")\n\n[Tt]he (+) bear\n\n\n\nre.findall(\n    r\"[Tt]he (\\w+) bear\",\n    sentence2\n)\n\n['big', 'small']",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/programming/02_regex.html#boundaries",
    "href": "notes/programming/02_regex.html#boundaries",
    "title": "Regular Expressions, Quickly",
    "section": "Boundaries",
    "text": "Boundaries\n\n^the == Finds ‚Äúthe‚Äù at the start of a string.\nthe$ == Finds ‚Äù the‚Äù at the end of a string.\n\\bthe\\b == Finds ‚Äúthe‚Äù in between word boundaries.\n\n\nget_regex_url(r\"^the \")\nget_regex_url(r\" the$\")\nget_regex_url(r\"\\bthe\\b\")\n\n^the\n\n\nthe$\n\n\n[(https://regexper.com/#%5Cbthe%5Cb)\n\n\n\nsentence3 = \"I saw the other bear.\"\nre.findall(\n    r\"the\",\n    sentence3\n)\n\n['the', 'the']\n\n\nThe second ‚Äúthe‚Äù there comes from inside ‚Äúother‚Äù\n\nre.findall(\n    r\"\\bthe\\b\",\n    sentence3\n)\n\n['the']\n\n\n\nsentence3\n\n'I saw the other bear.'",
    "crumbs": [
      "Notes",
      "Programming",
      "Regular Expressions, Quickly"
    ]
  },
  {
    "objectID": "notes/in_class/00_python.html",
    "href": "notes/in_class/00_python.html",
    "title": "Starting Python",
    "section": "",
    "text": "This is how python works",
    "crumbs": [
      "Notes",
      "In-class",
      "Starting Python"
    ]
  },
  {
    "objectID": "notes/in_class/00_python.html#arithmetic-math",
    "href": "notes/in_class/00_python.html#arithmetic-math",
    "title": "Starting Python",
    "section": "Arithmetic & Math",
    "text": "Arithmetic & Math\n\n8+5\n\n13\n\n\n\n2084 -          1985\n\n99",
    "crumbs": [
      "Notes",
      "In-class",
      "Starting Python"
    ]
  },
  {
    "objectID": "notes/in_class/00_python.html#variables-and-assignment",
    "href": "notes/in_class/00_python.html#variables-and-assignment",
    "title": "Starting Python",
    "section": "‚ÄúVariables‚Äù and ‚ÄúAssignment‚Äù",
    "text": "‚ÄúVariables‚Äù and ‚ÄúAssignment‚Äù\n\nfruehwald_age = 2084 - 1985\n\nTitleCase\nsnake_case\ncamelCase\n\nfruehwald_age * 12\n\n1188\n\n\n\nVariables vs Strings\n\n\"fruehwald_age\"\n\n'fruehwald_age'\n\n\n\n'fruehwald_age'\n\n'fruehwald_age'\n\n\n\njohn_favorite_color = \"purple\"\n\n\nJohn_favorite_color\n\nNameError: name 'John_favorite_color' is not defined",
    "crumbs": [
      "Notes",
      "In-class",
      "Starting Python"
    ]
  },
  {
    "objectID": "notes/in_class/00_python.html#importing",
    "href": "notes/in_class/00_python.html#importing",
    "title": "Starting Python",
    "section": "Importing",
    "text": "Importing\n\nimport re\n\n\nre.search()\n\n\n# import pathlib\n# pathlib.Path()\n\nfrom pathlib import Path\n\n\nPath()\n\nPosixPath('.')",
    "crumbs": [
      "Notes",
      "In-class",
      "Starting Python"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the website for Lin511, Computational Linguistics, taught at the University of Kentucky Spring 2024\n\nAttribution\n\nThe robot emoji in the course logo is modified from Open Emoji (link), licenced CC-BY-SA 4.0. Edited version here(svg).\n\n\n\n\n\n Back to topReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {About},\n  url = {https://lin511-2024.github.io/about.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. ‚ÄúAbout.‚Äù https://lin511-2024.github.io/about.html."
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "",
    "text": "Where:\nWhitehall, Rm 205\n\n\nWhen:\nTues & Thurs, 09:30 - 10:45\n\n\nPrereq:\nLin221\n\n\nCredits:\n3\n\n\n\n\n\n\n\n\n\n\nDr.¬†Josef Fruehwald\n\n\nemail:\njosef.fruehwald@uky.edu\n\n\noffice hours:\nMons, 12:00pm - 02:00pm\n\n\noffice hours location:\nBreckinridge, Rm 10",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#key-info",
    "href": "syllabus/syllabus.html#key-info",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "",
    "text": "Where:\nWhitehall, Rm 205\n\n\nWhen:\nTues & Thurs, 09:30 - 10:45\n\n\nPrereq:\nLin221\n\n\nCredits:\n3\n\n\n\n\n\n\n\n\n\n\nDr.¬†Josef Fruehwald\n\n\nemail:\njosef.fruehwald@uky.edu\n\n\noffice hours:\nMons, 12:00pm - 02:00pm\n\n\noffice hours location:\nBreckinridge, Rm 10",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#course-at-a-glance",
    "href": "syllabus/syllabus.html#course-at-a-glance",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "2 Course at a Glance",
    "text": "2 Course at a Glance\n\nWhat you‚Äôll learn:\n\nComputational approaches to linguistic analysis; Computational tools (python, regular expressions, Git, GitHub).\n\nWhat you‚Äôll do:\n\nIn class exercises; Programming assignments.\n\nWhat you‚Äôll need:\n\nA computer with a physical keyboard; A GitHub account.\n\nThe final-est deadline\n\nApril 30, 2024\n\nAttendance Policy\n\nAttendance is crucial for successful completion of the course, but there are no grade penalties.\n\nLate Work Policy\n\n2 day penalty free grace period on all assignments, 5% flat penalty afterwards. See Late Submissions and Re-submissions",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "3 Course Description",
    "text": "3 Course Description\nThere are two important components to this course\n\nThis is an introduction to computational linguistics, with an emphasis on linguistics. We‚Äôll be learning about approaches to computation as it relates to linguistic theory (e.g.¬†phonological rules, syntactic parsing, etc) as well as computation involved in processing linguistic data (e.g.¬†Large Language Models, Speech-to-Text etc.).\nThis will be an introduction to some practical aspects of general purpose computation, including basics of file system organization, version control, Integrated Developent Environments, command-line interfaces, and program writing (specifically in Python).\n\n\nHave you ever said one these things?\n\n‚ÄúMy computer hates me.‚Äù\n‚ÄúI‚Äôm not a tech person.‚Äù\n\nAs part of our course meetings, I‚Äôll be labelling these and other similar statements as ‚Äúnegative self-talk‚Äù. Instead, I‚Äôll encourage you to try different statements, like\n\n‚ÄúI‚Äôm not familiar with these concepts yet.‚Äù\n‚ÄúUp to now, I‚Äôve found these methods opaque.‚Äù\n\nWe can acknowledge your current struggle or confusion with computation or technology, while also acknowledging that their use is a skill, not a talent, and that skill can be built upon and improved with experience and practice.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#learning-outcomes",
    "href": "syllabus/syllabus.html#learning-outcomes",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "4 Learning Outcomes",
    "text": "4 Learning Outcomes\nAfter attending class meetings and completion of the coursework, students should be able to\n\nDescribe the computational methods used to model and process linguistic structures.\nUse Regular Expressions to search and match strings.\nWrite a python program to linguistically parse language data.\nCritically evaluate claims made about modern natural language processing applications.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials",
    "href": "syllabus/syllabus.html#course-materials",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "5 Course Materials",
    "text": "5 Course Materials\nWe will be using a mixture of textbooks and online resources for the course. These are currently available for free online. The labels SLP, NLTK and TP will be used to refer to each book in the reading schedule.\n\nSLP:\n\nDaniel Jurafsky and James H Martin. 202\\d. Speech and Language Processing: An Introduction to Natural Language Processing Computational Linguistics, and Speech Recognition Third Edition.\n\nNLTK:\n\nSteven Bird, Ewan Klein, and Edward Loper. 2009. Natural Language Processing with Python: Analyzing Text with the Natural Language Toolkit\n\nTP:\n\nAllen B. Downey. 2015. Think Python, 2nd edition",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#course-technology",
    "href": "syllabus/syllabus.html#course-technology",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "6 Course Technology",
    "text": "6 Course Technology\nAs course with a practical programming component, we‚Äôre going to be using a number of technical programs. There will be specific class time set aside for setting these up.\n\nCommand-Line Interfaces\nCommand-line Interfaces (CLI) are text-only ways to interact with your computer, including accessing its files and running programs. We will all be accessing the CLI through Visual Studio Code. For Windows users, this will also involve installing Windows Subsystem for Linux.\n\n\nPython Scripts & Jupyter Notebooks\nPython is the programming language that we‚Äôll be using to do most of our work and analysis in this course. We‚Äôll also be using extensions to the Python programming language in the form of freely available Python libraries, such as nltk and numpy.\nWe‚Äôll be writing both python scripts as well as using Jupyter notebooks to interact with python.\n\n\nVisual Studio Code\nThe fact we will be ‚Äúwriting‚Äù python scripts implies we will be writing them in something. The program we will be using for composing our programs will be Visual Studio Code. VS Code is a general purpose Integrated Development Environment (IDE).\nAs ‚Äúformal languages‚Äù, programming languages are very sensitive to any kind of typo or formatting error. The purpose IDEs is to provide you support to avoid these typos & errors in the first place, and to warn you when they exist.\n\n\nGit/Github\nGit is a ‚ÄúVersion Control System‚Äù that lets you keep track of changes on software projects. Github is a service that allows online hosting of Git projects. You will need to create a free a Github account for the course.\nThere will be a number of course assignments that you will submit via commits to GitHub.\n\n\nCanvas\nCanvas will be used to make course announcements, and to distribute assignment links.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#communications",
    "href": "syllabus/syllabus.html#communications",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "7 Communications",
    "text": "7 Communications\nI will respond to emails in a timely manner during normal working hours, but it may take longer if you email me after 5pm on weekdays, or any time during the weekend.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#course-schedule",
    "href": "syllabus/syllabus.html#course-schedule",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "8 Course Schedule",
    "text": "8 Course Schedule\nThe topics and readings listed here are the tentative schedule for the course. We may find, in the room, that some topics will take longer than initially scheduled.\n\nWeek 1\n\n\n\nDates:\n\nJan 8-12\n\n\n\n\nTopics:\n\nSetup, What is Computational Linguistics?\n\n\n\n\n\nReadings\n\nFollow posted tutorials for setting up our course technology.\nTP Chapter 1\n\n\n\n\n\nWeek 2-3\n\n\n\nDates:\n\nJan 15-26\n\n\n\n\nTopics:\n\nFiles, Text, Strings, Regular Expressions, Finite State Automata\n\n\n\n\nNo Office Hours for MLK Jr Day.\n\nReadings:\n\nCourse Notes: What is Python\nSLP Chapter 2, section 2.1 (pdf)\nTP, Chapter 2, Variables, expressions and statements\nTP Chapter 3, Functionss\n\n\n\n\n\nWeek 4-5\n\n\n\nDates:\n\nJan 29-Feb 09\n\n\n\n\nTopics:\n\nText Normalization, Tokenization, Python Variables, Python Functions\n\n\n\n\n\nReadings:\n\nSLP Chapter 2, sections 2.2, 2.3, 2.4\nTP, Chapter 10, Lists\nTP, Chapter 7, Iteration\nTP, Chapter 5, Conditionals\nNLTK Book, Chapter 3\n\n\n\n\n\nWeek 6-7\n\n\n\nDates:\n\nFeb 12 - 23\n\n\n\n\nTopics:\n\nn-grams, Corpora, Document Classification, Python Loops and Conditionals\n\n\n\n\n\nReadings\n\nSLP Chapters 3, 4, 5\n\n\n\n\n\nWeek 8-9\n\n\n\nDates:\n\nFeb 26 - Mar 08\n\n\n\n\nTopics:\n\nHidden Markov Models\n\n\n\n\n\nReadings\n\nSLP Appendix A: Hidden Markov Models\nTP Chapter 11, Dictionaries\nTP Chapter 15, Classes and Objects\n\n\n\nSpring Break\n\n\n\n\n\nWeek 10-11\n\n\n\nDates:\n\nMar 18-29\n\n\n\n\nTopics:\n\nParsing, Dependency trees\n\n\n\n\n\n\n\nWeek 12-13\n\n\n\nDates:\n\nApr 01-12\n\n\n\n\nTopics:\n\nDistributional semantics, word ‚Äúembeddings‚Äù\n\n\n\n\n\n\n\nWeek 14-15\n\n\n\nDates:\n\nApr 15-19\n\n\n\n\nTopics:\n\nNeural Network Basics, Review",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#course-evaluation",
    "href": "syllabus/syllabus.html#course-evaluation",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "9 Course Evaluation",
    "text": "9 Course Evaluation\n\n\n\n\n\n\nGrade Components\n\n\n\nWeekly Exercises\n45%\n\n\nIn-Class Exercises\n25%\n\n\nFinal Project\n20%\n\n\nEngagement\n10%\n\n\n\n\n\nGrading Scale\n\n\n\nA\n&gt;= 90\n\n\nB\n80 to 89\n\n\nC\n70 to 79\n\n\nD\n60 to 69\n\n\nE\n&lt;= 59\n\n\n\n\n\n\n\nAssignment Submission\nSome assignments will be created in GitHub Classroom, and their invite code will be posted to canvas. Some of these assignments will have ‚Äúautograding‚Äù tests enabled. These ‚Äúautogrades‚Äù are intended to be feedback to help you fine tune your code, and are not meant to be the final grade you will get for the assignment. Only grades as they are appear on Canvas are your official grade.\n\n\nFinal Project\nA final capstone project for the course. This could be a report, an extension of an earlier exercise, or some other agreed upon format.\n\n\nEngagement\nInspired by Kirby Conrod‚Äôs approach to Participation Grades\n\nThis portion of the grade is a way for me to give you credit for informal/unstructured collaborative work that you do. Participation and collaboration are strong predictors of success and learning retention, so please make an effort to find a way that works well for you to participate and engage with your colleagues.\n\nA well known process for solving programming problems is ‚ÄúRubber Duck Debugging.‚Äù It works by describing how each step of a program is supposed to work to another person or, as the name suggests, a rubber duck. Often the solution to the problem or the typo causing the bug jumps out at you during the process. Having a study buddy or study group could be really helpful if only for this purpose.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#late-submissions-and-re-submissions",
    "href": "syllabus/syllabus.html#late-submissions-and-re-submissions",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "10 Late Submissions and Re-submissions",
    "text": "10 Late Submissions and Re-submissions\nEvery graded piece of work will have a due date. After a 2 day grace period, there will be a single, flat 5% deduction from late work, whenever it is submitted between the due date and the The Final-est Deadline\n\nMidterm Grades\nI will submit midterm grades on March 08, 2024, at the end of the midterm grading window. Any unsubmitted assignments that were due before March 08 will be given a grade of 0, BUT you can still submit those assignments after March 08 for their inclusion in the final grade.\n\n\nThe Final-est Deadline\nThe final-est deadline by which to submit any material to be graded is April 30, 2024. I have to set this hard deadline in order to have enough time to conclude final grading in time for the university‚Äôs final grade submission deadline.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#group-work-and-code-sources",
    "href": "syllabus/syllabus.html#group-work-and-code-sources",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "11 Group Work and Code Sources",
    "text": "11 Group Work and Code Sources\nIt is acceptable to collaborate and confer with other students in the course. Any collaboration should be indicated in the assignment submission. You may also refer to code sources from elsewhere on the internet, as long as you also document the source, and explain what the code does. You might not receive credit for code which has been copied wholesale from another online source or from another student without credit or documentation.\n\nLarge Language Model (a.k.a. AI) Generated Code\nThere are a number of services that will generate code based on natural language queries. Some words of warning:\n\nFluent BS\nLarge Language Models have been found to generate code that looks superficially correct, but often does not actually run properly, or do what the human asker wanted. Being able to successfully identify where or why code does not work correctly is not always straight forward. This issue led the Q&A site StackOverflow to ban submissions generated by LLMs, stating\n\n[‚Ä¶] because GPT is good enough to convince users of the site that the answer holds merit, signals the community typically use to determine the legitimacy of their peers‚Äô contributions frequently fail to detect severe issues with GPT-generated answers.\n\n\n\nExplain what the code does\nAs stated above, you should provide credit to any external sources you turned to for code help, and explain what the resulting code does.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#attendance-and-engagement",
    "href": "syllabus/syllabus.html#attendance-and-engagement",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "12 Attendance and Engagement",
    "text": "12 Attendance and Engagement\nYou are expected to attend all scheduled course meetings. It would be helpful, but not necessary, if you let me know in advance if you are going to miss any lectures.\nIf you feel sick in any way, including but not limited to the well-known symptoms of COVID-19 (loss of taste or smell, a new and persistent cough, high fever, etc), do not come to class. There are other mechanisms for demonstrating engagement than attending lectures.\nI will also expect all of us in the course to treat each other with respect and civility in all aspects of the course, including\n\nIn the audio of a Zoom meeting\nIn the text chat of a Zoom meeting\nOn any course discussion boards or other forums.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#academic-conduct",
    "href": "syllabus/syllabus.html#academic-conduct",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "13 Academic Conduct",
    "text": "13 Academic Conduct\nUK Senate rules on academic offences\nAppropriating someone else‚Äôs work and portraying it as your own is cheating. Collaborating with someone and portraying that work as solely your own is cheating. Obtaining answers to homework assignments or exams from previous semesters is cheating. Using an internet search engine to look up a question and reporting that answer as your own is cheating. Falsifying data or experimental results is cheating. If you are unsure about whether a specific action is cheating, you may check with me.\nThe minimum penalty for a first offense is a zero on the assignment on which the offense occurred. If the offense is considered severe or if the student has other academic offenses on their record, more serious penalties, up to suspension from the University may be imposed.\nWhen students submit work purporting to be their own, but which in any way borrows ideas, organization, wording or anything else from another source without appropriate acknowledgement of the fact, the students are guilty of plagiarism. Plagiarism includes reproducing someone else‚Äôs work, whether it be a published article, chapter of a book, a paper from a friend or some file, or something similar to this. Plagiarism also includes the practice of employing or allowing another person to alter or revise the work which a student submits as their own, whoever that other person may be.\nStudents may discuss assignments among themselves or with an instructor or tutor, but when the actual work is done, it must be done by the student, and the student alone. When a student‚Äôs assignment involves research in outside sources of information, the student must carefully acknowledge exactly what, where and how they employed them. If the words of someone else are used, the student must put quotation marks around the passage in question and add an appropriate indication of its origin. Making simple changes while leaving the organization, content and phraseology intact is plagiaristic. However, nothing in these Rules shall apply to those ideas which are so generally and freely circulated as to be a part of the public domain (University Senate Rules Section 6.3.1).",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#university-academic-policy-statements",
    "href": "syllabus/syllabus.html#university-academic-policy-statements",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "14 University Academic Policy Statements",
    "text": "14 University Academic Policy Statements\nLink to University Senate Academic Policy Statements\n\nExcused Absences and Acceptable Excuses\n\nExcused Absences: Senate Rules 5.2.5.2.1 defines the following as acceptable reasons for excused absences: (a) significant illness, (b) death of a family member, (c) trips for members of student organizations sponsored by an educational unit, trips for University classes, and trips for participation in intercollegiate athletic events, (d) major religious holidays, (e) interviews for graduate/professional school or full-time employment post-graduation, and (f) other circumstances found to fit ‚Äúreasonable cause for nonattendance‚Äù by the instructor of record. Students should notify the professor of absences prior to class when possible.\nIf a course syllabus requires specific interactions (e.g., with the instructor or other students), in situations where a student‚Äôs total EXCUSED absences exceed 1/5 (or 20%) of the required interactions for the course, the student shall have the right to request and receive a ‚ÄúW,‚Äù or the Instructor of Record may award an ‚ÄúI‚Äù for the course if the student declines a ‚ÄúW.‚Äù (Senate Rules 5.2.5.2.3.1)\n\n\n\nReligious Observances\n\nReligious Observances: Students anticipating an absence for a major religious holiday are responsible for notifying the instructor in writing of anticipated absences due to their observance of such holidays. Senate Rules 5.2.5.2.1(4) requires faculty to include any notification requirements within the syllabus. If no requirement is specified, two weeks prior to the absence is reasonable and should not be given any later. Information regarding major religious holidays may be obtained through the Ombud‚Äôs websiteor calling 859-257-3737.\n\n\n\nVerification of Absences\n\nVerification of Absences:Students may be asked to verify their absences in order for them to be considered excused. Senate Rule 5.2.5.2.1 states that faculty have the right to request appropriate verification when students claim an excused absence due to: significant illness; death in the household, trips for classes, trips sponsored by an educational unit and trips for participation related to intercollegiate athletic events; and interviews for full-time job opportunities after graduation and interviews for graduate and professional school. (Appropriate notification of absences due to University-related trips is required prior to the absence when feasible and in no case more than one week after the absence.)\n\n\n\nMake-Up Work\n\nMake-Up Work: Students missing any graded work due to an excused absence are responsible: for informing the Instructor of Record about their excused absence within one week following the period of the excused absence (except where prior notification is required); and for making up the missed work. The instructor must give the student an opportunity to make up the work and/or the exams missed due to the excused absence, and shall do so, if feasible, during the semester in which the absence occurred. The instructor shall provide the student with an opportunity to make up the graded work and may not simply calculate the student‚Äôs grade on the basis of the other course requirements, unless the student agrees in writing. According to SR 5.2.5.2.2, if a student adds a class after the first day of classes and misses graded work, the instructor must provide the student with an opportunity to make up any graded work.\n\n\n\nExcused Absences for Military Duties\n\nExcused Absences for Military Duties: If a student is required to be absent for one-fifth or less of the required course interactions (e.g., class meetings) due to military duties, the following procedure (per SR 5.2.5.2.3.2) shall apply:\n\nOnce a student is aware of a call to duty, the student shall provide a copy of the military orders to the Director of the Veterans Resource Center. The student shall also provide the Director with a list of his/her courses and instructors.\nThe Director will verify the orders with the appropriate military authority, and on behalf of the military student, notify each Instructor of Record via Department Letterhead as to the known extent of the absence.\nThe Instructor of Record shall not penalize the student‚Äôs absence in any way and shall provide accommodations and timeframes so that the student can make up missed assignments, quizzes, and tests in a mutually agreed upon manner.\n\n\n\n\nUnexcused Absences\n\nUnexcused Absences: If an attendance/interaction policy is not stated in the course syllabus or the policy does not include a penalty to the student, the instructor cannot penalize a student for any unexcused absences. (SR 5.2.5.2.3.3)\n\n\n\nPrep Week and Reading Days\n\nPrep Week and Reading Days: Per Senate Rules 5.2.5.6, the last week of instruction of a regular semester is termed ‚ÄúPrep Week.‚Äù This phrase also refers to the last three days of instruction of the summer session and winter intersession. The Prep Week rule applies to ALL courses taught in the fall semester, spring semester, and summer session, including those taught by distance learning or in a format that has been compressed into less than one semester or session. This rule does not apply to courses in professional programs in colleges that have University Senate approval to have their own calendar.\nMake-up exams and quizzes are allowed during Prep Week. In cases of ‚ÄúTake Home‚Äù final examinations, students shall not be required to return the completed examination before the regularly scheduled examination period for that course. No written examinations, including final examinations, may be scheduled during the Prep Week. No quizzes may be given during Prep Week. No project/lab practicals/paper/presentation deadlines or oral/listening examinations may fall during the Prep Week unless it was scheduled in the syllabus AND the course has no final examination (or assignment that acts as a final examination) scheduled during finals week. (A course with a lab component may schedule the lab practical of the course during Prep Week if the lab portion does not also require a Final Examination during finals week.) Class participation and attendance grades are permitted during Prep Week. The Senate Rules permit continuing into Prep Week regularly assigned graded homework that was announced in the class syllabus.\nFor fall and spring semester, the Thursday and Friday of Prep Week are study days (i.e.¬†‚ÄúReading Days‚Äù). There cannot be any required ‚Äúinteractions‚Äù on a Reading Day. ‚ÄúInteractions‚Äù include participation in an in-class or online discussion, attendance at a guest lecture, or uploading an assignment. See Senate Rules 9.1 for a more complete description of required interactions.\n\n\n\nAccommodations Due to Disability\n\nAccommodations Due to Disability: In accordance with federal law, if you have a documented disability that requires academic accommodations, please inform your instructor as soon as possible during scheduled office hours. In order to receive accommodations in a course, you must provide your instructor with a Letter of Accommodation from the Disability Resource Center (DRC). The DRC coordinates campus disability services available to students with disabilities. It is located on the corner of Rose Street and Huguelet Drive in the Multidisciplinary Science Building, Suite 407. You can reach them via phone at (859) 257-2754, via email (drc@uky.edu) or visit their website (uky.edu/DisabilityResourceCenter). DRC accommodations are not retroactive and should therefore be established with the DRC as early in the semester as is feasible.\n\n\n\nNon-Discrimination Statement and Title IX Information\n\nNon-discrimination and Title IX policy: In accordance with federal law, UK is committed to providing a safe learning, living, and working environment for all members of the University community. The University maintains a comprehensive program which protects all members from discrimination, harassment, and sexual misconduct. For complete information about UK‚Äôs prohibition on discrimination and harassment on aspects such as race, color, ethnic origin, national origin, creed, religion, political belief, sex, and sexual orientation, please see the electronic version of UK‚Äôs Administrative Regulation 6:1 (‚ÄúPolicy on Discrimination and Harassment‚Äù) (https://www.uky.edu/regs/ar6-1). In accordance with Title IX of the Education Amendments of 1972, the University prohibits discrimination and harassment on the basis of sex in academics, employment, and all of its programs and activities. Sexual misconduct is a form of sexual harassment in which one act is severe enough to create a hostile environment based on sex and is prohibited between members of the University community and shall not be tolerated. For more details, please see the electronic version of Administrative Regulations 6:2 (‚ÄúPolicy and Procedures for Addressing and Resolving Allegations of Sexual Harassment Under Title IX and Other Forms of Sexual Misconduct‚Äù) (https://www.uky.edu/regs/sites/www.uky.edu.regs/files/files/ar/ar_6.2-in...). Complaints regarding violations of University policies on discrimination, harassment, and sexual misconduct are handled by the Office of Institutional Equity and Equal Opportunity (Institutional Equity), which is located in 13 Main Building and can be reached by phone at (859) 257-8927. You can also visit Institutional Equity‚Äôs website (https://www.uky.edu/eeo).\nFaculty members are obligated to forward any report made by a student related to discrimination, harassment, and sexual misconduct to the Office of Institutional Equity. Students can confidentially report alleged incidences through the Violence Intervention and Prevention Center (https://www.uky.edu/vipcenter), Counseling Center (https://www.uky.edu/counselingcenter), or University Health Service (https://ukhealthcare.uky.edu/university-health-service/student-health).\nReports of discrimination, harassment, or sexual misconduct may be made via the Institutional Equity‚Äôs website (https://www.uky.edu/eeo); at that site, click on ‚ÄúMake a Report‚Äù on the left-hand side of the page.\n\n\n\nRegular and Substantive Interaction\n\nRegular and Substantive Interaction: All credit-bearing courses must support regular and substantive interaction (RSI) between the students and the instructor, regardless of the course‚Äôs delivery mode (e.g., in-person, hybrid, or online). Courses satisfy this requirement when course participants meet regularly as prescribed in SR 10.6, and the Instructor of Record substantively interacts with students in at least two of the following ways: provides direct instruction; assesses students‚Äô learning; provides information or responds to students‚Äô questions; and facilitates student discussions. Some exceptions allowed as per SACSCOC. For further information about the RSI requirement, see the Compliance Resources link on the Teaching, Learning and Academic Innovation Compliance page.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus/syllabus.html#diversity-equity-and-inclusion",
    "href": "syllabus/syllabus.html#diversity-equity-and-inclusion",
    "title": "Lin511-001 - Computational Linguistics",
    "section": "15 Diversity, Equity and Inclusion",
    "text": "15 Diversity, Equity and Inclusion\nUK Senate DEI Statement\nThe University of Kentucky is committed to our core values of diversity and inclusion, mutual respect and human dignity, and a sense of community (Governing Regulations XIV). We acknowledge and respect the seen and unseen diverse identities and experiences of all members of the university community (https://www.uky.edu/regs/gr14). These identities include but are not limited to those based on race, ethnicity, gender identity and expressions, ideas and perspectives, religious and cultural beliefs, sexual orientation, national origin, age, ability, and socioeconomic status. We are committed to equity and justice and providing a learning and engaging community in which every member is engaged, heard, and valued.\nWe strive to rectify and change behavior that is inconsistent with our principles and commitment to diversity, equity, and inclusion. If students encounter such behavior in a course, they are encouraged to speak with the instructor of record and/or the Office of Institutional Equity and Equal Opportunity. Students may also contact a faculty member within the department, program director, the director of undergraduate or graduate studies, the department chair, any college administrator, or the dean. All of these individuals are mandatory reporters under University policies.",
    "crumbs": [
      "Home",
      "Syllabus"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Linguistics (Spring 2024)",
    "section": "",
    "text": "Welcome to the Lin511 Computational Linguistics website. This course is being taught in the University of Kentucky‚Äôs Linguistics Department in Spring 2024\nIf you are visiting on a mobile device, site navigation can be found under the ‚Äúhamburger‚Äù at the top.\n\n\n\n Back to topReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Computational {Linguistics} {(Spring} 2024)},\n  url = {https://lin511-2024.github.io/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. ‚ÄúComputational Linguistics (Spring\n2024).‚Äù https://lin511-2024.github.io/.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "syllabus/schedule.html",
    "href": "syllabus/schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Week 1\n\n\n\nDates:\n\nJan 8-12\n\n\n\n\nTopics:\n\nSetup, What is Computational Linguistics?\n\n\n\n\n\nReadings\n\nFollow posted tutorials for setting up our course technology.\nTP Chapter 1\n\n\n\n\n\nWeek 2-3\n\n\n\nDates:\n\nJan 15-26\n\n\n\n\nTopics:\n\nFiles, Text, Strings, Regular Expressions, Finite State Automata\n\n\n\n\nNo Office Hours for MLK Jr Day.\n\nReadings:\n\nCourse Notes: What is Python\nSLP Chapter 2, section 2.1 (pdf)\nTP, Chapter 2, Variables, expressions and statements\nTP Chapter 3, Functionss\n\n\n\n\n\nWeek 4-5\n\n\n\nDates:\n\nJan 29-Feb 09\n\n\n\n\nTopics:\n\nText Normalization, Tokenization, Python Variables, Python Functions\n\n\n\n\n\nReadings:\n\nSLP Chapter 2, sections 2.2, 2.3, 2.4\nTP, Chapter 10, Lists\nTP, Chapter 7, Iteration\nTP, Chapter 5, Conditionals\nNLTK Book, Chapter 3\n\n\n\n\n\nWeek 6-7\n\n\n\nDates:\n\nFeb 12 - 23\n\n\n\n\nTopics:\n\nn-grams, Corpora, Document Classification, Python Loops and Conditionals\n\n\n\n\n\nReadings\n\nSLP Chapters 3, 4, 5\n\n\n\n\n\nWeek 8-9\n\n\n\nDates:\n\nFeb 26 - Mar 08\n\n\n\n\nTopics:\n\nHidden Markov Models\n\n\n\n\n\nReadings\n\nSLP Appendix A: Hidden Markov Models\nTP Chapter 11, Dictionaries\nTP Chapter 15, Classes and Objects\n\n\n\nSpring Break\n\n\n\n\n\nWeek 10-11\n\n\n\nDates:\n\nMar 18-29\n\n\n\n\nTopics:\n\nParsing, Dependency trees\n\n\n\n\n\n\n\nWeek 12-13\n\n\n\nDates:\n\nApr 01-12\n\n\n\n\nTopics:\n\nDistributional semantics, word ‚Äúembeddings‚Äù\n\n\n\n\n\n\n\nWeek 14-15\n\n\n\nDates:\n\nApr 15-19\n\n\n\n\nTopics:\n\nNeural Network Basics, Review\n\n\n\n\n\n\n\n\n Back to topReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Course {Schedule}},\n  url = {https://lin511-2024.github.io/syllabus/schedule.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. ‚ÄúCourse Schedule.‚Äù https://lin511-2024.github.io/syllabus/schedule.html.",
    "crumbs": [
      "Home",
      "Schedule"
    ]
  },
  {
    "objectID": "notes/index.html",
    "href": "notes/index.html",
    "title": "Meeting Notes",
    "section": "",
    "text": "These are the notes for our regular meetings. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetup Notes\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 8, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nRegular Languages and Finite State Machines\n\n\n\n\n\n\ncompling\n\n\n\n\n\n\n\n\n\nJan 16, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nFSA in-class notes\n\n\n\n\n\n\ncompling\n\n\n\n\n\n\n\n\n\nJan 16, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nPushdown Automata and Context Free Languages\n\n\n\n\n\n\ncompling\n\n\n\n\n\n\n\n\n\nJan 23, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nRegular Expressions, Quickly\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 25, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nMore Python: Poetry, Lists, Loops\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJan 30, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nTokenization\n\n\n\n\n\n\ncompling\n\n\n\n\n\n\n\n\n\nFeb 6, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with Tokenizers\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nFeb 8, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nngrams\n\n\n-or- What if we could parse natural language with a finite state automaton?\n\n\n\ncompling\n\n\n\n\n\n\n\n\n\nFeb 13, 2024\n\n\nJosef Fruehwald\n\n\n\n\n\n\n\n\n\n\n\n\nPython basics\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\nJosef Fruehwald\n\n\n\n\n\n\nNo matching items\n\n Back to topReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Meeting {Notes}},\n  url = {https://lin511-2024.github.io/notes},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. ‚ÄúMeeting Notes.‚Äù https://lin511-2024.github.io/notes.",
    "crumbs": [
      "Notes",
      "Notes Home"
    ]
  },
  {
    "objectID": "notes/programming/01_Python_basics.html",
    "href": "notes/programming/01_Python_basics.html",
    "title": "Python basics",
    "section": "",
    "text": "print(1)\n\n1\n\n\n\nprint(\"hello\")\n\nhello\n\n\n\nprint(2 + 2)\n\n4\n\n\n\nx = 1\ny = 10\n\nprint(x + y)\n\n11\n\n\n\nword1 = \"Hello\"\nword2 = \" World!\"\n\nprint(word1 + word2)\n\nHello World!\n\n\n\nprint(True)\n\nTrue\n\n\n\nprint(False)\n\nFalse\n\n\n\nprint(True and False)\n\nFalse\n\n\n\n\n\n Back to topReuseCC-BY-SA 4.0CitationBibTeX citation:@online{fruehwald,\n  author = {Fruehwald, Josef},\n  title = {Python Basics},\n  url = {https://lin511-2024.github.io/notes/programming/01_Python_basics.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nFruehwald, Josef. n.d. ‚ÄúPython Basics.‚Äù https://lin511-2024.github.io/notes/programming/01_Python_basics.html.",
    "crumbs": [
      "Notes",
      "Programming",
      "Python basics"
    ]
  },
  {
    "objectID": "notes/programming/04_tokenizers.html",
    "href": "notes/programming/04_tokenizers.html",
    "title": "Working with Tokenizers",
    "section": "",
    "text": "Let‚Äôs get a little bit practical with\nFor this lesson, we‚Äôre going to use gutenbergpy and nltk, but if you try to import them right now, like they were in the course notes, you‚Äôre going to get an error.",
    "crumbs": [
      "Notes",
      "Programming",
      "Working with Tokenizers"
    ]
  },
  {
    "objectID": "notes/programming/04_tokenizers.html#installing-gutenbergpy",
    "href": "notes/programming/04_tokenizers.html#installing-gutenbergpy",
    "title": "Working with Tokenizers",
    "section": "Installing gutenbergpy",
    "text": "Installing gutenbergpy\nWe‚Äôll need to install these packages. We‚Äôll start with gutenbergpy.\n\n\npython\n\n! pip install gutenbergpy\n\nNow, we can import the functions to get Project Gutenberg books. The url for Moby Dick on Project Gutenberg is https://www.gutenberg.org/ebooks/2701. That last part of the url is the ID of the book, which we can pass to get_text_by_id() to download the book.\n\n\npython\n\nfrom gutenbergpy.textget import get_text_by_id, strip_headers\n\nbook_id = 2701\n\nraw_book = get_text_by_id(book_id)\n\nraw_book contains the book with all of its legal headers and footers. we can remove the headers and footers with strip_headers()\n\n\npython\n\nbook_byte = strip_headers(raw_book)\n\nOne last hitch here has to do with ‚Äúcharacter encoding‚Äù. We need to ‚Äúdecode‚Äù it.\n\n\npython\n\nbook_clean = book_byte.decode(\"utf-8\")\n\nLet‚Äôs wrap that up into one function we can re-run on new IDs\n\n\npython\n\ndef get_clean_book(book_id):\n    \"\"\"Get the cleaned book\n\n    Args:\n        book_id (str|int): The book id\n\n    Returns:\n        (str): The full book\n    \"\"\"\n    raw_book = get_text_by_id(book_id)\n    book_byte = strip_headers(raw_book)\n    book_clean = book_byte.decode(\"utf-8\")\n\n    return book_clean\n\nGo ahead and point get_clean_book() at another book id.",
    "crumbs": [
      "Notes",
      "Programming",
      "Working with Tokenizers"
    ]
  },
  {
    "objectID": "notes/programming/04_tokenizers.html#nltk-tokenization",
    "href": "notes/programming/04_tokenizers.html#nltk-tokenization",
    "title": "Working with Tokenizers",
    "section": "NLTK tokenization",
    "text": "NLTK tokenization\nLet‚Äôs tokenize one of our books with nltk.tokenize.word_tokenize().\n\nSteps\n\nInstall nltk.\nTry tokenizing your book.\n\nIt might not go right at first. You can double check what to do here in the course notes.",
    "crumbs": [
      "Notes",
      "Programming",
      "Working with Tokenizers"
    ]
  },
  {
    "objectID": "notes/programming/04_tokenizers.html#lets-try-spacy",
    "href": "notes/programming/04_tokenizers.html#lets-try-spacy",
    "title": "Working with Tokenizers",
    "section": "Lets try spacy",
    "text": "Lets try spacy\nTo work with spacy, we need to:\n\nInstall spacy\nInstall one of the spacy models.\n\n\nThe steps\n\nGo to the spacy website\nCan you find the code to successfully install it and its language model?\n\n\n\npython\n\n## Installation\n\nLet‚Äôs tokenize a book.\n\n\npython\n\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")\n\n\n\npython\n\nimport re\nfirst_para = re.findall(\n    r\"Call me Ishmael.*?\\n\\n\", \n    book_clean, \n    re.DOTALL)[0]\n\n\n\npython\n\npara_doc = nlp(first_para)\n\nThe output of nlp is actually a complex object enriched with a lot of information that we can access a few different ways.\n\n\npython\n\npara_doc\n\nCall me Ishmael. Some years ago‚Äînever mind how long precisely‚Äîhaving\nlittle or no money in my purse, and nothing particular to interest me\non shore, I thought I would sail about a little and see the watery part\nof the world. It is a way I have of driving off the spleen and\nregulating the circulation. Whenever I find myself growing grim about\nthe mouth; whenever it is a damp, drizzly November in my soul; whenever\nI find myself involuntarily pausing before coffin warehouses, and\nbringing up the rear of every funeral I meet; and especially whenever\nmy hypos get such an upper hand of me, that it requires a strong moral\nprinciple to prevent me from deliberately stepping into the street, and\nmethodically knocking people‚Äôs hats off‚Äîthen, I account it high time to\nget to sea as soon as I can. This is my substitute for pistol and ball.\nWith a philosophical flourish Cato throws himself upon his sword; I\nquietly take to the ship. There is nothing surprising in this. If they\nbut knew it, almost all men in their degree, some time or other,\ncherish very nearly the same feelings towards the ocean with me.\n\n\nTo get any particular token out, you can do ordinary indexing.\n\n\npython\n\npara_doc[2]\n\nIshmael\n\n\nTo get the actual text of a token, we need to get its .text attribute.\n\n\npython\n\npara_doc[2].text\n\n'Ishmael'\n\n\nThere‚Äôs lots of great stuff we can get out, like each sentence.\n\n\npython\n\nlist(para_doc.sents)[0]\n\nCall me Ishmael.\n\n\nOr the parts of speech of each token.\n\n\npython\n\nfirst_sent = list(para_doc.sents)[0]\n[x.pos_ for x in first_sent]\n\n['VERB', 'PRON', 'PROPN', 'PUNCT']\n\n\n\n\npython\n\n[x.morph for x in first_sent]\n\n[VerbForm=Inf,\n Case=Acc|Number=Sing|Person=1|PronType=Prs,\n Number=Sing,\n PunctType=Peri]",
    "crumbs": [
      "Notes",
      "Programming",
      "Working with Tokenizers"
    ]
  },
  {
    "objectID": "notes/programming/04_tokenizers.html#byte-pair-encoding",
    "href": "notes/programming/04_tokenizers.html#byte-pair-encoding",
    "title": "Working with Tokenizers",
    "section": "Byte Pair Encoding",
    "text": "Byte Pair Encoding\nWe can install and use the byte pair encoder from Open AI like so:\n\n\npython\n\nimport tiktoken\nenc = tiktoken.encoding_for_model(\"gpt-4\")\n\n\n\npython\n\nfirst_encoded = enc.encode(first_para)\nfirst_encoded[0:10]\n\n[7368, 757, 57704, 1764, 301, 13, 4427, 1667, 4227, 2345]\n\n\nThis looks like a bunch of numbers, because this is actually saying ‚ÄúThe first word is the 7368th token in the vocabulary list.‚Äù To get the actual text of this token, we need to ‚Äúdecode‚Äù it.\n\n\npython\n\nenc.decode([7368])\n\n'Call'\n\n\nYou can just grab random tokens from the vocabulary like this\n\n\npython\n\nenc.decode([2024])\n\n' ter'\n\n\n\nTraining your own byte pair encoding\nWe can train or own byte pair encoder with the sentencepiece library.\n\n\npython\n\nimport sentencepiece as spm\nfrom pathlib import Path\n\n\n\npython\n\noutput = Path(\"book_clean.txt\")\noutput.write_text(book_clean)\n\n1218929\n\n\n\n\npython\n\nspm.SentencePieceTrainer.train(\n    input = output,\n    model_prefix = \"mine\",\n    vocab_size = 1000,\n    model_type = \"bpe\"\n)\n\n\n\npython\n\nmy_spm = spm.SentencePieceProcessor(model_file='mine.model')\n\n\n\npython\n\nmy_para = my_spm.encode_as_pieces(first_para)\nmy_para[0:20]\n\n['‚ñÅC',\n 'all',\n '‚ñÅme',\n '‚ñÅI',\n 'sh',\n 'm',\n 'a',\n 'el',\n '.',\n '‚ñÅS',\n 'ome',\n '‚ñÅyears',\n '‚ñÅag',\n 'o',\n '‚Äî',\n 'n',\n 'ever',\n '‚ñÅmind',\n '‚ñÅhow',\n '‚ñÅlong']\n\n\n\n\npython\n\nmy_spm.encode_as_pieces(\"Who is Josef Fruehwald\")\n\n['‚ñÅWh', 'o', '‚ñÅis', '‚ñÅJ', 'ose', 'f', '‚ñÅF', 'r', 'ue', 'h', 'w', 'a', 'ld']",
    "crumbs": [
      "Notes",
      "Programming",
      "Working with Tokenizers"
    ]
  },
  {
    "objectID": "notes/programming/00_setup.html",
    "href": "notes/programming/00_setup.html",
    "title": "Setup Notes",
    "section": "",
    "text": "We‚Äôll need to get our systems setup to work properly with the tools we‚Äôll be using this semester.\n\n\n\n\n\n\nIf you ware using a windows computer, I‚Äôll ask you to install Windows Subsystem for Linux like so:\n\nFollow the tutorial here for enabling and installing WSL\nInstall VS Code\nWork through the first section of this tutorial, stopping after you connect to WSL\n\n\n\n\n\n\n\n\nInstall VS Code\n\n\n\n\n\n\n\n\n\nWe‚Äôll be using a program called pyenv to manage the versions of python we use. To install pyenv, open the VSCode Command Palette (with ) which will open the command line interface. Then,\n\ncopy this line of code code from this page ()\n\n\nbash\n\ncurl https://pyenv.run | bash\n\nPaste it into the terminal (()\nHit enter.\n\nOnce that has successfully finished:\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.zshrc\n\n\nIf you get an error.\n\n\nRun this\n\n\nbash\n\ntouch ~/.zshrc\nopen ~/.zshrc\n\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.bashrc\n\n\nIf you get an error\n\n\nRun ths\n\n\nbash\n\ntouch ~/.bashrc\nopen ~/.bashrc\n\n\n\n\n\n\nPaste the following into the window that opens.\n\n\nsh\n\nexport PYENV_ROOT=\"$HOME/.pyenv\"\n[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n\nSave it\n\n\n\n\nClose and reopen the terminal window\nCopy-Paste the following lines of code\n\n\nbash\n\npyenv install 3.11\npyenv global 3.11\npyenv virtualenv 3.11 Lin511\npyenv activate Lin511\nThis will have installed a recent version of python onto your computer, and created a ‚Äúvirtual environment‚Äù for the class.\n\n\n\n\n\n\n\nMake sure you change the email and name to the email and username you use for Github!\n\nIn the terminal, set your git email address:\n\n\nbash\n\ngit config --global user.email \"you@example.com\"\n\nSet your username.\n\n\nbash\n\ngit config --global user.name \"Your Name\"\nThen, follow these tutorials from github:\n\nGenerating a new SSH Key\nAdding your ssh key to github",
    "crumbs": [
      "Notes",
      "Programming",
      "Setup Notes"
    ]
  },
  {
    "objectID": "notes/programming/00_setup.html#setup",
    "href": "notes/programming/00_setup.html#setup",
    "title": "Setup Notes",
    "section": "",
    "text": "We‚Äôll need to get our systems setup to work properly with the tools we‚Äôll be using this semester.\n\n\n\n\n\n\nIf you ware using a windows computer, I‚Äôll ask you to install Windows Subsystem for Linux like so:\n\nFollow the tutorial here for enabling and installing WSL\nInstall VS Code\nWork through the first section of this tutorial, stopping after you connect to WSL\n\n\n\n\n\n\n\n\nInstall VS Code\n\n\n\n\n\n\n\n\n\nWe‚Äôll be using a program called pyenv to manage the versions of python we use. To install pyenv, open the VSCode Command Palette (with ) which will open the command line interface. Then,\n\ncopy this line of code code from this page ()\n\n\nbash\n\ncurl https://pyenv.run | bash\n\nPaste it into the terminal (()\nHit enter.\n\nOnce that has successfully finished:\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.zshrc\n\n\nIf you get an error.\n\n\nRun this\n\n\nbash\n\ntouch ~/.zshrc\nopen ~/.zshrc\n\n\n\n\n\n\n\n\nRun this\n\n\nbash\n\nopen ~/.bashrc\n\n\nIf you get an error\n\n\nRun ths\n\n\nbash\n\ntouch ~/.bashrc\nopen ~/.bashrc\n\n\n\n\n\n\nPaste the following into the window that opens.\n\n\nsh\n\nexport PYENV_ROOT=\"$HOME/.pyenv\"\n[[ -d $PYENV_ROOT/bin ]] && export PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\n\nSave it\n\n\n\n\nClose and reopen the terminal window\nCopy-Paste the following lines of code\n\n\nbash\n\npyenv install 3.11\npyenv global 3.11\npyenv virtualenv 3.11 Lin511\npyenv activate Lin511\nThis will have installed a recent version of python onto your computer, and created a ‚Äúvirtual environment‚Äù for the class.\n\n\n\n\n\n\n\nMake sure you change the email and name to the email and username you use for Github!\n\nIn the terminal, set your git email address:\n\n\nbash\n\ngit config --global user.email \"you@example.com\"\n\nSet your username.\n\n\nbash\n\ngit config --global user.name \"Your Name\"\nThen, follow these tutorials from github:\n\nGenerating a new SSH Key\nAdding your ssh key to github",
    "crumbs": [
      "Notes",
      "Programming",
      "Setup Notes"
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#single-quotes-vs-backticks",
    "href": "notes/concepts/01_keyboarding.html#single-quotes-vs-backticks",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "Single Quotes vs Backticks",
    "text": "Single Quotes vs Backticks\nIt‚Äôs important to distinguish between single quotes: ' and backticks `. They look similar, but aren‚Äôt interchangeable.\nThe backtick key is highlighted in the images of the keyboards below, in the top left side.\n\nPCMac",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#slash-vs-backslash-.",
    "href": "notes/concepts/01_keyboarding.html#slash-vs-backslash-.",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "Slash (/) vs backslash (\\).",
    "text": "Slash (/) vs backslash (\\).\nThese different symbols will do different things, and aren‚Äôt interchangeable!\n\nSlash (/) location\n\nPCMac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBackslash (\\) location\n\nPCMac",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#the-tilde-key.",
    "href": "notes/concepts/01_keyboarding.html#the-tilde-key.",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "The tilde ~ key.",
    "text": "The tilde ~ key.\nTo type the tilde1 key you have to hold Shift+`Shift+`.\n\nPCMac",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#the-caret",
    "href": "notes/concepts/01_keyboarding.html#the-caret",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "The caret ^",
    "text": "The caret ^\nYou can get the caret symbol with Shift+6Shift+6\n\nPCMac",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#the-pipe",
    "href": "notes/concepts/01_keyboarding.html#the-pipe",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "The Pipe |",
    "text": "The Pipe |\nYou can get the pipe, or vertical bar, with Shift+\\Shift+\\.\n\nPCMac",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#side-note-smart-quotes",
    "href": "notes/concepts/01_keyboarding.html#side-note-smart-quotes",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "Side Note: ‚ÄúSmart Quotes‚Äù",
    "text": "Side Note: ‚ÄúSmart Quotes‚Äù\nIf, at some point, you copy-paste text from the internet into your code or a text file, you might wind up with ‚Äúsmart quotes‚Äù that make things work weird!\n\n\n\nRegular Quotes\nSmart Quotes\n\n\n\n\n\"regular\"\n‚Äúsmart‚Äù\n\n\n'regular'\n‚Äòsmart‚Äô\n\n\n\nBe careful not to have smart quotes cropping up in your code or data!",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/01_keyboarding.html#footnotes",
    "href": "notes/concepts/01_keyboarding.html#footnotes",
    "title": "‚ÄúWhere is the ‚Ä¶ key?‚Äù",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPronunciations include [t…™l.d…ô] and [t…™l.di]‚Ü©Ô∏é",
    "crumbs": [
      "Notes",
      "Concepts",
      "\"Where is the ... key?\""
    ]
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html",
    "href": "notes/concepts/03_navigating-directories.html",
    "title": "Navigating Directories",
    "section": "",
    "text": "Some of what we‚Äôll be doing in class will involve interacting with your computer through a ‚ÄúCommand Line Interface.‚Äù Command line interacts are purely text based way to interact with your computer. It‚Äôs your same exact computer, just a different way of using it without using icons, or clicking.¬†\n\n\nIn macOS, we can access a command line interface using the program Terminal. You can find Terminal in your Applications inside the folder called Utilities, or just by typing in ‚ÄúTerminal‚Äù into Spotlight search.\n\n\n\nFor now, on Windows, I‚Äôd recommend using PowerShell. You can launch PowerShell by searching for it in the Start menu.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Navigating Directories"
    ]
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#command-line-interface",
    "href": "notes/concepts/03_navigating-directories.html#command-line-interface",
    "title": "Navigating Directories",
    "section": "",
    "text": "Some of what we‚Äôll be doing in class will involve interacting with your computer through a ‚ÄúCommand Line Interface.‚Äù Command line interacts are purely text based way to interact with your computer. It‚Äôs your same exact computer, just a different way of using it without using icons, or clicking.¬†\n\n\nIn macOS, we can access a command line interface using the program Terminal. You can find Terminal in your Applications inside the folder called Utilities, or just by typing in ‚ÄúTerminal‚Äù into Spotlight search.\n\n\n\nFor now, on Windows, I‚Äôd recommend using PowerShell. You can launch PowerShell by searching for it in the Start menu.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Navigating Directories"
    ]
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#getting-your-bearings",
    "href": "notes/concepts/03_navigating-directories.html#getting-your-bearings",
    "title": "Navigating Directories",
    "section": "Getting your Bearings",
    "text": "Getting your Bearings\nWhen you first launch your command line interface, it will look something like this:\n\n\n\nCommand Line Interface\n\n\nThis is obviously scary looking, and it doesn‚Äôt give you much hint as to what to do next. The important to thing to keep in mind is that while you are using the command line interface¬†you are inside of a folder. There are two commands I recommend using over and over again to figure out where you are, and where you can go.\n\n‚ÄúThe Prompt‚Äù\nWe call the the space waiting for us to type in something the ‚Äúprompt‚Äù. It usually has a symbol before it. Depending on your system, it might be any of the following: $, %, or &gt;. If you type something in here, your computer will interpret it as a command, and try to run it.¬†\n\n\npwd\nIf you type in pwd into the terminal and hit enter, it will print out the absolute path to where you currently are. When you first launch a terminal, it usually starts you off in your home directory, which is usually going to be named after your username.\n\nbash\n\npwd\n/Users/Display\nUse pwd early, and use it often. It stands for¬†present¬†working¬†directory.¬†\n\n\nls\nIf you type in ls into the terminal and hit enter, it will print out a list of all of the directories and files inside the folder you are currently in. Here‚Äôs how it prints out on my own computer when I first launch Terminal:\n\nbash\n\nls\nDesktop      Library    Pictures\nDocuments    Movies     Public\nDownloads    Music      Sites  \nEach of the items listed here is another directory inside of my current directory. I can look inside and get a list of all the files inside of these directories by typing in ls and the name of the directory I want to see inside of. For example, if I wanted to get a list of all of the files on my desktop, this is what I would type:\n\nbash\n\nls Desktop\nSampletext.txt\nI only have one file on my desktop right now, and it‚Äôs a document called Sampletext.txt.¬†\n\n\nKnow your surroundings\nReally skilled and accomplished programmers use the commands pwd and ls constantly, and so should you!¬†It‚Äôs the only way to keep track of your surroundings on the command line.¬†\nIf you ever are looking at a terminal, and don‚Äôt know what to do next, just type in pwd and ls.¬†\nEvery time you do a new thing in the terminal, type in type in pwd and ls¬†afterwards.\nJust type in pwd and ls¬†all the time. :::",
    "crumbs": [
      "Notes",
      "Concepts",
      "Navigating Directories"
    ]
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#getting-around",
    "href": "notes/concepts/03_navigating-directories.html#getting-around",
    "title": "Navigating Directories",
    "section": "Getting around",
    "text": "Getting around\nYou‚Äôre not always going to want to hang around in your home directory the whole time. You may want to get to a specific directory where some code or a script is to run it. To do this, we use the cd command, which stands for¬†change¬†directory.\n\ncd : Moving down 1 level\nTo change the folder you‚Äôre in, you just need to type in cd and then the name of the folder. For example to move from my home directory into my Documents folder, it would look like this:\n\nbash\n\nls\nDesktop     Library   Pictures\nDocuments   Movies    Public\nDownloads   Music     Sites\n\nbash\n\ncd Documents\nls\nFranklinInstituteSamples.pptx   Zoom\nFranklinInstituteSounds         html_practice\n\nbash\n\npwd\n/Users/Display/Documents\n\nFirst, I double checked which directories were in the folder I was currently in with ls.\nSecond, I moved into the Documents directory with cd Documents.\nThird, I checked what files and directories were in my new location with ls.\nFourth, I double checked my current location with pwd, which gave my the absolute path to where I was.\n\n\n\ncd : Moving up 1 level\nIf after moving into my documents folder, I wanted to move back to my home directory, that would involve moving up one level, because my Documents folder is inside of my home directory. We can do this using cd again, but instead of the name of a directory, we follow it with ... The two dots, .., is a short hand for ‚Äúone level up from where I am.‚Äù Here‚Äôs how that works out on my system.\n\nbash\n\npwd\n/Users/Display/Documents\n\nbash\n\ncd ..\npwd\n/Users/Display\n\nFirst, I double checked where I was with pwd.\nSecond, I moved up one level with cd ..\nThird, I double checked where I would up with pwd again, confirming that I was now in my home directory again.\n\n\n\ncd : Moving down multiple levels\nYou don‚Äôt have to move down just one level at a time. For example, right now we‚Äôre in my home directory, but inside of my documents there‚Äôs a directory called html_practice. That‚Äôs two levels down. To get into html_practice, I just need to enter cd followed by the¬†relative path to it. Remember, the relative path is the sequence of directory names that lie between where we are and where we want to go. Here‚Äôs how that looks on my system.\n\nbash\n\npwd\n/Users/Display\n\nbash\n\ncd Documents/html_practice\npwd\n/Users/Display/Documents/html_practice\n\nbash\n\nls\nsite.html  style.css\n\nFirst, I double checked my location with pwd\nSecond, I moved down two levels through Documents into html_practice with cd.\nThird, I double checked where I had moved to with pwd.\nLastly, I checked what files were in my new directory with ls.\n\n\n\nMoving up and over\nNow, we‚Äôre inside html_practice¬†which is inside Documents. But what if we wanted to move into another directory that is also inside of Documents. For example, the directory Zoom is also inside of Documents, which is where Zoom saves all of the chat logs from our class meetings.\n\n\n\nWhere we want to move\n\n\nWe could do this in a two step process, using cd .. to move up one level, then cd Zoom to move into the zoom directory. But we can also combine the two into one step.\n\nbash\n\npwd\n/Users/Display/Documents/html_practice\n\nbash\n\ncd ../Zoom\npwd\n/Users/Display/Documents/Zoom\n\nFirst, I double checked where I was with pwd.\nThen, I moved up into Documents and down into Zoom in one go with cd ../Zoom\nFinally, I double checked where I wound up with pwd.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Navigating Directories"
    ]
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#very-useful-tips",
    "href": "notes/concepts/03_navigating-directories.html#very-useful-tips",
    "title": "Navigating Directories",
    "section": "Very useful tips!",
    "text": "Very useful tips!\nThere are a few tips, tricks, and shortcuts that can make using the command line a little bit easier.\n\nTab autocomplete\nWhen using a command line interface, ‚Äútab autocomplete‚Äù is¬†a¬†crucial tool to help you get around. For example, if you are in your home directory and you want to move into your documents directory, all you really need to type is cd Doc¬†and the terminal should autocomplete the rest of the file name!¬†\nIf you have multiple directories that start with Doc, it will list all of them, and then you‚Äôll only need to type in a few more characters before it will be able to autocomplete.¬†\nTab autocomplete works for ls as well, which can let you explore through directories without needing to move around.\n\n\nGet back home!\nTechnically, your home directory is a directory with a long absolute path. But because it‚Äôs a directory you‚Äôll probably want to keep getting back to often, there‚Äôs a shortcut built in. If you run cd ~, it will zip you back to your home directory from wherever you are.\n\n\nAbsolute paths\nIf, for some reason, you don‚Äôt know what the relative path is to a directory you want to get to from where you are (or maybe it‚Äôs very complicated), you can always run cd followed by the absolute path to where you want to go.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Navigating Directories"
    ]
  },
  {
    "objectID": "notes/concepts/03_navigating-directories.html#this-is-all-going-to-matter-a-lot",
    "href": "notes/concepts/03_navigating-directories.html#this-is-all-going-to-matter-a-lot",
    "title": "Navigating Directories",
    "section": "This is all going to matter a lot",
    "text": "This is all going to matter a lot\nUsing the command line and navigating your computer is going to come up a lot more in this course. You should try as much as you can to get a handle on how this all works now.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Navigating Directories"
    ]
  },
  {
    "objectID": "notes/concepts/04_git_errors.html",
    "href": "notes/concepts/04_git_errors.html",
    "title": "Git Errors",
    "section": "",
    "text": "When you clicked on ‚ÄúSync‚Äù, did you get an error window that looked like this?\nIf you clock on ‚ÄúShow Command Output‚Äù, a file will pop open that looks like this.\nImportant things to note:",
    "crumbs": [
      "Notes",
      "Concepts",
      "Git Errors"
    ]
  },
  {
    "objectID": "notes/concepts/04_git_errors.html#how-to-fix-it.",
    "href": "notes/concepts/04_git_errors.html#how-to-fix-it.",
    "title": "Git Errors",
    "section": "How to fix it.",
    "text": "How to fix it.\n\nHit the key combination  to pop open the VSCode Command Palette. It should look like this:\n\n\n\n\n\n\n\nType in terminal editor to find the command ‚ÄúTerminal: Create New Terminal in Editor Area‚Äù. It should probably be the top result. If it‚Äôs highlighted, just hit enter to open a new terminal.\n\n\n\n\n\n\n\nCopy-paste the following code into the terminal window that opened, then hit enter.\n\n\nbash\n\ngit config pull.rebase false\n\nThat‚Äôs it. You should be able to Sync successfully.",
    "crumbs": [
      "Notes",
      "Concepts",
      "Git Errors"
    ]
  },
  {
    "objectID": "notes/concepts/04_git_errors.html#whats-going-on.",
    "href": "notes/concepts/04_git_errors.html#whats-going-on.",
    "title": "Git Errors",
    "section": "What‚Äôs going on.",
    "text": "What‚Äôs going on.\nThe ‚Äúproblem‚Äù is that the repository history in your codespace and the version on github don‚Äôt completely match up. The most likely scenario is\n\nYou accepted the assignment link, created your code space, made some changes and committed your changes.\nAfter you created your code space, I made some changes to the assignment (e.g fixed a misspelling in the README, or fixed an error in one of the tests), which then got merged into your GitHub repository.\n\nAll git is asking for is clarity in how to resolve the different histories between the version in your codespace and the version up on GitHub.\nI‚Äôm going to try to make sure that the command git config pull.rebase false gets run automatically when you create the Codespace for any future assignments.\n\nDetails\n\n\n\n\n\n\nWarning\n\n\n\nThis is only if you‚Äôre still curious!\n\n\nThis warning pops up when you have a situation like this, where ‚Äúmain‚Äù is the version on github, and ‚Äúlocal‚Äù is the version on your computer, or in your codespace.\n\n\n\n\n\ngitGraph\n  commit id: \"assignment created\"\n  branch local\n  commit id: \"local copy\"\n  commit id: \"edits\"\n  checkout main\n  commit id: \"text fixes\"\n\n\n\n\n\n\nBy setting pull.rebase false, this is what happens:\n\n\n\n\n\ngitGraph\n  commit id: \"assignment created\"\n  branch local\n  commit id: \"local copy\"\n  commit id: \"edits\"\n  checkout main\n  commit id: \"text fixes\"\n  checkout local\n  merge main\n\n\n\n\n\n\nThe other option, a ‚Äúrebase‚Äù, basically re-writes the history of your local version to look like this:\n\n\n\n\n\ngitGraph\n  commit id: \"assignment created\"\n  branch local\n  commit id: \"text fixes\" type: HIGHLIGHT\n  commit id: \"local copy\"\n  commit id: \"edits\"",
    "crumbs": [
      "Notes",
      "Concepts",
      "Git Errors"
    ]
  },
  {
    "objectID": "notes/meetings/03_tokenization.html#lesson-1-data-is-messy",
    "href": "notes/meetings/03_tokenization.html#lesson-1-data-is-messy",
    "title": "Tokenization",
    "section": "Lesson 1: Data is Messy",
    "text": "Lesson 1: Data is Messy\n\nHeaders, etc.\nIf you go take a look at the plain-text version of Moby Dick on Project Gutenberg, you‚Äôll see that it starts out with the following block of text:\n\n\ntxt\n\nThe Project Gutenberg eBook of Moby Dick; Or, The Whale\n    \nThis ebook is for the use of anyone anywhere in the United States and\nmost other parts of the world at no cost and with almost no restrictions\nwhatsoever. You may copy it, give it away or re-use it under the terms\nof the Project Gutenberg License included with this ebook or online\nat www.gutenberg.org. If you are not located in the United States,\nyou will have to check the laws of the country where you are located\nbefore using this eBook.\n\nTitle: Moby Dick; Or, The Whale\n\n\nAuthor: Herman Melville\n\nRelease date: July 1, 2001 [eBook #2701]\n                Most recently updated: August 18, 2021\n\nLanguage: English\n\n\n\n*** START OF THE PROJECT GUTENBERG EBOOK MOBY DICK; OR, THE WHALE ***\n\nAnd if you scroll to the very bottom of the file, you‚Äôll also find a very long block of text describing the Project Gutenberg License. If we wanted to analyze the text of Moby Dick, we‚Äôd have to make sure to remove these headers and footers appropriately.\n\n\n\n\n\n\nHeader removal\n\n\n\n\n\nI‚Äôve been using gutenbergpy to get text from project Gutenberg, which has a special function gutenbergpy.textget.strip_headers() to handily remove these headers.\n\n\n\nSimilarly, if you wanted to analyze the text of the course notes, and you downloaded the html page, on each page you‚Äôd be faced with a long header looking like this:\n\n\nhtml\n\n!DOCTYPE html&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;&lt;head&gt;\n\n&lt;meta charset=\"utf-8\"&gt;\n&lt;meta name=\"generator\" content=\"quarto-1.4.549\"&gt;\n\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\"&gt;\n\n&lt;meta name=\"author\" content=\"Josef Fruehwald\"&gt;\n&lt;meta name=\"dcterms.date\" content=\"2024-01-16\"&gt;\n\n&lt;title&gt;Lin511-2024 - Regular Languages and Finite State Machines&lt;/title&gt;\n&lt;style&gt;\ncode{white-space: pre-wrap;}\nspan.smallcaps{font-variant: small-caps;}\ndiv.columns{display: flex; gap: min(4vw, 1.5em);}\ndiv.column{flex: auto; overflow-x: auto;}\ndiv.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\nul.task-list{list-style: none;}\nul.task-list li input[type=\"checkbox\"] {\n  width: 0.8em;\n  margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ \n  vertical-align: middle;\n}\n/* CSS for syntax highlighting */\npre &gt; code.sourceCode { white-space: pre; position: relative; }\npre &gt; code.sourceCode &gt; span { line-height: 1.25; }\npre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }\n.sourceCode { overflow: visible; }\ncode.sourceCode &gt; span { color: inherit; text-decoration: inherit; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\npre &gt; code.sourceCode { white-space: pre-wrap; }\npre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code &gt; span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code &gt; span &gt; a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n  }\npre.numberSource { margin-left: 3em;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\npre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }\n}\n/* CSS for citations */\ndiv.csl-bib-body { }\ndiv.csl-entry {\n  clear: both;\n  margin-bottom: 0em;\n}\n.hanging-indent div.csl-entry {\n  margin-left:2em;\n  text-indent:-2em;\n}\ndiv.csl-left-margin {\n  min-width:2em;\n  float:left;\n}\ndiv.csl-right-inline {\n  margin-left:2em;\n  padding-left:1em;\n}\ndiv.csl-indent {\n  margin-left: 2em;\n}&lt;/style&gt;\n...\n\nThat‚Äôs not even the end of it.\n\n\nMarkup\nOnce we get to the content of the text, there‚Äôs still ‚Äúmarkup‚Äù to deal with. Here‚Äôs a sentence from Moby Dick.\n\n\ntxt\n\nBut _being paid_,‚Äîwhat will compare with it?\n\nThe underscores _ are there to indicate italics in the original text. Here‚Äôs how it looks when rendered:\n\n\n\nRendered text\n\n\nIf we just split this text up into words based on spaces, those underscores (and other punctiuation) are going to stuck around.\n\n\n\npython\n\nsentence = \"But _being paid_,‚Äîwhat will compare with it?\"\nwrap_print(sentence.split(\" \"))\n\n'But'   '_being'    'paid_,‚Äîwhat'   'will'  'compare'   \n'with'  'it?'   \n\n\n\nI don‚Äôt think ‚Äúpaid_,-what‚Äù is a word.\nThe same issue goes for trying to analyze text from the course notes. Here a paragraph from the finite state automata notes.\n\n\nhtml\n\n&lt;p&gt;\n  But since this is &lt;em&gt;Computational&lt;/em&gt; Linguistics, \n  we should probably learn about what is \n  ‚Äúregular‚Äù about ‚Äúregular‚Äù expressions, \n  because it‚Äôs related to formal language \n  theory!\n&lt;/p&gt;\n\nAgain, if we want to analyze the text, we‚Äôd need to extract it from this markup.",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Tokenization"
    ]
  },
  {
    "objectID": "notes/meetings/03_tokenization.html#lesson-2-language-is-complex.",
    "href": "notes/meetings/03_tokenization.html#lesson-2-language-is-complex.",
    "title": "Tokenization",
    "section": "Lesson 2: Language is complex.",
    "text": "Lesson 2: Language is complex.\nWe already started touching on how we may need to ‚Äúcase-fold‚Äù text before we analyze it.\n\n\n\npython\n\nimport re\nfrom collections import Counter\n\nphrase = \"\"\"The 2019 film Cats is a movie about cats. \nCats appear in every scene. \nA cat can always be seen\"\"\"\n\nwords = re.split(\"\\s\", phrase)\ncat_count = Counter(words)\n\nfor key in cat_count:\n  if re.match(\"[Cc]at\", key):\n    print(f\"{key}\\t{cat_count[key]}\")\n\nCats    2\ncats.   1\ncat 1\n\n\n\nConverting the whole phrase to lowercase will help, but there‚Äôs still the issue of punctuation.\nTokenization is the non-trivial task of splitting text up into meaningful units.\n\nTokenization\nSetting aside semantic issues, there are a lot of things that happen inside of text, especially if it is transcribed speech, that makes normalizing text and tokenizing it way more challenging than just splitting up on white space and stripping out punctuation, even just for English.\n\nPlaces to leave in punctuation\nSome examples given by Jurafsky & Martin for where you might want to leave in punctuation are:\n\nYou don‚Äôt want to eliminate punctuation from inside Ph.D, or m.p.h.. You also don‚Äôt want to eliminate it from some proper names, like ampersands in Procter & Gamble, Texas A&M, A&W, m&m's.\nYou‚Äôll want to keep formatting in numerals, and not split them into separate words. These are all possible numeric formats cross culturally for the same quantity\n\n1,000.55\n1.000,55\n1 000,55\n\nCurrency symbols should probably be kept together with their numerals, and depending on the culture & denomination.\n\n$0.99\n99¬¢\n‚Ç¨0,99\n\nDates: There are so many different permutations on how dates can be formatted that I shouldn‚Äôt list them all here, but here are some.1\n\n4 digit year, 2 digit month, 2 digit day\n\n2022-09-12\n2022/09/12\n\n4 digit year, 1 or 2 digit month, 2 digit day\n\n2022-9-12\n2022/9/12\n\n2 digit day, 2 digit month, 4 digit year\n\n12-09-2022\n12/09/2022\n\n2 digit day, 1 or 2 digit month, 4 digit year\n\n12-9-2022\n12/9/2022\n\n2 digit day, 2 digit month, 2 digit year\n\n12-09-22\n12/09/22\n\n2 digit month, 2 digit day, 4 digit year\n\n09-12-2022\n09/12/2022\n\n1 digit month, 2 digit day, 2 digit year\n\n9-12-22\n9/12/22\n\n\nEmoticons,2 where the token is entirely punctuation :), &gt;.&lt;.\n\n\n\nPlaces to split up words\nSometimes the tokens you get back from whitespace tokenization ought to be split up even further. One example might be hyphenated words, like hard-won.\n\nhard-won ‚ûî hard, won or hard, -, won.\n\nAnother example involves clitics, like n't or 're in English.\n\nisn't ‚ûî is, n't\ncan't ‚ûî ca, n't\nwhat're ‚ûî what, 're\n\n\n\nPlaces to glue words together\nYou might want to also glue together tokens from whitespace tokenization.\n\nNew, York, City ‚ûî New York City\nSuper, Smash, Brothers ‚ûî Super Smash Brothers\n\n\n\nChallenges with speech and text\n\n: $1,500\n\n: ‚Äúone thousand five hundred dollars‚Äù\n: ‚Äúfifteen hundred dollars‚Äù\n: ‚Äúone and a half thousand dollars‚Äù\n: ‚Äúone point five thousand dollars‚Äù",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Tokenization"
    ]
  },
  {
    "objectID": "notes/meetings/03_tokenization.html#tokenizers--part-1-",
    "href": "notes/meetings/03_tokenization.html#tokenizers--part-1-",
    "title": "Tokenization",
    "section": "Tokenizers -part 1-",
    "text": "Tokenizers -part 1-\nThe Natural Language Toolkit library (Bird, Klein, and Loper 2009) has a few tokenizers available.\n\n\n\npython\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\n## The first time you run it, \n## you need to download some data\nnltk.download('punkt')\n\n\n\npython\n\ntokens_01 = word_tokenize(sentence)\nwrap_print(tokens_01)\n\n'But'   '_being'    'paid_' ',' '‚Äîwhat' \n'will'  'compare'   'with'  'it'    '?' \n\n\n\nThe spacy package also has tokenizers available,\n\n\nbash\n\npip install spacy\npip install $(spacy info en_core_web_sm --url)\n\n\npython\n\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(sentence)\nwrap_print(doc)\n\n'But'   '_' 'being' 'paid_,‚Äîwhat'   'will'  \n'compare'   'with'  'it'    '?'",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Tokenization"
    ]
  },
  {
    "objectID": "notes/meetings/03_tokenization.html#data-sparsity",
    "href": "notes/meetings/03_tokenization.html#data-sparsity",
    "title": "Tokenization",
    "section": "Data Sparsity",
    "text": "Data Sparsity\nWith any tokenization of text, you‚Äôre going to wind up with a lot of tokens that appear just once or twice.\n\n\n\n\n\n\nHere‚Äôs a plot of the top 10 most frequent tokens in Moby Dick.\n\n\n\n\n\nTop 10 tokens in Moby Dick\n\n\n\n\nThe trend of tokens getting less and less frequent continues\n\n\n\n\n\nAll tokens in Moby Dick\n\n\n\n\nThere is also a general phenomenon that the larger your corpus of tokens gets, the larger the vocabulary will get.\n\n\n\n\n\nAs the number of tokens increases, the size of the vocabulary increases\n\n\n\n\nThis means that if you have an ‚Äúopen vocabulary‚Äù tokenization method, where you can always create a new token based on some rules, you‚Äôll never be able to analyze enough text such that you‚Äôll never encounter a new token you‚Äôve never seen before.\n\n\n\n\n\nThe probability of a new type as token size increases",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Tokenization"
    ]
  },
  {
    "objectID": "notes/meetings/03_tokenization.html#closed-vocabulary-tokenization-byte-pair-encoding",
    "href": "notes/meetings/03_tokenization.html#closed-vocabulary-tokenization-byte-pair-encoding",
    "title": "Tokenization",
    "section": "Closed Vocabulary Tokenization (Byte Pair Encoding)",
    "text": "Closed Vocabulary Tokenization (Byte Pair Encoding)\nA different approach to tokenization is to have a pre-specified closed vocabulary that you use to pull tokens out of text.\nLet‚Äôs start out with a fake training of a byte pair encoder with the simple vocabulary ‚Äúcats can‚Äôt canter‚Äù. We kick things off treating every character as a token, plus a specialized start-of-word symbol, which I‚Äôm representing with _.\n\n\n\n\n\n\nTokens\n\n\n_ c a t s\n_ c a n ' t\n_ c a n t e r\n\n\n\n\nTypes\n\n\n{'a', 'e', 't', 'r', \n's', 'n', 'c', \"'\", '_'}\n\n\n\nThis is, in principle, the smallest and simplest tokenization we could do for any input text. While the total number of words is infinite, the total number of characters or symbols we use to create those words is finite.\nThe next step is to count up all of the pairs (or bigrams) of tokens in the training data. In this case, both (_, c) and (c, a) appear equally commonly, so I make a decision and say (_, c) is the one we‚Äôll process first. We‚Äôll paste them together, call them a new type, and replace all (_, c) sequences with _c.\n\n\n\n\n\n\ntokens\n\n\n_c a t s\n_c a n ' t\n_c a n t e r\n\n\n\n\ntypes\n\n\n{'a', 'e', 't', 'r', \n's', 'n', 'c', \"'\", ' ',\n`_c`}\n\n\n\nRepeating the process, the most frequently occurring bigram is now (_c, a), so we‚Äôll add _ca as a new type, and replace all (_c, a) sequences with _ca.\n\n\n\n\n\n\ntokens\n\n\n_ca t s \n_ca n ' t _\n_ca n t e r _\n\n\n\n\ntypes\n\n\n{'a', 'e', 't', 'r', \n's', 'n', 'c', \"'\", ' ', \n'_c', '_ca'}\n\n\n\nFinally, the last most frequent sequence is (_ca, n), so we‚Äôll add _can to the vocabulary, and collapse (_ca, n) sequences.\n\n\n\n\n\n\ntokens\n\n\n_ca t s\n_can ' t\n_can t e r\n\n\n\n\ntypes\n\n\n{'a', 'e', 't', 'r', \n's', 'n', 'c', \"'\", ' ', \n'_c', '_ca', '_can'}\n\n\n\nWe‚Äôll stop at that point, but we could either continue for a fixed number of iterations, or until our type, or vocabulary size reaches a fixed number.\n\nThe use of Byte Pair Encoding\nThis kind of tokenization approach is necessary when you want to be able to tokenizer anything, and also have a pre-specified vocabulary size. We can see how OpenAI‚Äôs byte pair encoder handles the first few sentences of Moby Dick\n\n\n\npython\n\nimport tiktoken\nenc = tiktoken.encoding_for_model(\"gpt-4\")\n\n\n\npython\n\nmb_string = \"\"\"\nCall me Ishmael. Some years ago‚Äînever mind how long precisely‚Äîhaving\nlittle or no money in my purse, and nothing particular to interest me\non shore, I thought I would sail about a little and see the watery part\nof the world. It is a way I have of driving off the spleen and\nregulating the circulation.\n\"\"\"\n\ntokens = [\n  enc.decode([token]) \n    for token in enc.encode(mb_string.replace(\"\\n\", \" \"))\n]\n\nwrap_print(tokens)\n\n' Call' ' me'   ' Ish'  'ma'    'el'    \n'.' ' Some' ' years'    ' ago'  '‚Äî' \n'never' ' mind' ' how'  ' long' ' precisely'    \n'‚Äî' 'having'    ' little'   ' or'   ' no'   \n' money'    ' in'   ' my'   ' purse'    ',' \n' and'  ' nothing'  ' particular'   ' to'   ' interest' \n' me'   ' on'   ' shore'    ',' ' I'    \n' thought'  ' I'    ' would'    ' sail' ' about'    \n' a'    ' little'   ' and'  ' see'  ' the'  \n' wat'  'ery'   ' part' ' of'   ' the'  \n' world'    '.' ' It'   ' is'   ' a'    \n' way'  ' I'    ' have' ' of'   ' driving'  \n' off'  ' the'  ' sple' 'en'    ' and'  \n' regulating'   ' the'  ' circulation'  '.' ' ' \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRank vs Frequency per tokenizer\n\n\n\n\n\n\n\n\n\nCorpus size vs Vocabulary size per tokenizer",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Tokenization"
    ]
  },
  {
    "objectID": "notes/meetings/03_tokenization.html#footnotes",
    "href": "notes/meetings/03_tokenization.html#footnotes",
    "title": "Tokenization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI‚Äôm being tedious here on purpose, because you have to keep in mind that if you wrote a function to handle just one of these possible date formats, it would not immediately translate over to the others! There are also entire libraries in multiple programming languages for parsing and reformatting date times. Python: datetime, R: lubridate.‚Ü©Ô∏é\nThis example isn‚Äôt from Jurafsky & Martin.‚Ü©Ô∏é",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Tokenization"
    ]
  },
  {
    "objectID": "notes/meetings/02_pda.html",
    "href": "notes/meetings/02_pda.html",
    "title": "Pushdown Automata and Context Free Languages",
    "section": "",
    "text": "In the notes on Finite State Automata, we looked at this turnstile finite state automaton.\n\n\n\n\n\nstateDiagram\n  direction LR\n  state \"Locked\" as l\n  state \"Unlocked\" as u\n  \n  [*] --&gt; l\n  l --&gt; l: push\n  l --&gt; u: coin\n  u --&gt; u: coin\n  u --&gt; l: push\n\n\n\n\n\n\nAn annoying thing about this turnstile is that if you don‚Äôt know how it works, it will rip you off!\n\n\n\n\n\n\nA scenario\n\n\n\nRobin approaches the finite-state turnstile with two of their friends. They think\n\nThere‚Äôs three of us, and I have three tokens. I‚Äôll speed things up and be a good friend by popping three tokens into the machine, and then all three of us can pop through.\n\n\n\nRobin is expecting a pattern like this to happen\n, , , , , \nLittle does Robin know that the way this turnstile works is that after you put a coin into the slot, the coin rolls past and triggers the unlocking mechanism and goes straight into the collection bin. If the turnstile is already unlocked, the coin just rolls into the collection bin. It doesn‚Äôt have any ‚Äúmemory‚Äù of how many coins it‚Äôs been fed, so after one person walks through, the turnstile relocks.\nSo here‚Äôs what happens to Robin and their friends\n\n\n\n\n\n\n\nInput\nNew State\n\n\n\n\n\nLocked\n\n\n\nUnlocked\n\n\n\nUnlocked\n\n\n\nUnlocked\n\n\n\nLocked\n\n\n\nWith the turnstile locked again, Robin‚Äôs two friends can‚Äôt get through unless they insert yet another token!",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Pushdown Automata and Context Free Languages"
    ]
  },
  {
    "objectID": "notes/meetings/02_pda.html#more-like-a-rip-off-machine",
    "href": "notes/meetings/02_pda.html#more-like-a-rip-off-machine",
    "title": "Pushdown Automata and Context Free Languages",
    "section": "",
    "text": "In the notes on Finite State Automata, we looked at this turnstile finite state automaton.\n\n\n\n\n\nstateDiagram\n  direction LR\n  state \"Locked\" as l\n  state \"Unlocked\" as u\n  \n  [*] --&gt; l\n  l --&gt; l: push\n  l --&gt; u: coin\n  u --&gt; u: coin\n  u --&gt; l: push\n\n\n\n\n\n\nAn annoying thing about this turnstile is that if you don‚Äôt know how it works, it will rip you off!\n\n\n\n\n\n\nA scenario\n\n\n\nRobin approaches the finite-state turnstile with two of their friends. They think\n\nThere‚Äôs three of us, and I have three tokens. I‚Äôll speed things up and be a good friend by popping three tokens into the machine, and then all three of us can pop through.\n\n\n\nRobin is expecting a pattern like this to happen\n, , , , , \nLittle does Robin know that the way this turnstile works is that after you put a coin into the slot, the coin rolls past and triggers the unlocking mechanism and goes straight into the collection bin. If the turnstile is already unlocked, the coin just rolls into the collection bin. It doesn‚Äôt have any ‚Äúmemory‚Äù of how many coins it‚Äôs been fed, so after one person walks through, the turnstile relocks.\nSo here‚Äôs what happens to Robin and their friends\n\n\n\n\n\n\n\nInput\nNew State\n\n\n\n\n\nLocked\n\n\n\nUnlocked\n\n\n\nUnlocked\n\n\n\nUnlocked\n\n\n\nLocked\n\n\n\nWith the turnstile locked again, Robin‚Äôs two friends can‚Äôt get through unless they insert yet another token!",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Pushdown Automata and Context Free Languages"
    ]
  },
  {
    "objectID": "notes/meetings/02_pda.html#a-pushdown-automaton",
    "href": "notes/meetings/02_pda.html#a-pushdown-automaton",
    "title": "Pushdown Automata and Context Free Languages",
    "section": "A Pushdown Automaton",
    "text": "A Pushdown Automaton\nRobin was really upset and embarrassed at losing two whole tokens to the rip-off (finite state) machine in front of their friends. They vowed to invent a better turnstile so no one would ever have to face that kind of embarrassment again.\n\nIncorporating a memory\nThe problem with the finite-state turnstile is that it has no ‚Äúmemory‚Äù of how many coins it‚Äôs been fed. Robin‚Äôs new prototype works like so:\n\nEvery time someone inserts a coin into Robin‚Äôs turnstile, it lands in a little collection tray. If someone inserts multiple coins, they form a stack of coins.\nIf there is even one coin in the stack, the turnstile is unlocked.\nAny time someone pushes through the turnstile, the collection tray bounces one coin off of the stack.\n\nEven this simple system gets a little unwieldy to represent in the same kind of state diagram. So, here‚Äôs the last one of these we‚Äôll see for a bit.\n\n\n\n\n\nstateDiagram\n  direction LR\n  state \"Locked\" as l\n  state \"Unlocked\" as u\n  state coin_fork1 &lt;&lt;fork&gt;&gt;\n  state coin_fork2 &lt;&lt;fork&gt;&gt;\n  state pop1 &lt;&lt;fork&gt;&gt;\n  state pop2 &lt;&lt;fork&gt;&gt;\n  state choice_state &lt;&lt;choice&gt;&gt;\n  state \"Stack\" as s\n  \n  [*] --&gt; l\n  l --&gt; l : push\n  l --&gt; coin_fork1: coin\n  coin_fork1 --&gt; u\n  coin_fork1 --&gt; s: +1\n  u --&gt; coin_fork2: coin\n  coin_fork2 --&gt; u\n  coin_fork2 --&gt; s: +1\n  \n  u --&gt; choice_state: push\n  choice_state --&gt; pop1: if Stack &gt; 1\n  pop1 --&gt; s: -1\n  pop1 --&gt; u\n  \n  choice_state --&gt; pop2: if Stack == 1\n  pop2 --&gt; s: -1\n  pop2 --&gt; l\n\n\n\n\n\n\n\n\nUsing the Pushdown Turnstile\nWith Robin‚Äôs new Pushdown Turnstile installed at metro stations everywhere, they bring their two friends back to the scene of the crime, and retry their three-coins, three-people strategy. Here‚Äôs what happens.\n\n\n\n\n\n\n\n\nInput\nNew State\nCoin Stack\n\n\n\n\n\nLocked\n0\n\n\n\nUnlocked\n1\n\n\n\nUnlocked\n2\n\n\n\nUnlocked\n3\n\n\n\nUnlocked\n2\n\n\n\nUnlocked\n1\n\n\n\nLocked\n0\n\n\n\n\n\nGeneralizing the pattern\nThe way this turnstile works, generally, is that if you put in \\(n\\) coins, \\(n\\) people will be able to push through. Another way of notating that sequence of events is \\(^n\\)\\(^n\\). In the more formal-language-theory world, these kinds of patterns are usually labeled \\(a^nb^n\\).\nAnother way to think about these \\(a^nb^n\\) systems is in terms of bracket matching. If we replace each  symbol with [ and each  symbol with ], then we get a pattern that looks like this:\n[\n[\n[\n]\n]\n]\nThe requirement for the language is that every opening bracket [ needs to get matched with a closing bracket ].",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Pushdown Automata and Context Free Languages"
    ]
  },
  {
    "objectID": "notes/meetings/02_pda.html#context-free-grammars",
    "href": "notes/meetings/02_pda.html#context-free-grammars",
    "title": "Pushdown Automata and Context Free Languages",
    "section": "Context Free Grammars",
    "text": "Context Free Grammars\nWe get nested, bracket matching patterns in natural language all the time. For example the person-number agreement in this sentence.\n\nThe person who I, the guy you are looking at, am talking to is not listening.\n\nIf the form of be in this sentence were generated by a Regular Grammar, to be parsed with a Finite State Automaton, once the ‚Äúyou‚Äù subject appears in the sentence, every following form of be would have to be ‚Äúare‚Äù the rest of the way.\n\n*The person who I, the guy you are looking at, are talking to are not listening.\n\nSince the first sentence is how English and other languages work, we‚Äôd conclude that natural language is, at least, Context Free.\n\nContext Free Rules\n\n\nRegular rules can look like this:\n\\[\nA \\rightarrow aA\n\\]\n\nContext free rules can look like this: \\[\nA \\rightarrow aAb\n\\]\n\n\nReturning to this html snippit:\n&lt;p&gt;\n  This is a paragraph with \n  &lt;strong&gt;\n    bold text.\n  &lt;/strong&gt;\n&lt;/p&gt;\nRules of a context free grammar that could give rise to this well-formed html are:\n\\[\nD \\rightarrow &lt;p&gt;C&lt;/p&gt;\n\\]\n\\[\nC \\rightarrow words\n\\]\n\\[\nC \\rightarrow words S\n\\]\n\\[\nS \\rightarrow &lt;strong&gt;C&lt;/strong&gt;\n\\]\n\n\n\n\n\nflowchart TD\n\n  D --&gt; p1[\"p\"]\n  D --&gt; C1[\"C\"]\n  D --&gt; p2[\"/p\"]\n\n  C1 --&gt; w1[\"This is a paragraph with\"]\n  C1 --&gt; S\n\n  S --&gt; s1[\"strong\"]\n  S --&gt; C2[\"C\"]\n  S --&gt; s2[\"/strong\"]\n\n  C2 --&gt; w2[\"bold text.\"]\n\n\n\n\n\n\n\n\n\nA PDA for this grammar\nHere‚Äôs a way we‚Äôd describe a Pushdown Automaton that decides whether or not a document is generated by this grammar:\n\nEach time it encounters an opening &lt;tag&gt;, it adds it to the stack, and when it encounters a closing &lt;/tag&gt;, it pops it from the stack.\n\n\n\nWhen it encounters a closing &lt;/tag&gt;, it has to match the opening &lt;tag&gt; that‚Äôs at the top of the stack.\nWhen it gets to the end of the document, the stack needs to be empty.\n\nHere‚Äôs a table showing how that‚Äôd play out\n\n\n\n\n\n\n\n\nInput\nevent\nStack\n\n\n\n\n&lt;p&gt;\npush &lt;p&gt;\n&lt;p&gt;\n\n\nThis, is, a, paragraph, with\n\n&lt;p&gt;\n\n\n&lt;strong&gt;\npush &lt;strong&gt;\n&lt;strong&gt;, &lt;p&gt;\n\n\nbold, text.\n\n&lt;strong&gt;, &lt;p&gt;\n\n\n&lt;/strong&gt;\npop &lt;strong&gt;\n&lt;p&gt;\n\n\n&lt;/p&gt;\npop &lt;p&gt;\n\n\n\n\nOne consequence of the rule that tags need to match when you pop them is that the following is not valid html.\n&lt;p&gt;\n  This is &lt;strong&gt;invalid!\n&lt;/p&gt;\n&lt;/strong&gt;\nIf you were to reason through the state of the stack after the opening &lt;strong&gt; tag, it would look like\n\n&lt;strong&gt;, &lt;p&gt;\n\nThen, when you feed it &lt;/p&gt;, it doen‚Äôt match the tag at the top of the stack, so we‚Äôd get an error of some sort.",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Pushdown Automata and Context Free Languages"
    ]
  },
  {
    "objectID": "notes/meetings/02_pda.html#limits-of-pushdown-automata",
    "href": "notes/meetings/02_pda.html#limits-of-pushdown-automata",
    "title": "Pushdown Automata and Context Free Languages",
    "section": "Limits of Pushdown Automata",
    "text": "Limits of Pushdown Automata\nAn office building has installed a version of Robin‚Äôs turnstile. Each person who enters the building has to insert their id card, and the machine scans it and spits it out the other side when a person pushes through.\nRobin approaches the turnstile with their friends Skylar and Alex. Both Skylar and Alex have their hands full carrying packages into the building, so Robin tries to be helpful and insert all of their id cards first, so they can then pass through. They‚Äôre walking through in the order\n\nRobin\nSkylar\nAlex\n\nSo Robin puts their ID cards into the turnstile in that order. Here‚Äôs how it works out\n\n\n\n\n\n\n\n\nInput\nAction\nStack\n\n\n\n\n\npush \n\n\n\n\npush \n, \n\n\n\npush \n, , \n\n\n\npop \n, \n\n\n\nüö®\n\n\n\n\nOh no! The turnstile has handed Robin Alex‚Äôs id card! What a mess!\n\nBeyond Context Free\nRobin was expecting a sequence like this\n\n, , , , , \n\nThis involves so-called ‚Äúcrossing dependencies‚Äù, which can‚Äôt be recognized by a Pushdown Automaton, which means they involve a more complex grammar than context free rules.\nThere are some examples of crossing dependencies in human language as well, like this example in Swiss German from Shieber (1985) (cited in J√§ger and Rogers (2012))\n\n‚Äúthat we let the children help Hans paint the house‚Äù\n\n\n\n\n\n\n\n\n\n\n\n\ndass\nmer\nd‚Äô chind\nem Hans\nes Huus\nl√∂nd\nh√§lfe\naanstriiche\n\n\nthat\nwe\nthe children-ACC\nHans-DAT\nthe house-ACC\nlet\nhelp\npaint",
    "crumbs": [
      "Notes",
      "Class Meetings",
      "Pushdown Automata and Context Free Languages"
    ]
  }
]