{
  "hash": "971d1b9688d0afc375d4e9a788211b4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Term Frequency - Inverse Document Frequency\ndate: 2024-04-02\nknitr: \n  opts_chunk: \n    echo: false\n    message: false\n    warning: false\n    dev: ragg_png\nformat:\n  html:\n    mermaid:\n      theme: neutral\nfilters: \n  - codeblocklabel\ncategories:\n  - compling\n---\n\n\n## Descrbing a document by its words\n\n### Binary coding\n\nOne way to represent the content of a document, like a movie review, is with a binary code of 1, if a word appears in it, or a 0, if a word does not.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\nimport nltk\nfrom nltk.corpus import movie_reviews\nfrom nltk.corpus import stopwords\nall_ids = movie_reviews.fileids()\nall_words = [movie_reviews.words(id) for id in all_ids]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nenglish_stop = stopwords.words(\"english\")\nprint(english_stop[0:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\"]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nall_words_filtered = [\n  [\n    word \n    for word in review \n    if word not in english_stop\n  ]\n  for review in all_words\n]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nreview_has_good = np.array([\n  1 \n  if \"good\" in review\n  else\n  0\n  for review in all_words_filtered\n])\n\nreview_has_excellent = np.array([\n  1 \n  if \"excellent\" in review\n  else\n  0\n  for review in all_words_filtered\n])\n\nreview_has_bad = np.array([\n  1 \n  if \"bad\" in review\n  else\n  0\n  for review in all_words_filtered\n])\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Presence or absence of 'good' and 'bad'](12_tf-idf_files/figure-html/fig-binary-1.png){#fig-binary width=768}\n:::\n:::\n\n\n### Token Counts\n\n*Or*, we could count how often each word appeared in a review. Probably if a review has the word \"good\" in it 6 times, that's a more important word to the review than one where it appears just once.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom collections import Counter\n\ngood_count = np.array([\n  Counter(review)[\"good\"]\n  for review in all_words_filtered\n])\n\nexcellent_count = np.array([\n  Counter(review)[\"excellent\"]\n  for review in all_words_filtered\n])\n\nbad_count = np.array([\n  Counter(review)[\"bad\"]\n  for review in all_words_filtered\n])\n```\n:::\n\n\nSince the reviews are different lengths, we can \"normalize\" them.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntotal_review = np.array([\n  len(review)\n  for review in all_words_filtered\n])\n\ngood_norm = good_count/total_review\nexcellent_norm = excellent_count/total_review\nbad_norm = bad_count/total_review\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Presence or absence of 'good' and 'bad'](12_tf-idf_files/figure-html/fig-count-1.png){#fig-count width=768}\n:::\n:::\n\n\n### Document Frequency\n\nOn the *other* hand, it looks like \"good\" and \"bad\" appear in lots of reviews.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nreview_has_good.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.591\n```\n\n\n:::\n\n```{.python .cell-code}\nreview_has_bad.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.3865\n```\n\n\n:::\n:::\n\n\nWheras, the word \"excellent\" doesn't appear in that many reviews overall.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nreview_has_excellent.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.0725\n```\n\n\n:::\n:::\n\n\nMaybe, when the word \"excellent\" appears in a review, it should be taken more seriously, since it doesn't appear in that many.\n\n## TF-IDF\n\nTF\n\n:   **T**erm **F**requency\n\nIDF\n\n:   **I**nverse **D**ocument **F**requency\n\nThe TF-IDF value tries to describe the words that appear in a document by how important they are to *that* document.\n\n| If a word appears \\_\\_ in this document | that appears in documents \\_\\_ | then...                        |\n|-----------------------------------------|--------------------------------|--------------------------------|\n| often                                   | rarely                         | it's probably important        |\n| often                                   | very often                     | it might not be that important |\n\n### Term Frequency\n\n$$\ntf = \\log C(w)+1\n$$\n\nWhy log?\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Raw Count](12_tf-idf_files/figure-html/fig-raw-count-1.png){#fig-raw-count width=576}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Raw Count](12_tf-idf_files/figure-html/fig-log-count-1.png){#fig-log-count width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngood_tf = np.log(good_count+1)\nexcellent_tf = np.log(excellent_count + 1)\nbad_tf = np.log(bad_count + 1)\n```\n:::\n\n\n### Inverse Document Frequency\n\nIf $n$ is the total number of documents there are, and $df$ is the number of documents a word appears in\n\n$$\nidf = \\log \\frac{n}{df}\n$$\n\n\n::: {.cell}\n\n```{.python .cell-code}\nn_documents = len(all_words_filtered)\n\ngood_idf = np.log(\n  n_documents/review_has_good.sum()\n  )\n\nexcellent_idf = np.log(\n  n_documents/review_has_excellent.sum()\n  )\n\nbad_idf = np.log(\n  n_documents/review_has_bad.sum()\n  )\n```\n:::\n\n\n### TF-IDF\n\nWe just multiply these two together\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngood_tf_idf = good_tf * good_idf\nexcellent_tf_idf = excellent_tf * excellent_idf\nbad_tf_idf = bad_tf * bad_idf\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![TF-IDF](12_tf-idf_files/figure-html/fig-tf-idf-1.png){#fig-tf-idf width=768}\n:::\n:::\n\n\n## Document \"vectors\"\n\nAnother way to look at these reviews is as \"vectors\", or rows of numbers, that exist along the \"good\" axis, or the \"bad\" axis.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Documents in 'good' and 'bad' space](12_tf-idf_files/figure-html/fig-document-vectors-1.png){#fig-document-vectors width=672}\n:::\n:::\n\n\n## Doing it with sklearn\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n```\n:::\n\n\nSetting up the data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nraw_reviews = [\n  movie_reviews.raw(id) \n  for id in all_ids\n  ]\n\nlabels = [\n  id.split(\"/\")[0]\n  for id in all_ids\n]\n\nbinary = np.array([\n  1 \n  if label == \"pos\"\n  else\n  0\n  for label in labels\n])\n```\n:::\n\n\nTest-train split\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX_train, X_test, y_train, y_test = train_test_split(\n  raw_reviews,\n  binary,\n  train_size = 0.8\n)\n```\n:::\n\n\nMaking the tf-idf \"vectorizor\"\n\n\n::: {.cell}\n\n```{.python .cell-code}\nvectorizor = TfidfVectorizer(stop_words=\"english\")\nX_train_vec = vectorizor.fit_transform(X_train)\nX_test_vec = vectorizor.transform(X_test)\n```\n:::\n\n\nFitting a logistic regression\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmodel = LogisticRegression(penalty = \"l2\")\nmodel.fit(X_train_vec, y_train)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>\n```\n\n:::\n:::\n\n\nTesting the logistic regression\n\n\n::: {.cell}\n\n```{.python .cell-code}\npreds = model.predict(X_test_vec)\n```\n:::\n\n\nAccuracy\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(preds == y_test).mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.8425\n```\n\n\n:::\n:::\n\n\nRecall\n\n\n::: {.cell}\n\n```{.python .cell-code}\nrecall_array = np.array([\n  pred \n  for pred, label in zip(preds,y_test)\n  if label == 1\n])\n\nrecall_array.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.86\n```\n\n\n:::\n:::\n\n\nPrecision\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprecision_array = np.array([\n  label\n  for pred, label in zip(preds, y_test)\n  if pred == 1\n])\nprecision_array.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.8309178743961353\n```\n\n\n:::\n:::\n\n\nF score\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprecision = precision_array.mean()\nrecall = recall_array.mean()\n\n2 * ((precision * recall)/(precision + recall))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.8452088452088452\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntokens = vectorizor.get_feature_names_out()\ntokens[model.coef_.argmax()]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'life'\n```\n\n\n:::\n:::\n",
    "supporting": [
      "12_tf-idf_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}