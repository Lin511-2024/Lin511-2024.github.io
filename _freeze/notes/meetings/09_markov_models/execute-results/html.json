{
  "hash": "e95ad9d453ffbffd061ac6cdbbf113cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Markov Models\ndate: 2024-03-07\nknitr: \n  opts_chunk: \n    echo: false\n    message: false\n    warning: false\n    dev: ragg_png\nformat:\n  html:\n    mermaid:\n      theme: neutral\nfilters: \n  - codeblocklabel\ncategories:\n  - compling\n---\n\n::: {.cell}\n\n:::\n\n\nI started [the notes on ngrams models](04_ngrams.qmd) saying that we can think of them like finite-state-automata, but with probabilities on each transition between states. Another word for this is \"Markov Model.\"\n\n## Markov Chains\n\nAny system that has a set of state that you can transition between problematically could be called a Markov Chain. They have applications well beyond ngram models, and even beyond linguistics.\n\n### Working out ngram probabilities\n\nLet's say we had a Markov Chain with \"just\" three states:\n\n\n```{mermaid}\nstateDiagram\n  direction LR\n  [*] --> A: 0.5\n  [*] --> B: 0.25\n  [*] --> C: 0.25\n  \n  A --> [*]: 0.1\n  A --> A: 0.2\n  A --> B: 0.3\n  A --> C: 0.4\n  \n  B --> [*]: 0.9\n  B --> C: 0.1\n  \n  C --> [*]: 0.2\n  C --> C: 0.7\n  C --> B: 0.1\n  \n  \n```\n\n\nIt's going to be easier to represent all of the probabilities of transition between one state and the next as a \"transition matrix\"\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"eopnrwnckz\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#eopnrwnckz table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#eopnrwnckz thead, #eopnrwnckz tbody, #eopnrwnckz tfoot, #eopnrwnckz tr, #eopnrwnckz td, #eopnrwnckz th {\n  border-style: none;\n}\n\n#eopnrwnckz p {\n  margin: 0;\n  padding: 0;\n}\n\n#eopnrwnckz .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#eopnrwnckz .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#eopnrwnckz .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#eopnrwnckz .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#eopnrwnckz .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#eopnrwnckz .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#eopnrwnckz .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#eopnrwnckz .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#eopnrwnckz .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#eopnrwnckz .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#eopnrwnckz .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#eopnrwnckz .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#eopnrwnckz .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#eopnrwnckz .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#eopnrwnckz .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#eopnrwnckz .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#eopnrwnckz .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#eopnrwnckz .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#eopnrwnckz .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#eopnrwnckz .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#eopnrwnckz .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#eopnrwnckz .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#eopnrwnckz .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#eopnrwnckz .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#eopnrwnckz .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#eopnrwnckz .gt_left {\n  text-align: left;\n}\n\n#eopnrwnckz .gt_center {\n  text-align: center;\n}\n\n#eopnrwnckz .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#eopnrwnckz .gt_font_normal {\n  font-weight: normal;\n}\n\n#eopnrwnckz .gt_font_bold {\n  font-weight: bold;\n}\n\n#eopnrwnckz .gt_font_italic {\n  font-style: italic;\n}\n\n#eopnrwnckz .gt_super {\n  font-size: 65%;\n}\n\n#eopnrwnckz .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#eopnrwnckz .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#eopnrwnckz .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#eopnrwnckz .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#eopnrwnckz .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#eopnrwnckz .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#eopnrwnckz .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings gt_spanner_row\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"from\">from</th>\n      <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"5\" scope=\"colgroup\" id=\"to\">\n        <span class=\"gt_column_spanner\">to</span>\n      </th>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"start\">start</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"A\">A</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"B\">B</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"C\">C</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"end\">end</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"from\" class=\"gt_row gt_left\">start</td>\n<td headers=\"start\" class=\"gt_row gt_right\">0</td>\n<td headers=\"A\" class=\"gt_row gt_right\">0.5</td>\n<td headers=\"B\" class=\"gt_row gt_right\">0.25</td>\n<td headers=\"C\" class=\"gt_row gt_right\">0.25</td>\n<td headers=\"end\" class=\"gt_row gt_right\">0.0</td></tr>\n    <tr><td headers=\"from\" class=\"gt_row gt_left\">A</td>\n<td headers=\"start\" class=\"gt_row gt_right\">0</td>\n<td headers=\"A\" class=\"gt_row gt_right\">0.2</td>\n<td headers=\"B\" class=\"gt_row gt_right\">0.30</td>\n<td headers=\"C\" class=\"gt_row gt_right\">0.40</td>\n<td headers=\"end\" class=\"gt_row gt_right\">0.1</td></tr>\n    <tr><td headers=\"from\" class=\"gt_row gt_left\">B</td>\n<td headers=\"start\" class=\"gt_row gt_right\">0</td>\n<td headers=\"A\" class=\"gt_row gt_right\">0.0</td>\n<td headers=\"B\" class=\"gt_row gt_right\">0.00</td>\n<td headers=\"C\" class=\"gt_row gt_right\">0.10</td>\n<td headers=\"end\" class=\"gt_row gt_right\">0.9</td></tr>\n    <tr><td headers=\"from\" class=\"gt_row gt_left\">C</td>\n<td headers=\"start\" class=\"gt_row gt_right\">0</td>\n<td headers=\"A\" class=\"gt_row gt_right\">0.0</td>\n<td headers=\"B\" class=\"gt_row gt_right\">0.10</td>\n<td headers=\"C\" class=\"gt_row gt_right\">0.70</td>\n<td headers=\"end\" class=\"gt_row gt_right\">0.2</td></tr>\n    <tr><td headers=\"from\" class=\"gt_row gt_left\">end</td>\n<td headers=\"start\" class=\"gt_row gt_right\">0</td>\n<td headers=\"A\" class=\"gt_row gt_right\">0.0</td>\n<td headers=\"B\" class=\"gt_row gt_right\">0.00</td>\n<td headers=\"C\" class=\"gt_row gt_right\">0.00</td>\n<td headers=\"end\" class=\"gt_row gt_right\">1.0</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n### 👻 Matrix Multiplication 🤖\n\n-   What is the probability that we'll wind up in the \"end state\" in 3 steps?\n\nOr, if we asked this question about sentences generated by an ngram model:\n\n-   What is the probability that a sentence will be 3 words long?\n\nWe can get at this with \"matrix multiplication\".\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ntrans_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[0.  , 0.5 , 0.25, 0.25, 0.  ],\n       [0.  , 0.2 , 0.3 , 0.4 , 0.1 ],\n       [0.  , 0.  , 0.  , 0.1 , 0.9 ],\n       [0.  , 0.  , 0.1 , 0.7 , 0.2 ],\n       [0.  , 0.  , 0.  , 0.  , 1.  ]])\n```\n\n\n:::\n:::\n\n\nTo get the probability of our state after the first step, we need to get that top row of probabilities. One way to do this is to represent our *current* state (the start state) like this\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstart_state = np.array([\n  1, # start \n  0, # A \n  0, # B\n  0, # C\n  0, # end\n  ])\n  \nstart_state\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([1, 0, 0, 0, 0])\n```\n\n\n:::\n:::\n\n\nThe 1 represents the probability we're in the starting position, and the 0s represent that we're in no other position. If we treat this like a \"row vector\", we can get the probability of the next state with matrix multiplication.\n\n$$\n[ 1, 0, 0, 0,0] \\left[ \\begin{array}{ccccc}\n0.  & 0.5 & 0.25& 0.25& 0\\\\\n0.  & 0.2 & 0.3 & 0.4 & 0.1 \\\\\n0.  & 0.  & 0.  & 0.1 & 0.9\\\\\n0.  & 0.  & 0.1 & 0.7 & 0.2 \\\\\n0.  & 0.  & 0.  & 0.  & 0.  \\end{array} \\right]\n$$\n\nIn matrix multipication, we multiply each *row* from the left hand side by each *column* on the right hand side, and sum the result together. In numpy, there's an operator `@` for this.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfirst_step = start_state @ trans_mat\nfirst_step\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([0.  , 0.5 , 0.25, 0.25, 0.  ])\n```\n\n\n:::\n:::\n\n\nNow, our `first_state` row vector represents the probability we're in each state. How do we get the probabilities of our location after the second step? Just multiply again!\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsecond_step = first_step @ trans_mat\nsecond_step\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([0.   , 0.1  , 0.175, 0.4  , 0.325])\n```\n\n\n:::\n:::\n\n\nAnd for the third step:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nthird_step = second_step @ trans_mat\nthird_step\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([0.    , 0.02  , 0.07  , 0.3375, 0.5725])\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Full Matrix Multiplication\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntrans_mat @ trans_mat @ trans_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[0.    , 0.02  , 0.07  , 0.3375, 0.5725],\n       [0.    , 0.008 , 0.051 , 0.299 , 0.642 ],\n       [0.    , 0.    , 0.007 , 0.05  , 0.943 ],\n       [0.    , 0.    , 0.05  , 0.357 , 0.593 ],\n       [0.    , 0.    , 0.    , 0.    , 1.    ]])\n```\n\n\n:::\n:::\n\n:::\n\n## Hidden Markov Models\n\n\"Hidden\" Markov Models, or HMMs, have had a lot of applications in acoustics, specifically in Automated Speech Recognition and Forced Alignment. The core idea is that you can't directly observe the state, but you can observe something *about* the state. One analogy is to use the weather.\n\nLet's say we are, for whatever reason, unable to directly observe the weather outside. But we *are* able to observe whether or not the sidewalk is wet. And we do know the following:\n\n|     | Wet Sidewalk | Dry Sidewalk |\n|:---:|-------------:|-------------:|\n| 🌧️  |          0.9 |          0.1 |\n| 🌞  |          0.2 |          0.8 |\n\nAnd we also know that perhaps the best predictor of weather today is what it was yesterday, so\n\n|     |  🌧️ |  🌞 |\n|:---:|----:|----:|\n| 🌧️  | 0.8 | 0.2 |\n| 🌞  | 0.2 | 0.8 |\n\nSo we have our general Markov Model:\n\n\n```{mermaid}\nflowchart TB\n  subgraph hidden\n    direction LR\n    sunny --> rainy\n    sunny --> sunny\n    rainy --> rainy\n    rainy --> sunny\n  end\n  \n  subgraph observable\n    sunny --> wet\n    sunny --> dry\n    rainy --> wet\n    rainy --> dry\n  end\n```\n\n\nIf we get the sequence\n\n```         \nwet wet wet dry wet dry dry dry\n```\n\nWe can actually work out the probability of the weather state at each point in time.\n\n### Application to ASR\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}