{
  "hash": "f9ce7bd5c09555990d8cb733b0eb2c8a",
  "result": {
    "markdown": "---\ntitle: What *is* Python?\nsubject: And what *is* a programming language?\nfilters:\n    - codeblocklabel\n---\n\nWhen talking about \"Python\" or other programming langauges, we often engage in a form of polysemy[^1] that can be confusing at first. I'll try to unpack the different meanings here.\n\n[^1]: A word is polysemous when it has more than one meaning.\n\n## 📕 Python is set of rules for a formal language\n\nWhen we talk about \"Python\", one thing we sometimes refer to is an abstract set of rules for a formal language.\n\n::: callout\n### 📕 The abstract language\n\nWhen you say:\n\n> I'm learning Python this semester.\n\nYou're talking about the abstract set of rules.\n:::\n\nWe can describe some of these rules in natural language (this isn't how they're *actually* written).\n\n-   If a list of values has been assigned to a variable, when the variable's name is followed `[0]`, return the first value in the list.\n-   If `print(` is followed by a value or variable, which is then followed by `)`, print the value, or the value assigned to the variable.\n-   If a `#` symbol is encountered on a line, ignore everything following it.\n\nThese rules define very precisely how code should be written, and also define what should be *done* when certain patterns of code are encountered, but these rules are abstract, and don't actually *do* anything.\n\n## 🤖 Python is a program that interprets formal language input\n\nSimply having a set of abstract rules can be fun, but it's not so useful if you have no way to actually *do* things. To make code we write actually do anything, we need to use a program called an **Interpreter**.\n\n::: callout\n### 🤖 The Python Interpreter\n\nWhen you say\n\n> I'm having a hard time installing Python.\n\nyou're talking about a Python Interpreter.\n:::\n\nThe Python interpreter processes code, determines whether or not it is valid, then does the things the code told it to do.\n\nCode can get passed to the interpreter many different ways, including\n\n-   In a single text file, called a python \"script\", (usually named to end in `.py`)\n-   In an interactive python \"shell\".\n-   Inside a Jupyter notebook.\n\nFor example, the text in the shaded block below was passed to a Python interpreter, and the interpreter decided that it was invalid (because there is an opening quote `\"`, but not a closing quote).\n\n::: {.cell filename='Python Code' execution_count=1}\n``` {.python .cell-code}\n\"x\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: unterminated string literal (detected at line 1) (20073044.py, line 1)\n```\n:::\n:::\n\n\nThe text in this next shaded block was passed to a Python interpreter. This time, it was deemed valid, and the interpreter did what the code instructed.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(\"hello! \" * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello! hello! hello! \n```\n:::\n:::\n\n\n## ⛰️ Python is an Ecosystem\n\nPeople often say that Python comes \"with batteries included\", meaning it can do a lot of different things out without needing to install any extensions. But you *can* install extensions in the form of additional libraries that extend Python's capabilities.\n\n::: callout\n### ⛰️ The Ecosystem\n\nWhen someone says\n\n> Python is the most widely used language in natural language processing.\n\nThey are talking about the *ecosystem* of libraries for Python hat have been built to do natural language processing.\n:::\n\nSome examples of additional libraries for Python are\n\n-   `numpy`: Allows for effective computation with numbers\n-   `matplotlib`: Makes graphs\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 200)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](what-is-python_files/figure-html/cell-4-output-1.png){width=590 height=411}\n:::\n:::\n\n\n## 🧑‍💻 Python is a social project\n\nThe meanings of \"Python\" we've already talked about are\n\n-   📕 The abstract language\n-   🤖 The Python Interpreter\n-   ⛰️ The Python Ecosystem\n\nUnderstanding how to put all of these pieces together effectively is a *social* project.\n\n::: callout\n### 🧑‍💻 The social project\n\nWhen you say\n\n> So-n-so is really good at Python.\n\nYou are talking about their involvement in the Python social project.\n:::\n\n-   ❌ There is no part of the 📕 *abstract language* that will inform you that there is a very good Python library for doing a certain task.\n-   ❌ The 🤖 *Python Interpreter* won't tell you that there's a better way to do what you're trying to do.\n-   ❌ There are nearly [half a million libraries on ⛰️ *the Python Package Index*](https://pypi.org/), so you can't just peruse it to find what's relevant.\n\nIn order to know newest or most effective way to do things, you need to be involved in 🧑‍💻 *the social project*. That begins within a classroom, then extends to keeping up with blogs and other discourses about changes and developments.\n\nOne way people demonstrate that they are involved in the Python social project is by writing their code *idiomatically*. For example, in the code block above, I included the line `import numpy as np`. But *there's no rule* that we import `numpy` as `np`, it's simply convention.\n\nThis code below will run just as well, but would cause problems for people trying to read your code, because it's not idiomatic.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as jokes\nimport numpy as farts\n\nx = farts.linspace(0, 2 * farts.pi, 200)\ny = farts.sin(x)\n\nfig, ax = jokes.subplots()\nax.plot(x, y)\njokes.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](what-is-python_files/figure-html/cell-5-output-1.png){width=590 height=411}\n:::\n:::\n\n\n## 📕, 🤖, ⛰️, 🧑‍💻 The Polysemy is Ok\n\nIt's ok just say \"Python\" when you're talking about one specific meaning.\n\n",
    "supporting": [
      "what-is-python_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}