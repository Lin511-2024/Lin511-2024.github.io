<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lin511 Course Notes</title>
<link>https://lin511-2024.github.io/notes/</link>
<atom:link href="https://lin511-2024.github.io/notes/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<language>en</language>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Tue, 06 Feb 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Tokenization</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/meetings/03_tokenization.html</link>
  <description><![CDATA[ 




<div class="cell">

</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
A nice token printer
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrap_print(tokens, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tokens):</span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-5">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
</div>
</div>
</div>
</div>
<section id="lesson-1-data-is-messy" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="lesson-1-data-is-messy">Lesson 1: Data is Messy</h2>
<section id="headers-etc." class="level3">
<h3 class="anchored" data-anchor-id="headers-etc.">Headers, etc.</h3>
<p>If you go take a look at the plain-text version of <a href="https://www.gutenberg.org/cache/epub/2701/pg2701.txt">Moby Dick on Project Gutenberg</a>, you’ll see that it starts out with the following block of text:</p>
<div class="codebox">
<div class="langname">
<pre class="langname">txt</pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">The Project Gutenberg eBook of Moby Dick; Or, The Whale</span>
<span id="cb2-2">    </span>
<span id="cb2-3">This ebook is for the use of anyone anywhere in the United States and</span>
<span id="cb2-4">most other parts of the world at no cost and with almost no restrictions</span>
<span id="cb2-5">whatsoever. You may copy it, give it away or re-use it under the terms</span>
<span id="cb2-6">of the Project Gutenberg License included with this ebook or online</span>
<span id="cb2-7">at www.gutenberg.org. If you are not located in the United States,</span>
<span id="cb2-8">you will have to check the laws of the country where you are located</span>
<span id="cb2-9">before using this eBook.</span>
<span id="cb2-10"></span>
<span id="cb2-11">Title: Moby Dick; Or, The Whale</span>
<span id="cb2-12"></span>
<span id="cb2-13"></span>
<span id="cb2-14">Author: Herman Melville</span>
<span id="cb2-15"></span>
<span id="cb2-16">Release date: July 1, 2001 [eBook #2701]</span>
<span id="cb2-17">                Most recently updated: August 18, 2021</span>
<span id="cb2-18"></span>
<span id="cb2-19">Language: English</span>
<span id="cb2-20"></span>
<span id="cb2-21"></span>
<span id="cb2-22"></span>
<span id="cb2-23">*** START OF THE PROJECT GUTENBERG EBOOK MOBY DICK; OR, THE WHALE ***</span></code></pre></div>
</div>
<p>And if you scroll to the very bottom of the file, you’ll also find a <em>very</em> long block of text describing the Project Gutenberg License. If we wanted to analyze the text of <em>Moby Dick</em>, we’d have to make sure to remove these headers and footers appropriately.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Header removal
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I’ve been using <code>gutenbergpy</code> to get text from project Gutenberg, which has a special function <code>gutenbergpy.textget.strip_headers()</code> to handily remove these headers.</p>
</div>
</div>
</div>
<p>Similarly, if you wanted to analyze the text of the course notes, and you downloaded the html page, on each page you’d be faced with a <em>long</em> header looking like this:</p>
<div class="codebox">
<div class="langname">
<pre class="langname">html</pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb3-1">!DOCTYPE html&gt;</span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">html</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> xmlns</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.w3.org/1999/xhtml"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> xml:lang</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">head</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generator"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto-1.4.549"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"viewport"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width=device-width, initial-scale=1.0, user-scalable=yes"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"author"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Josef Fruehwald"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dcterms.date"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> content</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-16"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Lin511-2024 - Regular Languages and Finite State Machines<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">title</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">style</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-14">code{<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">white-space</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">pre-wrap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span>
<span id="cb3-15">span<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.smallcaps</span>{<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">font-variant</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">small-caps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span>
<span id="cb3-16">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.columns</span>{<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">flex</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">gap</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span>
<span id="cb3-17">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.column</span>{<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">flex</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">overflow-x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span>
<span id="cb3-18">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.hanging-indent</span>{<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">text-indent</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1.5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span>
<span id="cb3-19">ul<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.task-list</span>{<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">list-style</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span>
<span id="cb3-20">ul<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.task-list</span> li input<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checkbox"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb3-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">width</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */</span> </span>
<span id="cb3-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">vertical-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">middle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24">}</span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* CSS for syntax highlighting */</span></span>
<span id="cb3-26">pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">white-space</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">pre</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">position</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">relative</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-27">pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">line-height</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-28">pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:empty</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">height</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">overflow</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">visible</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-30">code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">inherit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">text-decoration</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">inherit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-31">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-32">pre<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">@media</span> <span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">screen</span> {</span>
<span id="cb3-34">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">overflow</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-35">}</span>
<span id="cb3-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">@media</span> <span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">print</span> {</span>
<span id="cb3-37">pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">white-space</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">pre-wrap</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-38">pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">text-indent</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">padding-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-39">}</span>
<span id="cb3-40">pre<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.numberSource</span> code</span>
<span id="cb3-41">  { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">counter-reset</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">source-line 0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-42">pre<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.numberSource</span> code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span</span>
<span id="cb3-43">  { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">position</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">relative</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">counter-increment</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">source-line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-44">pre<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.numberSource</span> code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> a<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:first-child::before</span></span>
<span id="cb3-45">  { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">content</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">counter(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">source-line</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">position</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">relative</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">text-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">right</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">vertical-align</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">baseline</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">border</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">inline-block</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-webkit-touch-callout</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-webkit-user-select</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-49">    -khtml-user-select<span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-moz-user-select</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ms-user-select</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">user-select</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">padding</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">width</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-52">  }</span>
<span id="cb3-53">pre<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.numberSource</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">padding-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-54">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span></span>
<span id="cb3-55">  {   }</span>
<span id="cb3-56"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">@media</span> <span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">screen</span> {</span>
<span id="cb3-57">pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> code<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> span <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> a<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:first-child::before</span> { <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">text-decoration</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">underline</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> }</span>
<span id="cb3-58">}</span>
<span id="cb3-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* CSS for citations */</span></span>
<span id="cb3-60">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.csl-bib-body</span> { }</span>
<span id="cb3-61">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.csl-entry</span> {</span>
<span id="cb3-62">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">clear</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">both</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-63">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin-bottom</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-64">}</span>
<span id="cb3-65"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.hanging-indent</span> div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.csl-entry</span> {</span>
<span id="cb3-66">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">text-indent</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-68">}</span>
<span id="cb3-69">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.csl-left-margin</span> {</span>
<span id="cb3-70">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">min-width</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-71">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">float</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">left</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-72">}</span>
<span id="cb3-73">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.csl-right-inline</span> {</span>
<span id="cb3-74">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-75">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">padding-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-76">}</span>
<span id="cb3-77">div<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.csl-indent</span> {</span>
<span id="cb3-78">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">margin-left</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">em</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-79">}<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">style</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-80">...</span></code></pre></div>
</div>
<p>That’s not even the end of it.</p>
</section>
<section id="markup" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="markup">Markup</h3>
<p>Once we get to the <em>content</em> of the text, there’s still “markup” to deal with. Here’s a sentence from <em>Moby Dick</em>.</p>
<div class="codebox">
<div class="langname">
<pre class="langname">txt</pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb4-1">But _being paid_,—what will compare with it?</span></code></pre></div>
</div>
<p>The underscores <code>_</code> are there to indicate italics in the original text. Here’s how it looks when rendered:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/meetings/assets/being_paid.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:100.0%"></p>
<figcaption class="margin-caption">Rendered text</figcaption>
</figure>
</div>
<p>If we just split this text up into words based on spaces, those underscores (and other punctiuation) are going to stuck around.</p>
<div class="codebox">
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"But _being paid_,—what will compare with it?"</span></span>
<span id="cb5-2">wrap_print(sentence.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'But'   '_being'    'paid_,—what'   'will'  'compare'   
'with'  'it?'   </code></pre>
</div>
</div>
</div>
<p>I don’t think “paid_,-what” is a word.</p>
<p>The same issue goes for trying to analyze text from the course notes. Here a paragraph from the <a href="../../notes/meetings/01_fsm.html">finite state automata notes</a>.</p>
<div class="codebox">
<div class="langname">
<pre class="langname">html</pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-2">  But since this is <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">em</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>Computational<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">em</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> Linguistics, </span>
<span id="cb7-3">  we should probably learn about what is </span>
<span id="cb7-4">  “regular” about “regular” expressions, </span>
<span id="cb7-5">  because it’s related to formal language </span>
<span id="cb7-6">  theory!</span>
<span id="cb7-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</div>
<p>Again, if we want to analyze the text, we’d need to extract it from this markup.</p>
</section>
</section>
<section id="lesson-2-language-is-complex." class="level2">
<h2 class="anchored" data-anchor-id="lesson-2-language-is-complex.">Lesson 2: Language is complex.</h2>
<p>We already started touching on how we may need to “case-fold” text before we analyze it.</p>
<div class="codebox">
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb8-3"></span>
<span id="cb8-4">phrase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""The 2019 film Cats is a movie about cats. </span></span>
<span id="cb8-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Cats appear in every scene. </span></span>
<span id="cb8-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A cat can always be seen"""</span></span>
<span id="cb8-7"></span>
<span id="cb8-8">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\s"</span>, phrase)</span>
<span id="cb8-9">cat_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(words)</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cat_count:</span>
<span id="cb8-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> re.match(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Cc]at"</span>, key):</span>
<span id="cb8-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cat_count[key]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Cats    2
cats.   1
cat 1</code></pre>
</div>
</div>
</div>
<p>Converting the whole phrase to lowercase will help, but there’s still the issue of punctuation.</p>
<p><strong>Tokenization</strong> is the non-trivial task of splitting text up into meaningful units.</p>
<section id="tokenization" class="level3">
<h3 class="anchored" data-anchor-id="tokenization">Tokenization</h3>
<p>Setting aside <em>semantic</em> issues, there are a lot of things that happen inside of text, especially if it is transcribed speech, that makes normalizing text and <strong>tokenizing</strong> it way more challenging than just splitting up on white space and stripping out punctuation, even just for English.</p>
<section id="places-to-leave-in-punctuation" class="level4">
<h4 class="anchored" data-anchor-id="places-to-leave-in-punctuation">Places to leave in punctuation</h4>
<p>Some examples given by Jurafsky &amp; Martin for where you might want to leave in punctuation are:</p>
<ul>
<li><p>You don’t want to eliminate punctuation from inside <code>Ph.D</code>, or <code>m.p.h.</code>. You also don’t want to eliminate it from some proper names, like ampersands in <code>Procter &amp; Gamble</code>, <code>Texas A&amp;M</code>, <code>A&amp;W</code>, <code>m&amp;m's</code>.</p></li>
<li><p>You’ll want to keep formatting in numerals, and not split them into separate words. These are all possible numeric formats cross culturally for the same quantity</p>
<ul>
<li><p><code>1,000.55</code></p></li>
<li><p><code>1.000,55</code></p></li>
<li><p><code>1 000,55</code></p></li>
</ul></li>
<li><p>Currency symbols should probably be kept together with their numerals, and depending on the culture &amp; denomination.</p>
<ul>
<li><p><code>$0.99</code></p></li>
<li><p><code>99¢</code></p></li>
<li><p><code>€0,99</code></p></li>
</ul></li>
<li><p>Dates: There are so many different permutations on how dates can be formatted that I shouldn’t list them all here, but here are some.<sup>1</sup></p>
<ul>
<li><p>4 digit year, 2 digit month, 2 digit day</p>
<ul>
<li><code>2022-09-12</code></li>
<li><code>2022/09/12</code></li>
</ul></li>
<li><p>4 digit year, 1 or 2 digit month, 2 digit day</p>
<ul>
<li><code>2022-9-12</code></li>
<li><code>2022/9/12</code></li>
</ul></li>
<li><p>2 digit day, 2 digit month, 4 digit year</p>
<ul>
<li><code>12-09-2022</code></li>
<li><code>12/09/2022</code></li>
</ul></li>
<li><p>2 digit day, 1 or 2 digit month, 4 digit year</p>
<ul>
<li><code>12-9-2022</code></li>
<li><code>12/9/2022</code></li>
</ul></li>
<li><p>2 digit day, 2 digit month, 2 digit year</p>
<ul>
<li><code>12-09-22</code></li>
<li><code>12/09/22</code></li>
</ul></li>
<li><p>2 digit month, 2 digit day, 4 digit year</p>
<ul>
<li><code>09-12-2022</code></li>
<li><code>09/12/2022</code></li>
</ul></li>
<li><p>1 digit month, 2 digit day, 2 digit year</p>
<ul>
<li><code>9-12-22</code></li>
<li><code>9/12/22</code></li>
</ul></li>
</ul></li>
<li><p>Emoticons,<sup>2</sup> where the token is entirely punctuation <code>:)</code>, <code>&gt;.&lt;</code>.</p></li>
</ul>
</section>
<section id="places-to-split-up-words" class="level4">
<h4 class="anchored" data-anchor-id="places-to-split-up-words">Places to split up words</h4>
<p>Sometimes the tokens you get back from whitespace tokenization ought to be split up even further. One example might be hyphenated words, like <code>hard-won</code>.</p>
<ul>
<li><code>hard-won</code> ➔ <code>hard</code>, <code>won</code> or <code>hard</code>, <code>-</code>, <code>won</code>.</li>
</ul>
<p>Another example involves clitics, like <code>n't</code> or <code>'re</code> in English.</p>
<ul>
<li><p><code>isn't</code> ➔ <code>is</code>, <code>n't</code></p></li>
<li><p><code>can't</code> ➔ <code>ca</code>, <code>n't</code></p></li>
<li><p><code>what're</code> ➔ <code>what</code>, <code>'re</code></p></li>
</ul>
</section>
<section id="places-to-glue-words-together" class="level4">
<h4 class="anchored" data-anchor-id="places-to-glue-words-together">Places to glue words together</h4>
<p>You might want to also glue together tokens from whitespace tokenization.</p>
<ul>
<li><p><code>New</code>, <code>York</code>, <code>City</code> ➔ <code>New York City</code></p></li>
<li><p><code>Super</code>, <code>Smash</code>, <code>Brothers</code> ➔ <code>Super Smash Brothers</code></p></li>
</ul>
</section>
<section id="challenges-with-speech-and-text" class="level4">
<h4 class="anchored" data-anchor-id="challenges-with-speech-and-text">Challenges with speech and text</h4>
<ul>
<li><i class="fa-solid fa-keyboard" aria-label="keyboard"></i>: $1,500
<ul>
<li><p><i class="fa-solid fa-bullhorn" aria-label="bullhorn"></i>: “one thousand five hundred dollars”</p></li>
<li><p><i class="fa-solid fa-bullhorn" aria-label="bullhorn"></i>: “fifteen hundred dollars”</p></li>
<li><p><i class="fa-solid fa-bullhorn" aria-label="bullhorn"></i>: “one and a half thousand dollars”</p></li>
<li><p><i class="fa-solid fa-bullhorn" aria-label="bullhorn"></i>: “one point five thousand dollars”</p></li>
</ul></li>
</ul>
</section>
</section>
</section>
<section id="tokenizers--part-1-" class="level2">
<h2 class="anchored" data-anchor-id="tokenizers--part-1-">Tokenizers -part 1-</h2>
<p>The Natural Language Toolkit library <span class="citation" data-cites="bird2009">(Bird, Klein, and Loper 2009)</span> has a few tokenizers available.</p>
<div class="codebox">
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nltk</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nltk.tokenize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> word_tokenize</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## The first time you run it, </span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## you need to download some data</span></span>
<span id="cb10-6">nltk.download(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'punkt'</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">tokens_01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> word_tokenize(sentence)</span>
<span id="cb11-2">wrap_print(tokens_01)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'But'   '_being'    'paid_' ',' '—what' 
'will'  'compare'   'with'  'it'    '?' </code></pre>
</div>
</div>
</div>
<p>The spacy package also has tokenizers available,</p>
<div class="codebox">
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install spacy</span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spacy</span> info en_core_web_sm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--url</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spacy</span>
<span id="cb14-2">nlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spacy.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en_core_web_sm"</span>)</span>
<span id="cb14-3">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nlp(sentence)</span>
<span id="cb14-4">wrap_print(doc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'But'   '_' 'being' 'paid_,—what'   'will'  
'compare'   'with'  'it'    '?' </code></pre>
</div>
</div>
</div>
</section>
<section id="data-sparsity" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-sparsity">Data Sparsity</h2>
<p>With <em>any</em> tokenization of text, you’re going to wind up with a lot of tokens that appear just once or twice.</p>
<div class="cell">

</div>
<div class="cell">

</div>
<div class="cell">

</div>
<p>Here’s a plot of the top 10 most frequent tokens in <em>Moby Dick</em>.</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/meetings/03_tokenization_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">Top 10 tokens in Moby Dick</figcaption>
</figure>
</div>
</div>
</div>
<p>The trend of tokens getting less and less frequent continues</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/meetings/03_tokenization_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">All tokens in Moby Dick</figcaption>
</figure>
</div>
</div>
</div>
<p>There is also a general phenomenon that the larger your corpus of tokens gets, the larger the vocabulary will get.</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/meetings/03_tokenization_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">As the number of tokens increases, the size of the vocabulary increases</figcaption>
</figure>
</div>
</div>
</div>
<p>This means that if you have an “open vocabulary” tokenization method, where you can always create a new token based on some rules, you’ll <em>never</em> be able to analyze enough text such that you’ll never encounter a new token you’ve never seen before.</p>
<div class="cell page-columns page-full">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/meetings/03_tokenization_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" style="width:90.0%"></p>
<figcaption class="margin-caption">The probability of a new type as token size increases</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="closed-vocabulary-tokenization-byte-pair-encoding" class="level2">
<h2 class="anchored" data-anchor-id="closed-vocabulary-tokenization-byte-pair-encoding">Closed Vocabulary Tokenization (Byte Pair Encoding)</h2>
<p>A different approach to tokenization is to have a pre-specified closed vocabulary that you use to pull tokens out of text.</p>
<p>Let’s start out with a fake training of a byte pair encoder with the simple vocabulary “cats can’t canter”. We kick things off treating every character as a token, plus a specialized start-of-word symbol, which I’m representing with <code>_</code>.</p>
<div>

</div>
<div class="quarto-layout-panel" style="border-style: solid;" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>Tokens</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>_ c a t s
_ c a n ' t
_ c a n t e r</code></pre>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>Types</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>{'a', 'e', 't', 'r', 
's', 'n', 'c', "'", '_'}</code></pre>
</div>
</div>
</div>
<p>This is, in principle, the smallest and <em>simplest</em> tokenization we could do for any input text. While the total number of <em>words</em> is infinite, the total number of characters or symbols we use to create those words is finite.</p>
<p>The next step is to count up all of the pairs (or bigrams) of tokens in the training data. In this case, both (<code>_</code>, <code>c</code>) and (<code>c</code>, <code>a</code>) appear equally commonly, so I make a decision and say (<code>_</code>, <code>c</code>) is the one we’ll process first. We’ll paste them together, call them a new type, and replace all (<code>_</code>, <code>c</code>) sequences with <code>_c</code>.</p>
<div>

</div>
<div class="quarto-layout-panel" style="border-style: solid;" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>tokens</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>_c a t s
_c a n ' t
_c a n t e r</code></pre>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>types</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>{'a', 'e', 't', 'r', 
's', 'n', 'c', "'", ' ',
`_c`}</code></pre>
</div>
</div>
</div>
<p>Repeating the process, the most frequently occurring bigram is now (<code>_c</code>, <code>a</code>), so we’ll add <code>_ca</code> as a new type, and replace all (<code>_c</code>, <code>a</code>) sequences with <code>_ca</code>.</p>
<div>

</div>
<div class="quarto-layout-panel" style="border-style: solid;" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>tokens</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>_ca t s 
_ca n ' t _
_ca n t e r _</code></pre>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>types</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>{'a', 'e', 't', 'r', 
's', 'n', 'c', "'", ' ', 
'_c', '_ca'}</code></pre>
</div>
</div>
</div>
<p>Finally, the last most frequent sequence is (<code>_ca</code>, <code>n</code>), so we’ll add <code>_can</code> to the vocabulary, and collapse (<code>_ca</code>, <code>n</code>) sequences.</p>
<div>

</div>
<div class="quarto-layout-panel" style="border-style: solid;" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>tokens</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>_ca t s
_can ' t
_can t e r</code></pre>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<p>types</p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<pre><code>{'a', 'e', 't', 'r', 
's', 'n', 'c', "'", ' ', 
'_c', '_ca', '_can'}</code></pre>
</div>
</div>
</div>
<p>We’ll stop at that point, but we could either continue for a fixed number of iterations, or until our type, or vocabulary size reaches a fixed number.</p>
<section id="the-use-of-byte-pair-encoding" class="level3">
<h3 class="anchored" data-anchor-id="the-use-of-byte-pair-encoding">The use of Byte Pair Encoding</h3>
<p>This kind of tokenization approach is necessary when you want to be able to tokenizer <em>anything</em>, and also have a pre-specified vocabulary size. We can see how OpenAI’s byte pair encoder handles the first few sentences of <em>Moby Dick</em></p>
<div class="codebox">
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tiktoken</span>
<span id="cb24-2">enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiktoken.encoding_for_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">mb_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Call me Ishmael. Some years ago—never mind how long precisely—having</span></span>
<span id="cb25-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">little or no money in my purse, and nothing particular to interest me</span></span>
<span id="cb25-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">on shore, I thought I would sail about a little and see the watery part</span></span>
<span id="cb25-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">of the world. It is a way I have of driving off the spleen and</span></span>
<span id="cb25-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">regulating the circulation.</span></span>
<span id="cb25-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb25-10">  enc.decode([token]) </span>
<span id="cb25-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> enc.encode(mb_string.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb25-12">]</span>
<span id="cb25-13"></span>
<span id="cb25-14">wrap_print(tokens)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>' Call' ' me'   ' Ish'  'ma'    'el'    
'.' ' Some' ' years'    ' ago'  '—' 
'never' ' mind' ' how'  ' long' ' precisely'    
'—' 'having'    ' little'   ' or'   ' no'   
' money'    ' in'   ' my'   ' purse'    ',' 
' and'  ' nothing'  ' particular'   ' to'   ' interest' 
' me'   ' on'   ' shore'    ',' ' I'    
' thought'  ' I'    ' would'    ' sail' ' about'    
' a'    ' little'   ' and'  ' see'  ' the'  
' wat'  'ery'   ' part' ' of'   ' the'  
' world'    '.' ' It'   ' is'   ' a'    
' way'  ' I'    ' have' ' of'   ' driving'  
' off'  ' the'  ' sple' 'en'    ' and'  
' regulating'   ' the'  ' circulation'  '.' ' ' </code></pre>
</div>
</div>
</div>



</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-bird2009" class="csl-entry">
Bird, Steven, Ewan Klein, and Edward Loper. 2009. <em>Natural language processing with Python</em>. Beijing: O’Reilly.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m being tedious here on purpose, because you have to keep in mind that if you wrote a function to handle just one of these possible date formats, it would not immediately translate over to the others! There are also <em>entire libraries</em> in multiple programming languages for parsing and reformatting date times. Python: <a href="https://docs.python.org/3/library/datetime.html">datetime</a>, R: <a href="https://lubridate.tidyverse.org/">lubridate</a>.↩︎</p></li>
<li id="fn2"><p>This example <em>isn’t</em> from Jurafsky &amp; Martin.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {Tokenization},
  date = {2024-02-06},
  url = {https://lin511-2024.github.io/notes/meetings/03_tokenization.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“Tokenization.”</span> February 6, 2024.
<a href="https://lin511-2024.github.io/notes/meetings/03_tokenization.html">https://lin511-2024.github.io/notes/meetings/03_tokenization.html</a>.
</div></div></section></div> ]]></description>
  <category>compling</category>
  <guid>https://lin511-2024.github.io/notes/meetings/03_tokenization.html</guid>
  <pubDate>Tue, 06 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>More Python: Poetry, Lists, Loops</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/programming/03_python_plus.html</link>
  <description><![CDATA[ 




<p>This lesson has two goals:</p>
<ol type="1">
<li>Begin walking you through processing text in Python, with an eye towards our next computational linguistics topic: ngram models.</li>
<li>To introduce you to additional datastructures that we didn’t get to cover in the original python workthrough.</li>
</ol>
<section id="finding-and-reading-in-files" class="level2">
<h2 class="anchored" data-anchor-id="finding-and-reading-in-files">Finding and reading in files</h2>
<p>In order to read in a file, first we need to tell python <em>where</em> a file is. We’ll do this with <code>pathlib.Path()</code>. For a recap of what paths <em>are</em>, see <a href="../../notes/concepts/02_undersdanding-paths.html">Understanding Directories</a>.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span></code></pre></div>
</div>
<p>Let’s just call <code>Path()</code> and see what it gives us.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">here <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path()</span>
<span id="cb2-2">here</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>PosixPath('.')</code></pre>
</div>
</div>
<p>Some detail of what gets printed out for <code>here</code> will depend on your operating system, but one thing that should be the same across the board is that <code>'.'</code> is a placeholder meaning “the dirtory you’re currently in.</p>
<p>To see the full path to your current directory, we’ll use the <code>.resolve()</code> method.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">here.resolve()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>PosixPath('/workspaces/Lin511-2024.github.io/notes/programming')</code></pre>
</div>
</div>
<p>What this full path looks like <em>really</em> depends on where you are running your code.</p>
<section id="getting-directory-contents" class="level3">
<h3 class="anchored" data-anchor-id="getting-directory-contents">Getting directory contents</h3>
<p>To get the full contents of a directory, we’ll use the the <code>.glob()</code> method. To get readable output, we need to wrap <code>list()</code> around everything.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-2">    here.glob(pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>)</span>
<span id="cb6-3">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>[PosixPath('03_python_plus.ipynb'),
 PosixPath('assets'),
 PosixPath('_02_Paths.ipynb'),
 PosixPath('01_Python_basics.ipynb'),
 PosixPath('00_setup.qmd'),
 PosixPath('poems'),
 PosixPath('02_regex.ipynb')]</code></pre>
</div>
</div>
</section>
</section>
<section id="lists-a-new-data-structure" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="lists-a-new-data-structure">*Lists (a new data structure)</h2>
<p>The code above created a “list”, which is, like the name suggests, a list of values.</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">here_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb8-2">    here.glob(pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>)</span>
<span id="cb8-3">)</span></code></pre></div>
</div>
<p>We can create our own lists by hand, like so:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">my_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>] </span></code></pre></div>
</div>
<section id="doing-things-with-lists" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="doing-things-with-lists">Doing things with lists</h3>
<section id="getting-their-length" class="level4">
<h4 class="anchored" data-anchor-id="getting-their-length">Getting their length</h4>
<p>To get the length of anything, including lists, <code>len()</code>.</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(here_list)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>7</code></pre>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(my_list)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>5</code></pre>
</div>
</div>
</section>
<section id="getting-a-value-from-a-list" class="level4">
<h4 class="anchored" data-anchor-id="getting-a-value-from-a-list">Getting a value from a list</h4>
<p>To get a value out of a list in python, we need to <a href="../../notes/concepts/00_glossary.html#index-verb">“index”</a> it. To get just the first value from a list, we’ll use the index <code>0</code>.</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">here_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>PosixPath('03_python_plus.ipynb')</code></pre>
</div>
</div>
<div id="cell-18" class="cell" data-execution_count="10">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'a'</code></pre>
</div>
</div>
<p>To get a range of values, we’ll use a <a href="../../notes/concepts/00_glossary.html#slice-verb">“slice”</a> operator <code>:</code>.</p>
<div id="cell-20" class="cell" data-execution_count="11">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>['a', 'b', 'c']</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="12">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>['b', 'c', 'd']</code></pre>
</div>
</div>
</section>
<section id="how-to-think-about-indices" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="how-to-think-about-indices">How to think about indices</h4>
<p>The index for <code>'a'</code> is 0, and the index for <code>'c'</code> is 2.</p>
<div id="cell-23" class="cell" data-execution_count="13">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">my_list.index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>0</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="14">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">my_list.index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>2</code></pre>
</div>
</div>
<p>But to get out every value between <code>'a'</code> and <code>'c'</code>, we need to use <code>0:3</code>.</p>
<div id="cell-26" class="cell" data-execution_count="15">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">my_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>['a', 'b', 'c']</code></pre>
</div>
</div>
<p>The way to conceptualize these numeric indices is that they come <em>between</em> the values in a list.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/programming/assets/0_index.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">Index locations</figcaption>
</figure>
</div>
<p>When we give just a single number as an index, we get back the value immediately to the right of the index.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/programming/assets/1_index.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">Single value index</figcaption>
</figure>
</div>
<p>When we give an index slice, we get back every value between the start of the slice and the end.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/programming/assets/2_index.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">Slice indexing</figcaption>
</figure>
</div>
<section id="negative-indexing" class="level5 page-columns page-full">
<h5 class="anchored" data-anchor-id="negative-indexing">Negative indexing</h5>
<p>Sometimes, you know you’ll want the last, or second to last value from a list, so there are also negative indicies defined.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://lin511-2024.github.io/notes/programming/assets/3_index.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">Negative indexing</figcaption>
</figure>
</div>
<p>These work in the same way. A single index returns the value immediately to the left, a slice returns the values between the first and the second.</p>
<div id="cell-28" class="cell" data-execution_count="16">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">my_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>'e'</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="17">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">my_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>['c', 'd']</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-execution_count="18">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">my_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>['d', 'e']</code></pre>
</div>
</div>
</section>
</section>
</section>
</section>
<section id="reading-in-a-text-file" class="level2">
<h2 class="anchored" data-anchor-id="reading-in-a-text-file">Reading in a text file</h2>
<p>I’ve put two poems in the <code>poems</code> directory right next to the current notebook. We can get a list of them by</p>
<ul>
<li>adding <code>poems/</code> to the <code>here</code> path</li>
<li>Globbing the new path.</li>
</ul>
<div id="cell-32" class="cell" data-execution_count="19">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">poems_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> here.joinpath(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"poems"</span>)</span>
<span id="cb34-2">poems_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(poems_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>))</span>
<span id="cb34-3">poems_files</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>[PosixPath('poems/the_tiger.txt'), PosixPath('poems/this_is_just_to_say.txt')]</code></pre>
</div>
</div>
<p>Let’s read in <code>poems/this_is_just_to_say.txt</code>.</p>
<div id="cell-34" class="cell" data-execution_count="20">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">plums_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poems_files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb36-2">plums_path</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>PosixPath('poems/this_is_just_to_say.txt')</code></pre>
</div>
</div>
<p>Right now <code>plums_path</code> just contains information about <em>where</em> the file is. In order to read its contents into python, we need to</p>
<ol type="1">
<li>Open it.</li>
<li>Read it.</li>
<li>Close it.</li>
</ol>
<p>We’ll manage all three steps with the following code.</p>
<div id="cell-36" class="cell" data-execution_count="21">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">plums_poem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plums_path.read_text()</span>
<span id="cb38-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(plums_poem)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>This Is Just To Say
By William Carlos Williams

I have eaten
the plums
that were in
the icebox

and which
you were probably
saving
for breakfast

Forgive me
they were delicious
so sweet
and so cold</code></pre>
</div>
</div>
</section>
<section id="doing-things-to-strings" class="level2">
<h2 class="anchored" data-anchor-id="doing-things-to-strings">Doing things to strings</h2>
<p>Right now, <code>plums_poem</code> is just one long string. When we print it out, we get some nice formatting, but if we look at the unformatted output, you’ll see it’s one long string with newline characters: <code>\n</code>.</p>
<div id="cell-38" class="cell" data-execution_count="22">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">plums_poem</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>'This Is Just To Say\nBy William Carlos Williams\n\nI have eaten\nthe plums\nthat were in\nthe icebox\n\nand which\nyou were probably\nsaving\nfor breakfast\n\nForgive me\nthey were delicious\nso sweet\nand so cold'</code></pre>
</div>
</div>
<p>To start doing computational linguistics things to the poem, we’ll need to start splitting it up into pieces, like separate lines, or separate words.</p>
<section id="upper-and-lower-case" class="level3">
<h3 class="anchored" data-anchor-id="upper-and-lower-case">Upper and Lower case</h3>
<p>One thing that can make life a little easier is to <a href="../../notes/concepts/00_glossary.html#case-folding">“case fold”</a> text data, which we can do with the <code>.lower()</code> and <code>.upper()</code> methods.</p>
<div id="cell-40" class="cell" data-execution_count="23">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">plums_lower <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plums_poem.lower()</span>
<span id="cb42-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(plums_lower[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>this is just to say
by william carlos williams</code></pre>
</div>
</div>
</section>
<section id="splitting-into-lines" class="level3">
<h3 class="anchored" data-anchor-id="splitting-into-lines">Splitting into lines</h3>
<p>We can also split the poem into separate lines with the <code>.split()</code> method, which will return a list with the poem split by whatever value we give it.</p>
<div id="cell-42" class="cell" data-execution_count="24">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split according to newlines</span></span>
<span id="cb44-2">plums_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plums_poem.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb44-3">plums_lines</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>['This Is Just To Say',
 'By William Carlos Williams',
 '',
 'I have eaten',
 'the plums',
 'that were in',
 'the icebox',
 '',
 'and which',
 'you were probably',
 'saving',
 'for breakfast',
 '',
 'Forgive me',
 'they were delicious',
 'so sweet',
 'and so cold']</code></pre>
</div>
</div>
<p>Now, we can get each individual line by indexing.</p>
<div id="cell-44" class="cell" data-execution_count="25">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">plums_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>'This Is Just To Say'</code></pre>
</div>
</div>
</section>
</section>
<section id="looping-through-the-poem" class="level2">
<h2 class="anchored" data-anchor-id="looping-through-the-poem">Looping through the poem</h2>
<p>Above, I ran <code>.split()</code> on the non-case folded poem. What if I wanted to lowercase each line of the poem now, <em>after</em> the fact. We can use a <code>for</code> loop to do this. Let’s build up to it.</p>
<section id="for-loop-skeleton" class="level3">
<h3 class="anchored" data-anchor-id="for-loop-skeleton">for-loop skeleton</h3>
<div id="cell-46" class="cell" data-execution_count="26">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines:</span>
<span id="cb48-2">    myspace_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xXx "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" xXx"</span></span>
<span id="cb48-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(myspace_line)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>xXx This Is Just To Say xXx
xXx By William Carlos Williams xXx
xXx  xXx
xXx I have eaten xXx
xXx the plums xXx
xXx that were in xXx
xXx the icebox xXx
xXx  xXx
xXx and which xXx
xXx you were probably xXx
xXx saving xXx
xXx for breakfast xXx
xXx  xXx
xXx Forgive me xXx
xXx they were delicious xXx
xXx so sweet xXx
xXx and so cold xXx</code></pre>
</div>
</div>
<p>Let’s unpack the first line of the for loop:</p>
<p><code>for line in plums_line:</code></p>
<p>This tells python to take each value in <code>plums_line</code>, assign it to a new variable called <code>line</code>, then <em>do</em> something. After it has <em>done</em> something, it goes and grabs the next value from <code>plums_line</code>, assigns it to a variable called <code>line</code>, and starts over.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Some common misconceptions
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>What we tell python to name the variable it creates does <em>not</em> affect the way the for loop works. We called it <code>line</code> to make the code readable. If we really wanted to pull out every noun from the poem, and said <code>for noun in plums_lines:</code>, it is <em>not</em> going to pull out every noun.</li>
</ol>
<div id="cell-48" class="cell" data-execution_count="27">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> noun <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]:</span>
<span id="cb50-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(noun)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>This Is Just To Say
By William Carlos Williams</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><em>What</em> we do inside of the loop doen’t have to involve the <code>line</code> variable at all.</li>
</ol>
<div id="cell-50" class="cell" data-execution_count="28">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines:</span>
<span id="cb52-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum
plum</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>What the for-loop did does not get saved anywhere. The only “state” that gets preserved at all is the final one.</li>
</ol>
<div id="cell-52" class="cell" data-execution_count="29">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">myspace_line</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>'xXx and so cold xXx'</code></pre>
</div>
</div>
</div>
</div>
<p>This last point is super important. To save, or remember, what happened inside of a for-loop, you need to do two things.</p>
<ol type="1">
<li>Create a variable <em>outside</em> of the loop.</li>
<li>Update the variable <em>inside</em> of the loop.</li>
</ol>
<p>For example, if we wanted to get the total number of characters in the peom, we’d need to</p>
<ol type="1">
<li>Create a collector variable <em>outside</em> of the loop.</li>
<li>Add update its total value <em>inside</em> of the loop.</li>
</ol>
<div id="cell-55" class="cell" data-execution_count="30">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">total_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb56-2"></span>
<span id="cb56-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The total number of chars is now </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_chars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-4"></span>
<span id="cb56-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines:</span>
<span id="cb56-6">    line_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line)</span>
<span id="cb56-7">    total_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> line_len</span>
<span id="cb56-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The total number of chars is now </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_chars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-9"></span>
<span id="cb56-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The final number of chars is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_chars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The total number of chars is now 0
The total number of chars is now 19
The total number of chars is now 45
The total number of chars is now 45
The total number of chars is now 57
The total number of chars is now 66
The total number of chars is now 78
The total number of chars is now 88
The total number of chars is now 88
The total number of chars is now 97
The total number of chars is now 114
The total number of chars is now 120
The total number of chars is now 133
The total number of chars is now 133
The total number of chars is now 143
The total number of chars is now 162
The total number of chars is now 170
The total number of chars is now 181
The final number of chars is 181</code></pre>
</div>
</div>
<p>This use of a for-loop makes the “loop” part clearer.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
    state "for line in lines:" as for
    state if_line &lt;&lt;choice&gt;&gt;
    state fork &lt;&lt;fork&gt;&gt;
    state fork1 &lt;&lt;fork&gt;&gt;
    [*] --&gt; fork1
    fork1 --&gt; total_chars: set to 0
    fork1 --&gt; for
    for --&gt; if_line
    if_line --&gt; fork: If another line
    if_line --&gt; [*]: If no more lines
    fork --&gt; total_chars: +len(line)
    fork --&gt; for
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>To actually lowercase the poem now, we need to</p>
<ol type="1">
<li>Create an empty list <em>outside</em> of the loop.</li>
<li>Add the lowercased line to this list <em>inside</em> of the loop.</li>
</ol>
<div id="cell-58" class="cell" data-execution_count="31">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">lower_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb58-2"></span>
<span id="cb58-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines:</span>
<span id="cb58-4">    lower_lines.append(</span>
<span id="cb58-5">        line.lower()</span>
<span id="cb58-6">    )</span>
<span id="cb58-7"></span>
<span id="cb58-8">lower_lines</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>['this is just to say',
 'by william carlos williams',
 '',
 'i have eaten',
 'the plums',
 'that were in',
 'the icebox',
 '',
 'and which',
 'you were probably',
 'saving',
 'for breakfast',
 '',
 'forgive me',
 'they were delicious',
 'so sweet',
 'and so cold']</code></pre>
</div>
</div>
</section>
<section id="filtering-the-poem" class="level3">
<h3 class="anchored" data-anchor-id="filtering-the-poem">Filtering the poem</h3>
<p>There are a few lines of the poem that are blank and have a length of 0.</p>
<div id="cell-60" class="cell" data-execution_count="32">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lower_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
</div>
<div id="cell-61" class="cell" data-execution_count="33">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lower_lines[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0</code></pre>
</div>
</div>
<p>We can create a new list without these lines by</p>
<ol type="1">
<li>Creating an empty list <em>outside</em> of the loop.</li>
<li>Adding lines to that list <em>inside</em> the loop, only if they have a length greater than 0.</li>
</ol>
<p>This introduces an <code>if</code> control block.</p>
<div id="cell-63" class="cell" data-execution_count="34">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">full_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb64-2"></span>
<span id="cb64-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> lower_lines:</span>
<span id="cb64-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb64-5">        full_lines.append(line)</span>
<span id="cb64-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb64-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dumped an empty line"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dumped an empty line
dumped an empty line
dumped an empty line</code></pre>
</div>
</div>
<div id="cell-64" class="cell" data-execution_count="35">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">full_lines</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>['this is just to say',
 'by william carlos williams',
 'i have eaten',
 'the plums',
 'that were in',
 'the icebox',
 'and which',
 'you were probably',
 'saving',
 'for breakfast',
 'forgive me',
 'they were delicious',
 'so sweet',
 'and so cold']</code></pre>
</div>
</div>
<p>The <code>if</code> block:</p>
<ol type="1">
<li>Checks to see if the logical statement is <code>True</code> or <code>False.</code></li>
<li>If <code>True</code>, it executes the code inside.</li>
</ol>
<p>In this case, I’ve also included an <code>else</code> block. This executes its code if the <code>if</code> block above was <code>False</code>.</p>
</section>
</section>
<section id="nesting-loops" class="level2">
<h2 class="anchored" data-anchor-id="nesting-loops">Nesting loops</h2>
<p>We can nest for loops and if statements to an arbitrary level, but good programming practice tries to keep it to a minumum. For example, to get every word in the poem, based on where the spaces are, we can</p>
<ol type="1">
<li>Create an empty <code>words</code> list <em>outside</em> of a loop.</li>
<li>Split each line using spaces.</li>
<li>Start a loop over <em>that</em> list.</li>
<li>Update the <code>words</code> list <em>inside</em> this loop.</li>
</ol>
<div id="cell-67" class="cell" data-execution_count="36">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">all_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> full_lines:</span>
<span id="cb68-4">    words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb68-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> words:</span>
<span id="cb68-6">        all_words.append(word)</span>
<span id="cb68-7"></span>
<span id="cb68-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(all_words[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['this', 'is', 'just', 'to', 'say', 'by', 'william', 'carlos', 'williams', 'i', 'have', 'eaten', 'the', 'plums', 'that', 'were', 'in', 'the', 'icebox']</code></pre>
</div>
</div>
</section>
<section id="a-slightly-nicer-way" class="level2">
<h2 class="anchored" data-anchor-id="a-slightly-nicer-way">A slightly nicer way</h2>
<p>A slightly nicer way to do some of the operations we worked on here is with “list comprehensions”. These are special instructions to build a list that wind up saving us a bit of typing.</p>
<p>Here’s the code we used to make all of the lines lowercase again.</p>
<div id="cell-69" class="cell" data-execution_count="37">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">lower_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb70-2"></span>
<span id="cb70-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines:</span>
<span id="cb70-4">    lower_lines.append(line.lower())</span></code></pre></div>
</div>
<p>With a list comprehension, we could rewrite this for-loop like so:</p>
<div id="cell-71" class="cell" data-execution_count="38">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">lower_lines2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb71-2">    line.lower() </span>
<span id="cb71-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines</span>
<span id="cb71-4">]</span>
<span id="cb71-5">lower_lines2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>['this is just to say',
 'by william carlos williams',
 '',
 'i have eaten',
 'the plums',
 'that were in',
 'the icebox',
 '',
 'and which',
 'you were probably',
 'saving',
 'for breakfast',
 '',
 'forgive me',
 'they were delicious',
 'so sweet',
 'and so cold']</code></pre>
</div>
</div>
<p>We can even include the empty line filtering into the list comprehension.</p>
<div id="cell-73" class="cell" data-execution_count="39">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">full_lines2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb73-2">    line.lower() </span>
<span id="cb73-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> plums_lines </span>
<span id="cb73-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb73-5">]</span>
<span id="cb73-6"></span>
<span id="cb73-7">full_lines2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>['this is just to say',
 'by william carlos williams',
 'i have eaten',
 'the plums',
 'that were in',
 'the icebox',
 'and which',
 'you were probably',
 'saving',
 'for breakfast',
 'forgive me',
 'they were delicious',
 'so sweet',
 'and so cold']</code></pre>
</div>
</div>
<p>Nested for statements also work inside of list comprehensions.</p>
<div id="cell-75" class="cell" data-execution_count="40">
<div class="langname">
<pre class="langname">python</pre>
</div>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">all_words2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb75-2">    word</span>
<span id="cb75-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> full_lines2</span>
<span id="cb75-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> line.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb75-5">]</span>
<span id="cb75-6"></span>
<span id="cb75-7">all_words[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>['this',
 'is',
 'just',
 'to',
 'say',
 'by',
 'william',
 'carlos',
 'williams',
 'i',
 'have',
 'eaten',
 'the',
 'plums',
 'that',
 'were',
 'in',
 'the',
 'icebox']</code></pre>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {More {Python:} {Poetry,} {Lists,} {Loops}},
  date = {2024-01-30},
  url = {https://lin511-2024.github.io/notes/programming/03_python_plus.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“More Python: Poetry, Lists,
Loops.”</span> January 30, 2024. <a href="https://lin511-2024.github.io/notes/programming/03_python_plus.html">https://lin511-2024.github.io/notes/programming/03_python_plus.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <guid>https://lin511-2024.github.io/notes/programming/03_python_plus.html</guid>
  <pubDate>Tue, 30 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Regular Expressions, Quickly</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/programming/02_regex.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Look at Github
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <em>real</em> content is in your <a href="https://github.com/orgs/Lin511-2024/repositories"><code>regex-in-class-&lt;username&gt;</code></a> repository on github. This is meant to be more of a reference sheet.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This is just a support function
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib.parse</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_regex_url(regex: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb1-5">    base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://regexper.com/#"</span></span>
<span id="cb1-6">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> urllib.parse.quote(regex)</span>
<span id="cb1-7">    url_markdown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>regex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">](</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#return url_markdown</span></span>
<span id="cb1-9">    display(Markdown(url_markdown))</span></code></pre></div>
</div>
</div>
</div>
</div>
<section id="setting-up-for-using-regular-expressions-in-python" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-for-using-regular-expressions-in-python">Setting up for using regular expressions in python</h2>
<ul>
<li>We’ll need to import the <code>re</code> module</li>
<li>Unlike simple strings, we’ll need to write our regular expressions with a preceding <code>r</code></li>
</ul>
<div id="cell-6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">r"regex"</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'regex'</code></pre>
</div>
</div>
</section>
<section id="important-re-functions" class="level2">
<h2 class="anchored" data-anchor-id="important-re-functions">Important <code>re</code> functions</h2>
<p>Two ways to use <code>re</code> to search strings are</p>
<dl>
<dt><code>re.search()</code></dt>
<dd>
Return structured information about <em>where</em> the regex matches.
</dd>
<dt><code>re.findall()</code></dt>
<dd>
Return all actual matching substrings
</dd>
</dl>
<div id="cell-8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">sentence1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The speaker is speaking."</span></span></code></pre></div>
</div>
<section id="re.search" class="level3">
<h3 class="anchored" data-anchor-id="re.search"><code>re.search()</code></h3>
<div id="cell-10" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"speak"</span>, sentence1)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;re.Match object; span=(4, 9), match='speak'&gt;</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sentence1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>'speak'</code></pre>
</div>
</div>
</section>
<section id="re.findall" class="level3">
<h3 class="anchored" data-anchor-id="re.findall"><code>re.findall()</code></h3>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"speak"</span>, sentence1)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>['speak', 'speak']</code></pre>
</div>
</div>
</section>
</section>
<section id="simple-character-searches" class="level2">
<h2 class="anchored" data-anchor-id="simple-character-searches">Simple character searches</h2>
<p>Like the examples above, literally the characters you want to use will match.</p>
<div id="cell-15" class="cell" data-results="asis" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">speak_regex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"speak"</span></span>
<span id="cb11-2">get_regex_url(speak_regex)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#speak">speak</a></p>
</div>
</div>
</section>
<section id="options" class="level2">
<h2 class="anchored" data-anchor-id="options">Options</h2>
<p>If you want some characters to be chosen from a set of options, place them in <code>[]</code>.</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">vowels_regex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[aeiou]"</span></span>
<span id="cb12-2">get_regex_url(vowels_regex)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5Baeiou%5D">[aeiou]</a></p>
</div>
</div>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[aeiou]"</span>, sentence1)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>['e', 'e', 'a', 'e', 'i', 'e', 'a', 'i']</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">the_regex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[Tt]he"</span></span>
<span id="cb15-2">get_regex_url(the_regex)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5BTt%5Dhe">[Tt]he</a></p>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">re.findall(the_regex, sentence1)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>['The']</code></pre>
</div>
</div>
<section id="ranges" class="level3">
<h3 class="anchored" data-anchor-id="ranges">Ranges</h3>
<p>Ranges of characters or numbers can be given inside <code>[]</code> like so</p>
<div id="cell-22" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[a-z]"</span>)</span>
<span id="cb18-2">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[A-Z]"</span>)</span>
<span id="cb18-3">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[0-9]"</span>)</span>
<span id="cb18-4">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[A-Za-z]"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5Ba-z%5D">[a-z]</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5BA-Z%5D">[A-Z]</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5B0-9%5D">[0-9]</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5BA-Za-z%5D">[A-Za-z]</a></p>
</div>
</div>
</section>
<section id="metacharacters" class="level3">
<h3 class="anchored" data-anchor-id="metacharacters">“Metacharacters”</h3>
<ul>
<li><code>\w</code> == <code>[A-Za-z0-9_]</code>
<ul>
<li>word characters</li>
</ul></li>
<li><code>\W</code> == <code>[^A-Za-z0-9_]</code>
<ul>
<li>non-word characters</li>
</ul></li>
<li><code>\d</code> == <code>[0-9]</code>
<ul>
<li>digits</li>
</ul></li>
<li><code>\D</code> == <code>[^0-9]</code>
<ul>
<li>non-digits</li>
</ul></li>
<li><code>\s</code> == <code>[ \t\n]</code>
<ul>
<li>Any whitespace character</li>
</ul></li>
<li><code>\S</code> == <code>[^ \t\n]</code>
<ul>
<li>non-whitespace</li>
</ul></li>
</ul>
</section>
<section id="any-character" class="level3">
<h3 class="anchored" data-anchor-id="any-character">Any Character</h3>
<p>To match <em>any</em> character (letter, number, punctuation, space, etc.) use <code>.</code> or “dot”</p>
<div id="cell-24" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">re.findall(</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return every word character and </span></span>
<span id="cb19-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the following character</span></span>
<span id="cb19-4">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\w."</span>,</span>
<span id="cb19-5">    sentence1</span>
<span id="cb19-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>['Th', 'e ', 'sp', 'ea', 'ke', 'r ', 'is', 'sp', 'ea', 'ki', 'ng']</code></pre>
</div>
</div>
</section>
<section id="escaping-special-symbols" class="level3">
<h3 class="anchored" data-anchor-id="escaping-special-symbols">Escaping special symbols</h3>
<p>If you wanted to find the actual period in <code>sentence1</code>, you’d have to “escape” the <code>.</code> with a preceding <code></code>`.</p>
<div id="cell-26" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compare</span></span>
<span id="cb21-2">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"."</span>)</span>
<span id="cb21-3">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\."</span>)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#.">.</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5C.">.</a></p>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">re.findall(</span>
<span id="cb22-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\."</span>,</span>
<span id="cb22-3">    sentence1</span>
<span id="cb22-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>['.']</code></pre>
</div>
</div>
</section>
</section>
<section id="modifiers" class="level2">
<h2 class="anchored" data-anchor-id="modifiers">Modifiers</h2>
<p>Modifiers come after the definition of a single character, and define <em>how many times</em> that character can appear.</p>
<ul>
<li><code>a?</code> = zero or one <code>a</code></li>
<li><code>a+</code> = one or more <code>a</code></li>
<li><code>a*</code> = zero or more <code>a</code></li>
</ul>
<div id="cell-29" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"bana?na"</span>)</span>
<span id="cb24-2">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"bana+na"</span>)</span>
<span id="cb24-3">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"bana*na"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#bana%3Fna">bana?na</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#bana%2Bna">bana+na</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#bana%2Ana">bana*na</a></p>
</div>
</div>
</section>
<section id="grouping" class="level2">
<h2 class="anchored" data-anchor-id="grouping">Grouping</h2>
<p>You can define groupings within regular expressions. The <em>effect</em> of these groupings depends what kind of regex function you’re using. For <code>re.findall()</code>, it’ll find the whole string, but return just the text from the grouping.</p>
<div id="cell-31" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">sentence2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The big bear and the small bear ran away."</span></span></code></pre></div>
</div>
<div id="cell-32" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[Tt]he (\w+) bear"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5BTt%5Dhe%20%28%5Cw%2B%29%20bear">[Tt]he (+) bear</a></p>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">re.findall(</span>
<span id="cb27-2">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"[Tt]he (\w+) bear"</span>,</span>
<span id="cb27-3">    sentence2</span>
<span id="cb27-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>['big', 'small']</code></pre>
</div>
</div>
</section>
<section id="boundaries" class="level2">
<h2 class="anchored" data-anchor-id="boundaries">Boundaries</h2>
<ul>
<li><p><code>^the</code> == Finds “the” at the <em>start</em> of a string.</p></li>
<li><p><code>the$</code> == Finds ” the” at the <em>end</em> of a string.</p></li>
<li><p><code>\bthe\b</code> == Finds “the” in between word boundaries.</p></li>
</ul>
<div id="cell-35" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"^the "</span>)</span>
<span id="cb29-2">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r" the$"</span>)</span>
<span id="cb29-3">get_regex_url(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\bthe\b"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%5Ethe%20">^the</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p><a href="https://regexper.com/#%20the%24">the$</a></p>
</div>
<div class="cell-output cell-output-display cell-output-markdown">
<p>[(https://regexper.com/#%5Cbthe%5Cb)</p>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">sentence3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I saw the other bear."</span></span>
<span id="cb30-2">re.findall(</span>
<span id="cb30-3">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"the"</span>,</span>
<span id="cb30-4">    sentence3</span>
<span id="cb30-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>['the', 'the']</code></pre>
</div>
</div>
<p>The second “the” there comes from inside “o<strong>the</strong>r”</p>
<div id="cell-38" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">re.findall(</span>
<span id="cb32-2">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\bthe\b"</span>,</span>
<span id="cb32-3">    sentence3</span>
<span id="cb32-4">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>['the']</code></pre>
</div>
</div>
<div id="cell-39" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">sentence3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>'I saw the other bear.'</code></pre>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {Regular {Expressions,} {Quickly}},
  date = {2024-01-25},
  url = {https://lin511-2024.github.io/notes/programming/02_regex.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“Regular Expressions, Quickly.”</span>
January 25, 2024. <a href="https://lin511-2024.github.io/notes/programming/02_regex.html">https://lin511-2024.github.io/notes/programming/02_regex.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <guid>https://lin511-2024.github.io/notes/programming/02_regex.html</guid>
  <pubDate>Thu, 25 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Pushdown Automata and Context Free Languages</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/meetings/02_pda.html</link>
  <description><![CDATA[ 




<section id="more-like-a-rip-off-machine" class="level2">
<h2 class="anchored" data-anchor-id="more-like-a-rip-off-machine">More like a rip-off machine</h2>
<p>In the notes on <a href="../../notes/meetings/01_fsm.html">Finite State Automata</a>, we looked at this turnstile finite state automaton.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  state "Locked" as l
  state "Unlocked" as u
  
  [*] --&gt; l
  l --&gt; l: push
  l --&gt; u: coin
  u --&gt; u: coin
  u --&gt; l: push
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>An annoying thing about this turnstile is that if you don’t know how it works, it will rip you off!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
A scenario
</div>
</div>
<div class="callout-body-container callout-body">
<p>Robin approaches the finite-state turnstile with two of their friends. They think</p>
<blockquote class="blockquote">
<p>There’s three of us, and I have three tokens. I’ll speed things up and be a good friend by popping three tokens into the machine, and then all three of us can pop through.</p>
</blockquote>
</div>
</div>
<p>Robin is expecting a pattern like this to happen</p>
<p><i class="fa-solid fa-coins" aria-label="coins"></i>, <i class="fa-solid fa-coins" aria-label="coins"></i>, <i class="fa-solid fa-coins" aria-label="coins"></i>, <i class="fa-solid fa-person" aria-label="person"></i>, <i class="fa-solid fa-person" aria-label="person"></i>, <i class="fa-solid fa-person" aria-label="person"></i></p>
<p>Little does Robin know that the way this turnstile works is that after you put a coin into the slot, the coin rolls past and triggers the unlocking mechanism and goes straight into the collection bin. If the turnstile is already unlocked, the coin just rolls into the collection bin. It doesn’t have any “memory” of how many coins it’s been fed, so after one person walks through, the turnstile relocks.</p>
<p>So here’s what happens to Robin and their friends</p>
<table class="table">
<colgroup>
<col style="width: 63%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th>Input</th>
<th>New State</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>Locked</td>
</tr>
<tr class="even">
<td><p><i class="fa-solid fa-coins" aria-label="coins"></i></p></td>
<td>Unlocked</td>
</tr>
<tr class="odd">
<td><p><i class="fa-solid fa-coins" aria-label="coins"></i></p></td>
<td>Unlocked</td>
</tr>
<tr class="even">
<td><p><i class="fa-solid fa-coins" aria-label="coins"></i></p></td>
<td>Unlocked</td>
</tr>
<tr class="odd">
<td><p><i class="fa-solid fa-person" aria-label="person"></i></p></td>
<td>Locked</td>
</tr>
</tbody>
</table>
<p>With the turnstile locked again, Robin’s two friends can’t get through unless they insert yet another token!</p>
</section>
<section id="a-pushdown-automaton" class="level2">
<h2 class="anchored" data-anchor-id="a-pushdown-automaton">A Pushdown Automaton</h2>
<p>Robin was really upset and embarrassed at losing two whole tokens to the rip-off (finite state) machine in front of their friends. They vowed to invent a better turnstile so no one would ever have to face that kind of embarrassment again.</p>
<section id="incorporating-a-memory" class="level3">
<h3 class="anchored" data-anchor-id="incorporating-a-memory">Incorporating a memory</h3>
<p>The problem with the finite-state turnstile is that it has no “memory” of how many coins it’s been fed. Robin’s new prototype works like so:</p>
<ul>
<li><p>Every time someone inserts a coin into Robin’s turnstile, it lands in a little collection tray. If someone inserts multiple coins, they form a stack of coins.</p></li>
<li><p>If there is even one coin in the stack, the turnstile is unlocked.</p></li>
<li><p>Any time someone pushes through the turnstile, the collection tray bounces one coin off of the stack.</p></li>
</ul>
<p>Even this simple system gets a little unwieldy to represent in the same kind of state diagram. So, here’s the last one of these we’ll see for a bit.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  state "Locked" as l
  state "Unlocked" as u
  state coin_fork1 &lt;&lt;fork&gt;&gt;
  state coin_fork2 &lt;&lt;fork&gt;&gt;
  state pop1 &lt;&lt;fork&gt;&gt;
  state pop2 &lt;&lt;fork&gt;&gt;
  state choice_state &lt;&lt;choice&gt;&gt;
  state "Stack" as s
  
  [*] --&gt; l
  l --&gt; l : push
  l --&gt; coin_fork1: coin
  coin_fork1 --&gt; u
  coin_fork1 --&gt; s: +1
  u --&gt; coin_fork2: coin
  coin_fork2 --&gt; u
  coin_fork2 --&gt; s: +1
  
  u --&gt; choice_state: push
  choice_state --&gt; pop1: if Stack &gt; 1
  pop1 --&gt; s: -1
  pop1 --&gt; u
  
  choice_state --&gt; pop2: if Stack == 1
  pop2 --&gt; s: -1
  pop2 --&gt; l
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="using-the-pushdown-turnstile" class="level3">
<h3 class="anchored" data-anchor-id="using-the-pushdown-turnstile">Using the Pushdown Turnstile</h3>
<p>With Robin’s new Pushdown Turnstile installed at metro stations everywhere, they bring their two friends back to the scene of the crime, and retry their three-coins, three-people strategy. Here’s what happens.</p>
<table class="table">
<colgroup>
<col style="width: 45%">
<col style="width: 26%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th>Input</th>
<th>New State</th>
<th>Coin Stack</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>Locked</td>
<td>0</td>
</tr>
<tr class="even">
<td><p><i class="fa-solid fa-coins" aria-label="coins"></i></p></td>
<td>Unlocked</td>
<td>1</td>
</tr>
<tr class="odd">
<td><p><i class="fa-solid fa-coins" aria-label="coins"></i></p></td>
<td>Unlocked</td>
<td>2</td>
</tr>
<tr class="even">
<td><p><i class="fa-solid fa-coins" aria-label="coins"></i></p></td>
<td>Unlocked</td>
<td>3</td>
</tr>
<tr class="odd">
<td><p><i class="fa-solid fa-person" aria-label="person"></i></p></td>
<td>Unlocked</td>
<td>2</td>
</tr>
<tr class="even">
<td><p><i class="fa-solid fa-person" aria-label="person"></i></p></td>
<td>Unlocked</td>
<td>1</td>
</tr>
<tr class="odd">
<td><p><i class="fa-solid fa-person" aria-label="person"></i></p></td>
<td>Locked</td>
<td>0</td>
</tr>
</tbody>
</table>
</section>
<section id="generalizing-the-pattern" class="level3">
<h3 class="anchored" data-anchor-id="generalizing-the-pattern">Generalizing the pattern</h3>
<p>The way this turnstile works, generally, is that if you put in <img src="https://latex.codecogs.com/png.latex?n"> coins, <img src="https://latex.codecogs.com/png.latex?n"> people will be able to push through. Another way of notating that sequence of events is <i class="fa-solid fa-coins" aria-label="coins"></i><img src="https://latex.codecogs.com/png.latex?%5En"><i class="fa-solid fa-person" aria-label="person"></i><img src="https://latex.codecogs.com/png.latex?%5En">. In the more formal-language-theory world, these kinds of patterns are usually labeled <img src="https://latex.codecogs.com/png.latex?a%5Enb%5En">.</p>
<p>Another way to think about these <img src="https://latex.codecogs.com/png.latex?a%5Enb%5En"> systems is in terms of bracket matching. If we replace each <i class="fa-solid fa-coins" aria-label="coins"></i> symbol with <code>[</code> and each <i class="fa-solid fa-persopn" aria-label="persopn"></i> symbol with <code>]</code>, then we get a pattern that looks like this:</p>
<pre><code>[
[
[
]
]
]</code></pre>
<p>The requirement for the language is that every opening bracket <code>[</code> needs to get matched with a closing bracket <code>]</code>.</p>
</section>
</section>
<section id="context-free-grammars" class="level2">
<h2 class="anchored" data-anchor-id="context-free-grammars">Context Free Grammars</h2>
<p>We get nested, bracket matching patterns in natural language all the time. For example the person-number agreement in this sentence.</p>
<div style="font-size: 1.2em">
<p>The <span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">person</span> who <span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">I</span>, the guy <span style="color: white;background: #117733; display: inline-block; border-radius:10%; padding-left:1%; padding-right:1%;">you</span> <span style="color: white;background: #117733; display: inline-block; border-radius:10%; padding-left:1%; padding-right:1%;">are</span> looking at, <span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">am</span> talking to <span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">is</span> not listening.</p>
</div>
<p>If the form of <em>be</em> in this sentence were generated by a Regular Grammar, to be parsed with a Finite State Automaton, once the “you” subject appears in the sentence, every following form of <em>be</em> would have to be “are” the rest of the way.</p>
<div style="font-size: 1.2em">
<p><strong>*</strong>The <span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">person</span> who <span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">I</span>, the guy <span style="color: white;background: #117733; display: inline-block; border-radius:10%; padding-left:1%; padding-right:1%;">you</span> <span style="color: white;background: #117733; display: inline-block; border-radius:10%; padding-left:1%; padding-right:1%;">are</span> looking at, <span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">are</span> talking to <span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">are</span> not listening.</p>
</div>
<p>Since the first sentence <em>is</em> how English and other languages work, we’d conclude that natural language is, at least, Context Free.</p>
<section id="context-free-rules" class="level3">
<h3 class="anchored" data-anchor-id="context-free-rules">Context Free Rules</h3>
<div class="columns">
<div class="column" style="width:45%;">
<p>Regular rules can look like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20%5Crightarrow%20aA%0A"></p>
</div><div class="column" style="width:45%;">
<p>Context free rules can look like this: <img src="https://latex.codecogs.com/png.latex?%0AA%20%5Crightarrow%20aAb%0A"></p>
</div>
</div>
<p>Returning to this html snippit:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-2">  This is a paragraph with </span>
<span id="cb2-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">strong</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-4">    bold text.</span>
<span id="cb2-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">strong</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Rules of a context free grammar that could give rise to this well-formed html are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD%20%5Crightarrow%20%3Cp%3EC%3C/p%3E%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC%20%5Crightarrow%20words%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC%20%5Crightarrow%20words%20S%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS%20%5Crightarrow%20%3Cstrong%3EC%3C/strong%3E%0A"></p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD

  D --&gt; p1["p"]
  D --&gt; C1["C"]
  D --&gt; p2["/p"]

  C1 --&gt; w1["This is a paragraph with"]
  C1 --&gt; S

  S --&gt; s1["strong"]
  S --&gt; C2["C"]
  S --&gt; s2["/strong"]

  C2 --&gt; w2["bold text."]

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="a-pda-for-this-grammar" class="level3">
<h3 class="anchored" data-anchor-id="a-pda-for-this-grammar">A PDA for this grammar</h3>
<p>Here’s a way we’d describe a Pushdown Automaton that decides whether or not a document is generated by this grammar:</p>
<ul>
<li>Each time it encounters an opening <code>&lt;tag&gt;</code>, it adds it to the stack, and when it encounters a closing <code>&lt;/tag&gt;</code>, it pops it from the stack.</li>
</ul>
<!-- -->
<ul>
<li><p>When it encounters a closing <code>&lt;/tag&gt;</code>, it <em>has</em> to match the opening <code>&lt;tag&gt;</code> that’s at the top of the stack.</p></li>
<li><p>When it gets to the end of the document, the stack needs to be empty.</p></li>
</ul>
<p>Here’s a table showing how that’d play out</p>
<table class="table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Input</th>
<th>event</th>
<th>Stack</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>&lt;p&gt;</code></td>
<td>push <code>&lt;p&gt;</code></td>
<td><span style="display: inline-block; border: 1px solid #CC6677;"><code>&lt;p&gt;</code></span></td>
</tr>
<tr class="even">
<td><code>This</code>, <code>is</code>, <code>a</code>, <code>paragraph</code>, <code>with</code></td>
<td></td>
<td><span style="display: inline-block; border: 1px solid #CC6677;"><code>&lt;p&gt;</code></span></td>
</tr>
<tr class="odd">
<td><code>&lt;strong&gt;</code></td>
<td>push <code>&lt;strong&gt;</code></td>
<td><span style="display: inline-block; border: 1px solid #CC6677;"><code>&lt;strong&gt;</code></span>, <code>&lt;p&gt;</code></td>
</tr>
<tr class="even">
<td><code>bold</code>, <code>text.</code></td>
<td></td>
<td><span style="display: inline-block; border: 1px solid #CC6677;"><code>&lt;strong&gt;</code></span>, <code>&lt;p&gt;</code></td>
</tr>
<tr class="odd">
<td><code>&lt;/strong&gt;</code></td>
<td>pop <code>&lt;strong&gt;</code></td>
<td><span style="display: inline-block; border: 1px solid #CC6677;"><code>&lt;p&gt;</code></span></td>
</tr>
<tr class="even">
<td><code>&lt;/p&gt;</code></td>
<td>pop <code>&lt;p&gt;</code></td>
<td></td>
</tr>
</tbody>
</table>
<p>One consequence of the rule that tags need to match when you pop them is that the following is <em>not</em> valid html.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-2">  This is <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">strong</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>invalid!</span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">strong</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>If you were to reason through the state of the stack after the opening <code>&lt;strong&gt;</code> tag, it would look like</p>
<blockquote class="blockquote">
<p><span style="display: inline-block; border: 1px solid #CC6677;"><code>&lt;strong&gt;</code></span>, <code>&lt;p&gt;</code></p>
</blockquote>
<p>Then, when you feed it <code>&lt;/p&gt;</code>, it doen’t match the tag at the top of the stack, so we’d get an error of some sort.</p>
</section>
</section>
<section id="limits-of-pushdown-automata" class="level2">
<h2 class="anchored" data-anchor-id="limits-of-pushdown-automata">Limits of Pushdown Automata</h2>
<p>An office building has installed a version of Robin’s turnstile. Each person who enters the building has to insert their id card, and the machine scans it and spits it out the other side when a person pushes through.</p>
<p><span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Robin</span> approaches the turnstile with their friends <span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Skylar</span> and <span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Alex</span>. Both <span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Skylar</span> and <span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Alex</span> have their hands full carrying packages into the building, so <span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Robin</span> tries to be helpful and insert all of their id cards first, so they can then pass through. They’re walking through in the order</p>
<ol type="1">
<li><span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Robin</span></li>
<li><span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Skylar</span></li>
<li><span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Alex</span></li>
</ol>
<p>So Robin puts their ID cards into the turnstile in that order. Here’s how it works out</p>
<table class="table">
<colgroup>
<col style="width: 26%">
<col style="width: 26%">
<col style="width: 47%">
</colgroup>
<thead>
<tr class="header">
<th>Input</th>
<th>Action</th>
<th>Stack</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td>push <span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td><span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
</tr>
<tr class="even">
<td><span style="color: #CC6677;;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td>push <span style="color: #CC6677;;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td><span style="color: #CC6677;;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
</tr>
<tr class="odd">
<td><span style="color: #117733"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td>push <span style="color: #117733"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td><span style="color: #117733"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #CC6677;;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
</tr>
<tr class="even">
<td><span style="color: #4477AA;"><i class="fa-solid fa-person" aria-label="person"></i></span></td>
<td>pop <span style="color: #117733"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
<td><span style="color: #CC6677;;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span></td>
</tr>
<tr class="odd">
<td></td>
<td>🚨</td>
<td></td>
</tr>
</tbody>
</table>
<p>Oh no! The turnstile has handed <span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Robin</span> <span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">Alex’s</span> id card! What a mess!</p>
<section id="beyond-context-free" class="level3">
<h3 class="anchored" data-anchor-id="beyond-context-free">Beyond Context Free</h3>
<p>Robin was expecting a sequence like this</p>
<blockquote class="blockquote">
<p><span style="color: #4477AA;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #CC6677;;"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #117733"><i class="fa-solid fa-id-card" aria-label="id-card"></i></span>, <span style="color: #4477AA;"><i class="fa-solid fa-person" aria-label="person"></i></span>, <span style="color: #CC6677;;"><i class="fa-solid fa-person" aria-label="person"></i></span>, <span style="color: #117733"><i class="fa-solid fa-person" aria-label="person"></i></span></p>
</blockquote>
<p>This involves so-called “crossing dependencies”, which can’t be recognized by a Pushdown Automaton, which means they involve a more complex grammar than context free rules.</p>
<p>There are some examples of crossing dependencies in human language as well, like this example in Swiss German from <span class="citation" data-cites="shieber1985">Shieber (1985)</span> (cited in <span class="citation" data-cites="jäger2012">Jäger and Rogers (2012)</span>)</p>
<table class="table">
<caption>“that we let the children help Hans paint the house”</caption>
<colgroup>
<col style="width: 0%">
<col style="width: 0%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<tbody>
<tr class="odd">
<td>dass</td>
<td>mer</td>
<td><span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">d’ chind</span></td>
<td><span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">em Hans</span></td>
<td><span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">es Huus</span></td>
<td><span style="color: white;background: #4477AA; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">lönd</span></td>
<td><span style="color: white;background: #CC6677; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">hälfe</span></td>
<td><span style="color: white;background: #117733; display: inline-block;border-radius:10%;padding-left:1%;padding-right:1%;">aanstriiche</span></td>
</tr>
<tr class="even">
<td>that</td>
<td>we</td>
<td>the children-ACC</td>
<td>Hans-DAT</td>
<td>the house-ACC</td>
<td>let</td>
<td>help</td>
<td>paint</td>
</tr>
</tbody>
</table>



</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-jäger2012" class="csl-entry">
Jäger, Gerhard, and James Rogers. 2012. <span>“Formal Language Theory: Refining the Chomsky Hierarchy.”</span> <em>Philosophical Transactions of the Royal Society B: Biological Sciences</em> 367 (1598): 1956–70. <a href="https://doi.org/10.1098/rstb.2012.0077">https://doi.org/10.1098/rstb.2012.0077</a>.
</div>
<div id="ref-shieber1985" class="csl-entry">
Shieber, Stuart M. 1985. <span>“Evidence Against the Context-Freeness of Natural Language.”</span> <em>Linguistics and Philosophy</em> 8 (3): 333–43. <a href="https://doi.org/10.1007/BF00630917">https://doi.org/10.1007/BF00630917</a>.
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {Pushdown {Automata} and {Context} {Free} {Languages}},
  date = {2024-01-23},
  url = {https://lin511-2024.github.io/notes/meetings/02_pda.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“Pushdown Automata and Context Free
Languages.”</span> January 23, 2024. <a href="https://lin511-2024.github.io/notes/meetings/02_pda.html">https://lin511-2024.github.io/notes/meetings/02_pda.html</a>.
</div></div></section></div> ]]></description>
  <category>compling</category>
  <guid>https://lin511-2024.github.io/notes/meetings/02_pda.html</guid>
  <pubDate>Tue, 23 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Regular Languages and Finite State Machines</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/meetings/01_fsm.html</link>
  <description><![CDATA[ 




<section id="where-were-going" class="level2">
<h2 class="anchored" data-anchor-id="where-were-going">Where we’re going:</h2>
<p>In another class, we might just jump straight into learning about “Regular Expressions”, which are very useful tools for searching for patterns in text.</p>
<p>But since this is <em>Computational</em> Linguistics, we should probably learn about what is “regular” about “regular” expressions, because it’s related to formal language theory!</p>
</section>
<section id="formal-language-theory-and-abstract-machines" class="level2">
<h2 class="anchored" data-anchor-id="formal-language-theory-and-abstract-machines">“Formal Language Theory” and “Abstract Machines”</h2>
<ul>
<li><a href="../../notes/concepts/00_glossary.html#formal">Formal</a> Languages are systems of rules (i.e.&nbsp;a formal “grammar”) for combining a set of strictly defined symbols.</li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
A small formal language
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> is the language, which is a set that contains all, and only, the possible strings of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5CSigma"> is the vocabulary of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5CSigma%20=%20%5C%7Ba,b%5C%7D"></li>
</ul></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D"> Are the “non-terminal nodes” of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">, of which we have 3.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D%20=%20%5C%7BS,%20A,%20B%5C%7D"></li>
</ul></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D"> is the grammar of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">. It contains 4 rules</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?S%20%5Crightarrow%20aA"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20aB"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20aA"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?B%20%5Crightarrow%20b"></p></li>
</ol></li>
</ul>
<p>With the sets <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7B%5CSigma%7D">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D">, can we figure out which strings are, or are <em>not</em> in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">?</p>
<ul class="task-list">
<li><p><label><input type="checkbox"><img src="https://latex.codecogs.com/png.latex?ab">?</label></p></li>
<li><p><label><input type="checkbox"><img src="https://latex.codecogs.com/png.latex?aab">?</label></p></li>
<li><p><label><input type="checkbox"><img src="https://latex.codecogs.com/png.latex?b">?</label></p></li>
<li><p><label><input type="checkbox"><img src="https://latex.codecogs.com/png.latex?aabb">?</label></p></li>
<li><p><label><input type="checkbox"><img src="https://latex.codecogs.com/png.latex?abba">?</label></p></li>
<li><p><label><input type="checkbox"><img src="https://latex.codecogs.com/png.latex?cab">?</label></p></li>
</ul>
</div>
</div>
<ul>
<li>“Automata” and other abstract machines are ways of conceptualizing the possible or necessary computational operations and resources needed for different tasks, like identifying whether or not a string is in a language!</li>
</ul>
<p>We’ll start with the least complex<sup>1</sup> machines, “Finite State Automata”</p>
</section>
<section id="finite-state-automata" class="level2">
<h2 class="anchored" data-anchor-id="finite-state-automata">Finite State Automata</h2>
<dl>
<dt>Finite</dt>
<dd>
<p>Having a fixed, or <em>non infinite</em> amount of things</p>
</dd>
<dt>State</dt>
<dd>
<p>The current state, or status, of a system.</p>
</dd>
<dt>Automaton</dt>
<dd>
<p>A machine</p>
</dd>
</dl>
<p>FSAs have</p>
<ul>
<li><p>a fixed number of states</p></li>
<li><p>a fixed number of <em>inputs</em> they can accept</p></li>
<li><p>rules about how to change their state given an input.</p></li>
</ul>
<section id="examples" class="level3">
<h3 class="anchored" data-anchor-id="examples">Examples</h3>
<section id="a-light-switch." class="level4">
<h4 class="anchored" data-anchor-id="a-light-switch.">A light switch.</h4>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  state "Off" as off
  state "On 💡" as on
  
  [*] --&gt; off
  on --&gt; off: switch flip
  off --&gt; on: switch flip
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<dl>
<dt>States</dt>
<dd>
<p>On, Off</p>
</dd>
<dt>Inputs</dt>
<dd>
<p>switch flip</p>
</dd>
</dl>
</section>
<section id="a-metro-turnstile" class="level4">
<h4 class="anchored" data-anchor-id="a-metro-turnstile">A metro turnstile</h4>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  state "Locked" as l
  state "Unlocked" as u
  
  [*] --&gt; l
  l --&gt; l: push
  l --&gt; u: coin
  u --&gt; u: coin
  u --&gt; l: push
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<dl>
<dt>states</dt>
<dd>
<p>Locked, Unlocked</p>
</dd>
<dt>inputs</dt>
<dd>
<p>coin, push</p>
</dd>
</dl>
</section>
<section id="a-github-repo" class="level4">
<h4 class="anchored" data-anchor-id="a-github-repo">A Github Repo!</h4>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  state "Local Synced with Remote" as s
  state "Unstaged Changes" as us
  state "All changes staged" as st
  state "No uncommitted changes" as com
  [*] --&gt; s
  s --&gt; us: Editing &amp; Saving
  us --&gt; us: Editing &amp; Saving
  us --&gt; st: Staging all changes
  st --&gt; us: Editing &amp; Saving
  st --&gt; com: Committing
  com --&gt; us: Editing &amp; Saving
  com --&gt; s: Push
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<dl>
<dt>states</dt>
<dd>
<p>Local Synced with Remote, Unstaged Changes, All Changes Staged, No Uncommitted Changes</p>
</dd>
<dt>inputs</dt>
<dd>
<p>Editing &amp; Saving, Staging all Changes, Committing, Push</p>
</dd>
</dl>
</section>
<section id="the-batman-theme-song" class="level4">
<h4 class="anchored" data-anchor-id="the-batman-theme-song">The Batman Theme Song</h4>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Batman!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Na na na na na na na na na na na na<br>
Batman!<br>
Na na na na na na na na na na na na<br>
Batman!<br>
Na na na na na na na na na na na na<br>
Batman!<br>
Na na na na na na na na na na na na<br>
Batman!<br>
Na na na na na na na na na na na na<br>
Batman! Batman! Batman!<br>
Na na na na na na na na na na na na<br>
Batman!</p>
</div>
</div>
</div>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  [*] --&gt; a: Na
  a --&gt; b: na
  b --&gt; c: na
  c --&gt; d: na
  d --&gt; e: na
  e --&gt; f: na
  f --&gt; g: na
  g --&gt; h: na
  h --&gt; i: na
  i --&gt; j: na
  j --&gt; k: na
  k --&gt; l: na
  l --&gt; batman1: Batman!
  batman1 --&gt; a: Na
  batman1 --&gt; batman2: Batman!
  batman2 --&gt; batman3: Batman!
  batman3 --&gt; a: Na
  batman1 --&gt; [*]: ε
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<dl>
<dt>States</dt>
<dd>
<p>a-l, batman1, batman2, batman3</p>
</dd>
<dt>Inputs</dt>
<dd>
<p>Na, na, Batman!</p>
</dd>
</dl>
</section>
</section>
</section>
<section id="automata-and-formal-grammars" class="level2">
<h2 class="anchored" data-anchor-id="automata-and-formal-grammars">Automata and Formal Grammars</h2>
<p>If you have</p>
<ul>
<li>some formal Grammar <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D"></li>
</ul>
<p>that you use to generate</p>
<ul>
<li>the strings of language <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"></li>
</ul>
<p>There is <em>some</em> Automaton (maybe <em>not</em> a finite state automaton!) that can decide whether nor not a string is in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> or not.</p>
<p>This relationship between automata of various complexity and formal grammars/languages is called the “Chomsky Hierarchy.”</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lin511-2024.github.io/notes/meetings/assets/chomsky.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%"></p>
</figure>
</div>
</section>
<section id="returning-to-our-small-formal-language" class="level2">
<h2 class="anchored" data-anchor-id="returning-to-our-small-formal-language">Returning to our small formal language</h2>
<p>Here’s the grammar rules we had for our grammar</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D"> is the grammar of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">. It contains 4 rules</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?S%20%5Crightarrow%20aA"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20aB"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20aA"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?B%20%5Crightarrow%20b"></p></li>
</ol></li>
</ul>
<section id="using-the-grammar-to-generate-a-string" class="level3">
<h3 class="anchored" data-anchor-id="using-the-grammar-to-generate-a-string">Using the grammar to generate a string</h3>
<p>We can build up a string by choosing rules and applying them</p>
<div class="columns">
<div class="column" style="width:40%;">
<p>Start</p>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
  S
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<hr>
<div class="columns">
<div class="column" style="width:30%;">
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?S%5Crightarrow%20aA"></li>
</ol>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
  S --&gt; a1["a"]
  S --&gt; A1["A"]
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<hr>
<div class="columns">
<div class="column" style="width:30%;">
<ol start="3" type="1">
<li><img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20aA"></li>
</ol>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
  S --&gt; a1["a"]
  S --&gt; A1["A"]
  A1 --&gt; a2["a"]
  A1 --&gt; A3["A"]
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<hr>
<div class="columns">
<div class="column" style="width:30%;">
<ol start="2" type="1">
<li><img src="https://latex.codecogs.com/png.latex?A%20%5Crightarrow%20aB"></li>
</ol>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
  S --&gt; a1["a"]
  S --&gt; A1["A"]
  A1 --&gt; a2["a"]
  A1 --&gt; A2["A"]
  A2 --&gt; a3["a"]
  A2 --&gt; B
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<hr>
<div class="columns">
<div class="column" style="width:30%;">
<ol start="4" type="1">
<li><img src="https://latex.codecogs.com/png.latex?B%20%5Crightarrow%20b"></li>
</ol>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
  S --&gt; a1["a"]
  S --&gt; A1["A"]
  A1 --&gt; a2["a"]
  A1 --&gt; A2["A"]
  A2 --&gt; a3["a"]
  A2 --&gt; B
  B --&gt; b
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<hr>
<p>Result: <img src="https://latex.codecogs.com/png.latex?aaab"></p>
</section>
<section id="defining-a-fsa-to-recognize-the-language" class="level3">
<h3 class="anchored" data-anchor-id="defining-a-fsa-to-recognize-the-language">Defining a FSA to recognize the language</h3>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  
  [*]--&gt;p
  p --&gt; q: a
  q --&gt; q: a
  q --&gt; [*]: b
  
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<ul>
<li><p>If we take strings, generated by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D"> and feed them to this FSA one-by-one, we should arrive at the “accepting” state without any symbols left over.</p></li>
<li><p>If we take a string, generated by some unknown grammar, pass it through this FSA, and arrive at the “accepting” state without any symbols left over, then it <em>could</em> have been generated by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D">.</p></li>
<li><p>If we take a string, and pass it through this FSA, and either never get to the accepting state, or have symbols left over, then it <em>couldn’t</em> have been generated by <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BG%7D">, and isn’t in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D">.</p></li>
</ul>
</section>
</section>
<section id="what-does-this-have-to-do-with-regular-expressions" class="level2">
<h2 class="anchored" data-anchor-id="what-does-this-have-to-do-with-regular-expressions">What does this have to do with “Regular Expressions?”</h2>
<p>“Regular Expressions” are a concise, computery way to define finite state automata that take text as input strings and return matches. That is, regular expressions can identify strings that belong to “regular” languages.</p>
<p>We’ll talk about details later, but if I wasn’t sure of someone was using British spelling or American spelling, I could write a RegEx to match either <code>color</code> or <code>colour</code>.</p>
<div class="columns">
<div class="column" style="width:30%;">
<p><code>colou?r</code></p>
</div><div class="column" style="width:50%;">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
  direction LR
  [*] --&gt; 1
  1 --&gt; 2: c
  2 --&gt; 3: o
  3 --&gt; 4: l
  4 --&gt; 5: o
  5 --&gt; 6: u
  5 --&gt; [*]: r
  6 --&gt; [*]: r
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
</div>
<section id="limitations-of-regex" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-regex">Limitations of RegEx</h3>
<p>Because Regular Expressions define a finite state automaton, and FSAs can only successfully recognize regular languages, that means you can’t use Regular Expressions (reliably) to recognize any more complex language.</p>
<p>For example, HTML pages use “tags” to define where text elements begin and end. In this code snippet, the opening <code>&lt;p&gt;</code> tag says a paragraph is beginning, and the closing <code>&lt;/p&gt;</code> says the paragraph is ending. The opening <code>&lt;strong&gt;</code> tag says the text is turning bold, and the closing <code>&lt;/strong&gt;</code> tag says the text is turning regular again.</p>
<div class="langname">
<pre class="langname">html</pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2">  This is a paragraph with </span>
<span id="cb1-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">strong</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-4">    bold text</span>
<span id="cb1-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">strong</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-6">  .</span>
<span id="cb1-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">p</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<ul>
<li><p>For an html page to be valid, every opening tag, <code>&lt;tag&gt;</code> needs to have a matching closing tag <code>&lt;/tag&gt;</code>.</p></li>
<li><p>You can’t have a closing tag <code>&lt;/tag&gt;</code> without a preceding opening <code>&lt;tag&gt;</code>.</p></li>
<li><p>You you can embed another opening and closing tag set within another opening and closing tag set.</p></li>
<li><p>This kind of long distance “bracket matching”, where you can have intervening brackets, requires at least a push-down automaton to recognize.</p></li>
<li><p>That means html is a context-sensitive language.</p></li>
<li><p><a href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454">You cannot use RegEx to successfully validate html.</a></p></li>
</ul>
</section>
</section>
<section id="some-further-reading" class="level2">
<h2 class="anchored" data-anchor-id="some-further-reading">Some further reading</h2>
<p><span class="citation" data-cites="jäger2012">Jäger and Rogers (2012)</span></p>



</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-jäger2012" class="csl-entry">
Jäger, Gerhard, and James Rogers. 2012. <span>“Formal Language Theory: Refining the Chomsky Hierarchy.”</span> <em>Philosophical Transactions of the Royal Society B: Biological Sciences</em> 367 (1598): 1956–70. <a href="https://doi.org/10.1098/rstb.2012.0077">https://doi.org/10.1098/rstb.2012.0077</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Complex in the sense of what they can <em>do</em>, not necessarily how easy it is to understand them.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {Regular {Languages} and {Finite} {State} {Machines}},
  date = {2024-01-16},
  url = {https://lin511-2024.github.io/notes/meetings/01_fsm.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“Regular Languages and Finite State
Machines.”</span> January 16, 2024. <a href="https://lin511-2024.github.io/notes/meetings/01_fsm.html">https://lin511-2024.github.io/notes/meetings/01_fsm.html</a>.
</div></div></section></div> ]]></description>
  <category>compling</category>
  <guid>https://lin511-2024.github.io/notes/meetings/01_fsm.html</guid>
  <pubDate>Tue, 16 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>FSA in-class notes</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/meetings/01-1_fsm_addenda.html</link>
  <description><![CDATA[ 




<section id="finite-state-automata-and-regex" class="level2">
<h2 class="anchored" data-anchor-id="finite-state-automata-and-regex">Finite State Automata and RegEx</h2>
<p><code>ok(a+y)?</code></p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">stateDiagram
    direction LR
    [*] --&gt; 1
    1 --&gt; 2: o
    2 --&gt; 3: k

    3 --&gt; group1

    state group1{
        [*] --&gt; 4
        4 --&gt; 4: a
        4 --&gt; [*]: y
    }
    group1 --&gt; [*]: ε

    3 --&gt; [*]: ε
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="the-regex-for-batman" class="level2">
<h2 class="anchored" data-anchor-id="the-regex-for-batman">The RegEx for Batman</h2>
<div class="langname">
<pre class="langname">regex</pre>
</div>
<pre class="regex"><code>Na (na){15} Batman!( Batman! Batman!)?</code></pre>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {FSA in-Class Notes},
  date = {2024-01-16},
  url = {https://lin511-2024.github.io/notes/meetings/01-1_fsm_addenda.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“FSA in-Class Notes.”</span> January 16,
2024. <a href="https://lin511-2024.github.io/notes/meetings/01-1_fsm_addenda.html">https://lin511-2024.github.io/notes/meetings/01-1_fsm_addenda.html</a>.
</div></div></section></div> ]]></description>
  <category>compling</category>
  <guid>https://lin511-2024.github.io/notes/meetings/01-1_fsm_addenda.html</guid>
  <pubDate>Tue, 16 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setup Notes</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/programming/00_setup.html</link>
  <description><![CDATA[ 




<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>We’ll need to get our systems setup to work properly with the tools we’ll be using this semester.</p>
<section id="vscode-and-the-command-line" class="level3">
<h3 class="anchored" data-anchor-id="vscode-and-the-command-line">VSCode and The Command Line</h3>
<div class="columns">
<div class="column" style="width:45%;">
<section id="windows-users" class="level4">
<h4 class="anchored" data-anchor-id="windows-users">Windows Users</h4>
<p>If you ware using a windows computer, I’ll ask you to install Windows Subsystem for Linux like so:</p>
<ul class="task-list">
<li><label><input type="checkbox"><a href="https://lingmethodshub.github.io/content/windows/wsl/00_installing_wsl.html">Follow the tutorial here for enabling and installing WSL</a></label></li>
<li><label><input type="checkbox"><a href="https://code.visualstudio.com/">Install VS Code</a></label></li>
<li><label><input type="checkbox"><a href="https://code.visualstudio.com/docs/remote/wsl-tutorial#_prerequisites">Work through the first section of this tutorial, stopping after you connect to WSL</a></label></li>
</ul>
</section>
</div><div class="column" style="width:10%;">

</div><div class="column" style="width:45%;">
<section id="macoslinux-users" class="level4">
<h4 class="anchored" data-anchor-id="macoslinux-users">MacOS/Linux Users</h4>
<ul class="task-list">
<li><label><input type="checkbox"><a href="https://code.visualstudio.com/">Install VS Code</a></label></li>
</ul>
</section>
</div>
</div>
</section>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<section id="pyenv" class="level4">
<h4 class="anchored" data-anchor-id="pyenv">pyenv</h4>
<p>We’ll be using a program called <code>pyenv</code> to manage the versions of python we use. To install <code>pyenv</code>, open the VSCode Command Palette (with <span class="visually-hidden"></span>) which will open the command line interface. Then,</p>
<ul class="task-list">
<li><label><input type="checkbox">copy this line of code code from this page (<span class="visually-hidden"></span>)</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> https://pyenv.run <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span></span></code></pre></div>
<ul class="task-list">
<li><label><input type="checkbox">Paste it into the terminal ((<span class="visually-hidden"></span>)</label></li>
<li><label><input type="checkbox">Hit enter.</label></li>
</ul>
<p>Once that has successfully finished:</p>
<hr>
</section>
<div class="columns">
<div class="column" style="width:45%;">
<section id="macos-users" class="level4">
<h4 class="anchored" data-anchor-id="macos-users">MacOS Users</h4>
<ul class="task-list">
<li><label><input type="checkbox">Run this</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">open</span> ~/.zshrc</span></code></pre></div>
<details>
<summary>
If you get an error.
</summary>
<ul class="task-list">
<li><label><input type="checkbox">Run this</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> ~/.zshrc</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">open</span> ~/.zshrc</span></code></pre></div>
</details>
</section>
</div><div class="column" style="width:10%;">

</div><div class="column" style="width:45%;">
<section id="wsl-users" class="level4">
<h4 class="anchored" data-anchor-id="wsl-users">WSL users</h4>
<ul class="task-list">
<li><label><input type="checkbox">Run this</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">open</span> ~/.bashrc</span></code></pre></div>
<details>
<summary>
If you get an error
</summary>
<ul class="task-list">
<li><label><input type="checkbox">Run ths</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> ~/.bashrc</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">open</span> ~/.bashrc</span></code></pre></div>
</details>
</section>
</div>
</div>
<hr>
<ul class="task-list">
<li><label><input type="checkbox">Paste the following into the window that opens.</label></li>
</ul>
<div class="langname">
<pre class="langname">sh</pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PYENV_ROOT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/.pyenv"</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PYENV_ROOT</span>/bin <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PYENV_ROOT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/bin:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<ul class="task-list">
<li><label><input type="checkbox">Save it</label></li>
</ul>
<section id="installing-python" class="level4">
<h4 class="anchored" data-anchor-id="installing-python">Installing Python</h4>
<ul class="task-list">
<li><label><input type="checkbox">Close and reopen the terminal window</label></li>
<li><label><input type="checkbox">Copy-Paste the following lines of code</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> install 3.11</span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> global 3.11</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> virtualenv 3.11 Lin511</span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyenv</span> activate Lin511</span></code></pre></div>
<p>This will have installed a recent version of python onto your computer, and created a “virtual environment” for the class.</p>
</section>
<section id="installing-some" class="level4">
<h4 class="anchored" data-anchor-id="installing-some">Installing some</h4>
</section>
</section>
<section id="git-github-configuration" class="level3">
<h3 class="anchored" data-anchor-id="git-github-configuration">Git &amp; Github Configuration</h3>
<p><strong>Make sure you change the email and name to the email and username you use for Github!</strong></p>
<ul class="task-list">
<li><label><input type="checkbox">In the terminal, set your git email address:</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> user.email <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"you@example.com"</span></span></code></pre></div>
<ul class="task-list">
<li><label><input type="checkbox">Set your username.</label></li>
</ul>
<div class="langname">
<pre class="langname">bash</pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--global</span> user.name <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your Name"</span></span></code></pre></div>
<p>Then, follow these tutorials from github:</p>
<ul class="task-list">
<li><label><input type="checkbox"><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH Key</a></label></li>
<li><label><input type="checkbox"><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Adding your ssh key to github</a></label></li>
</ul>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald2024,
  author = {Fruehwald, Josef},
  title = {Setup {Notes}},
  date = {2024-01-08},
  url = {https://lin511-2024.github.io/notes/programming/00_setup.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald2024" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. 2024. <span>“Setup Notes.”</span> January 8, 2024. <a href="https://lin511-2024.github.io/notes/programming/00_setup.html">https://lin511-2024.github.io/notes/programming/00_setup.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <guid>https://lin511-2024.github.io/notes/programming/00_setup.html</guid>
  <pubDate>Mon, 08 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Python basics</title>
  <dc:creator>Josef Fruehwald</dc:creator>
  <link>https://lin511-2024.github.io/notes/programming/01_Python_basics.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
</div>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hello</code></pre>
</div>
</div>
<div id="cell-3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4</code></pre>
</div>
</div>
<div id="cell-4" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>11</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">word1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span></span>
<span id="cb9-2">word2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" World!"</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(word1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> word2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello World!</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False</code></pre>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False</code></pre>
</div>
</div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div>CC-BY-SA 4.0</div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{fruehwald,
  author = {Fruehwald, Josef},
  title = {Python Basics},
  url = {https://lin511-2024.github.io/notes/programming/01_Python_basics.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-fruehwald" class="csl-entry quarto-appendix-citeas">
Fruehwald, Josef. n.d. <span>“Python Basics.”</span> <a href="https://lin511-2024.github.io/notes/programming/01_Python_basics.html">https://lin511-2024.github.io/notes/programming/01_Python_basics.html</a>.
</div></div></section></div> ]]></description>
  <category>python</category>
  <guid>https://lin511-2024.github.io/notes/programming/01_Python_basics.html</guid>
  <pubDate>Tue, 06 Feb 2024 13:58:12 GMT</pubDate>
</item>
</channel>
</rss>
